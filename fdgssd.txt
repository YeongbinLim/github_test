
################################################################################
## Procedure    : pGENESIS_VERSION_CHECK

proc degreeSine {degrees} {
    set radians [deg2rad $degrees]
    return [expr {sin($radians)}]
}

################################################################################
## Procedure    : pMATRIX_INFO
## ����         : Layer �� Matrix ����
## Input        : layer (row context type polarity)
## Return       : ������ Layer Matrix ���� ���
##

proc pMATRIX_INFO {layer option} {
        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        #set gROWrow         {"1"        "2"             "3"         "4"           "5"        "6"        "7"        "8"        "9"           "10"        "11"            "12"       "13"       "14"       "15"       "16"       "17"       "18"       "19"       "20"       "21"       "22"         "23"       "24"       "25"       "26"       "27"       "28"       "29"       "30"       "31"          "32"       "33"       "34"       "35"      }
        #set gROWname        {"l1-metal" "l5-2lprscreen" "l5-2image" "l5-print2"   "l1"       "l2p"      "l3p"      "l4"       "l6-print2"   "l6-2image" "l6-2lprscreen" "d"        "d-12"     "d-23"     "d-34"     "d-nth"    "ext-doc"  "ext-unit" "pad"      "jig-cd"   "jig-rout" "bondfinger" "l1-cs"    "smtpad"   "l1_org"   "d-12yag"  "d-34yag"  "rout"     "screen-1" "screen-2" "plug"        "l1-fill"  "l4-fill"  "l1_etch"  "l4_etch" }
        #set gROWcontext     {"misc"     "misc"          "misc"      "board"       "board"    "board"    "board"    "board"    "board"       "misc"      "misc"          "board"    "board"    "board"    "board"    "misc"     "misc"     "misc"     "misc"     "misc"     "misc"     "misc"       "misc"     "misc"     "misc"     "misc"     "misc"     "misc"     "misc"     "misc"     "misc"        "misc"     "misc"     "misc"     "misc"    }
        #set gROWlayer_type  {"signal"   "signal"        "signal"    "solder_mask" "signal"   "signal"   "signal"   "signal"   "solder_mask" "signal"    "signal"        "drill"    "drill"    "drill"    "drill"    "drill"    "signal"   "rout"     "signal"   "drill"    "signal"   "signal"     "signal"   "signal"   "signal"   "signal"   "signal"   "signal"   "signal"   "signal"   "silk_screen" "signal"   "signal"   "signal"   "signal"  }
        #set gROWpolarity    {"positive" "positive"      "positive"  "positive"    "positive" "positive" "positive" "positive" "positive"    "positive"  "positive"      "positive" "positive" "positive" "positive" "positive" "positive" "positive" "positive" "positive" "positive" "positive"   "positive" "positive" "positive" "positive" "positive" "positive" "positive" "positive" "positive"    "positive" "positive" "positive" "positive"}

        set index [lsearch $gROWname $layer]
        if {$layer_index == -1} {
                return 1
        }

        if {$option  == "row"} {
                set value [lindex $gROWrow $index]
        } elseif {$option == "context"} {
                set value [lindex $gROWcontext $index]
        } elseif {$option == "type"} {
                set value [lindex $gROWlayer_type $index]
        } elseif {$option == "polarity"} {
                set value [lindex $gROWpolarity $index]
        } else {
                return 1
        }
        return $value
}

################################################################################
## Procedure    : pSR_PROFILE_OUT
## ����         :
## Input        :
## Return       :
##

proc pSR_PROFILE_OUT { } {
        DEL_LAYER _tmp_profile
        COM create_layer,layer=_tmp_profile,context=misc,type=signal,polarity=positive,ins_layer=

        AFFECT _tmp_profile
        COM sr_fill,polarity=positive,step_margin_x=0,step_margin_y=0,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=0,sr_margin_y=0,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
        COM sel_break_isl_hole,islands_layer=isl_lyr,holes_layer=hole_lyr
        DEL_LAYER _tmp_profile

        DO_INFO -t layer -e $::wJOB/$::wPANEL/hole_lyr/ -d LIMITS ,units=mm
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS, units=mm

        # SR �뱤 Ÿ�� �Ÿ� �ּ� 250mm�̻� ���� �Ͽ��� �ϱ� ������ �ּ� ������ ����
        # ������ 300���� ��
        puts "gLIMITSxmin :$gLIMITSxmin"
        puts "gLIMITSymin :$gLIMITSymin"
        puts "gLIMITSxmax :$gLIMITSxmax"
        puts "gLIMITSymax :$gLIMITSymax"
        puts "--"

        if {[expr $gPROF_LIMITSxmax - (2*$gLIMITSxmin)] < 300} {
                set add_x [expr (300 - ($gPROF_LIMITSxmax - (2*$gLIMITSxmin)))/2.0]
                set gLIMITSxmin [expr $gLIMITSxmin - $add_x]
                set gLIMITSxmax [expr $gLIMITSxmax + $add_x]
        }

        set cmd "
                set sr_pf_o_xy \"$gLIMITSxmin $gLIMITSymin $gLIMITSxmax $gLIMITSymax\"
        "
        
        puts "gLIMITSxmin :$gLIMITSxmin"
        puts "gLIMITSymin :$gLIMITSymin"
        puts "gLIMITSxmax :$gLIMITSxmax"
        puts "gLIMITSymax :$gLIMITSymax"

        # PAUSE pSTEP_PROFILE_CENTER
        eval $cmd

        uplevel 1 $cmd
        DEL_LAYER isl_lyr hole_lyr
}

################################################################################
## Procedure    : pPANEL_PROFILE_OUT
## ����         :
## Input        :
## Return       :
##

proc pPANEL_PROFILE_OUT { } {
        DO_INFO -t step -e $::wJOB/$::wPANEL/ -d PROF_LIMITS ,units=mm
        set cmd "
                set panel_pf_o_xy \"$gPROF_LIMITSxmin $gPROF_LIMITSymin $gPROF_LIMITSxmax $gPROF_LIMITSymax\"
        "
        eval $cmd

        uplevel $cmd
}

################################################################################
## Procedure    : pSTEP_PROFILE_CENTER
## ����         :
## Input        :
## Return       :
##

proc pSTEP_PROFILE_CENTER {step} {
        DO_INFO -t step -e $::wJOB/$step/ -d PROF_LIMITS ,units=mm
        set cmd "
                set panel_pf_c_xy \"[expr $gPROF_LIMITSxmin + ($gPROF_LIMITSxmax - $gPROF_LIMITSxmin) / 2.0] [expr $gPROF_LIMITSymin + ($gPROF_LIMITSymax - $gPROF_LIMITSymin) / 2.0]\"
                set panel_pf_size_xy \"[expr $gPROF_LIMITSxmax - $gPROF_LIMITSxmin] [expr $gPROF_LIMITSymax - $gPROF_LIMITSymin]\"
                #set panel_pf_c_xy \"[expr ($gPROF_LIMITSxmax - $gPROF_LIMITSxmin) / 2.0] [expr ($gPROF_LIMITSymax - $gPROF_LIMITSymin) / 2.0]\"
        "
        eval $cmd

        uplevel 1 $cmd
        }

################################################################################
## Procedure    : pPROCESS_TO_LAYER_CHK
## ����         : Process �� �ʼ� Layer �� ���� ���� Check
## Input        :
## Return       :
##

proc pPROCESS_TO_LAYER_CHK {layer_info_path } {
        # Layer List
        DO_INFO -t step -e $::wJOB/$::wSR_STEP -d LAYERS_LIST,units=mm

        # Excel layer_info sheet �� �ִ� ���� ��밡��
        pLAYER_INFO $layer_info_path

        # �⺻�� ����
        set chk_layer_list ""






#        # ������
#        if {$::wPLATING_TYPE == "ELECTROLESS"} {
#
#        }
#
#        # ����
#        if {$::wPLATING_TYPE == "ELECTROLYSIS"} {
#
#        }
#
#        # DRY FILM ETCH BACK
#        if {$::wPLATING_TYPE == "DRY_EB"} {
#                set chk_layer_list "${out_c}-2soft ${out_s}-2soft ${out_c}-3eb ${out_s}-3eb"
#        }
#
#        # LPR ETCH BACK
#        if {$::wPLATING_TYPE == "LPR_EB"} {
#
#        }
#
#        # Only OSP
#        if {$::wPLATING_TYPE == "OSP"} {
#
#        }
#
#        # �ݵ��� + OSP
#        if {$::wPLATING_TYPE == "AU_OSP"} {
#                set chk_layer_list "${out_c}-2soft ${out_s}-2soft"
#        }
#
#        # SEP
#        if {$::wPLATING_TYPE == "SEP"} {
#                set chk_layer_list "${out_c}-2sep ${out_s}-2sep ${out_c}-3sep ${out_s}-3sep"
#        }
#

#
#        ## Drill Type �� Layer ���� ���� Check
#
#        # �⺻�� ����
#        set chk_layer_list ""
#
#        if {$::wDRILL_TYPE  == "wcnn"} {
#                set chk_layer_list "$out_c_w $laser_c"
#        }
#
#        if {$::wDRILL_TYPE  == "nncw"} {
#                set chk_layer_list "$out_s_w $laser_s"
#        }
#
#        if {$::wDRILL_TYPE  == "ycnncwcy"} {
#                set chk_layer_list "$yag_c c-12 $in_s_w c-32 $yag_s c-43"
#        }
#
#        if {$::wDRILL_TYPE  == "wcnnnncw"} {
#                set chk_layer_list "$out_c_w c-12 $out_s_w c-43"
#        }

        # Layer ���� ���� Check
        foreach layer $chk_layer_list {
                if {[lsearch $gLAYERS_LIST $layer] == -1} {
                        puts "ERROR... Unable to Create Special Layer: $layer , Selected Drill Type: $::wDRILL_TYPE !!!"
                        PAUSE "ERROR... Unable to Create Special Layer: $layer , Selected Drill Type: $::wDRILL_TYPE !!!"
                        exit 1
                }
        }
}

################################################################################
## Procedure    : pBASIC_LAYER_CREATE
## ����         : �ʼ� Layer ����
## Input        :
## Return       :
##

proc pBASIC_LAYER_CREATE {layer_info_path} {
        if {$::wSR_DIV_INFO == "all"} {return}

        STEP_ON $::wJOB $::wPANEL no

        pLAYER_INFO $layer_info_path

        # ORC Layer �ڵ� ����
        foreach layer $orc_all {
                # Layer����
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {
                        COM create_layer,layer=$layer,context=misc,type=signal,polarity=positive,ins_layer=
                }
        }
}


################################################################################
## Procedure    : pPANEL_LOG_SAVE
## ����         : Panel Log File Save
## Input        :
## Return       :

proc pPANEL_LOG_SAVE {fileName arg} {
        COM get_user_name
        set getUser $::COMANS
        set loginSystem $::env(DISPLAY)

        set Date [clock format [clock scan now] -format %y/%m/%d]
        set Time [clock format [clock scan now] -format %H:%M:%S]

        #set arg ""

        set fileID [open $fileName a+]

        puts $fileID [format "%-20s %-10s %-10s Date\[%s\] Time\[%s\] msg: %s" $::wJOB $loginSystem $getUser $Date $Time $arg]
        close $fileID
}


################################################################################
## Procedure    : pOVERWRITE_MODE
## ����         : PCB �迭���� ���� PNL�� OVERWRITE ����
## Input        :
## Return       :
##

proc pOVERWRITE_MODE {} {

        # PANEL Step Name Check
        DO_INFO -t step -e $::wJOB/$::wPANEL -d exists,units=mm
        if {$gEXISTS == "no"} {
                tk_messageBox -message "PNL Step \[$::wPANEL\] does not exist !!!"
                return no_step
        }

        STEP_ON $::wJOB $::wPANEL no
	COM units,type=mm

        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                # 2L
        }
        ## ����� Trim Info
        #1 5 5 402 505 bonding+pin
        #2 5 5 397 500 bonding+pin

        # Active Area Define
        set trim_x_value 0
        set trim_y_value 0
        puts $trim_info
        if {[info exists trim_info]} {
                foreach line $trim_info {
                        if {$line != ""} {
                                puts $line
                                set add_x [lindex $line 1]
                                set add_y [lindex $line 2]
                                set trim_x_value [expr $trim_x_value + ($add_x / 2.0)]
                                set trim_y_value [expr $trim_y_value + ($add_y / 2.0)]
                        }
                }
        }
        # Active Aare Dfine
        STEP_ON $::wJOB $::wPANEL no
        COM sr_active,top=[expr $::wTRIM_TO_ACTIVE_Y + $trim_y_value],bottom=[expr $::wTRIM_TO_ACTIVE_Y + $trim_y_value],left=[expr $::wTRIM_TO_ACTIVE_X + $trim_x_value],right=[expr $::wTRIM_TO_ACTIVE_X + $trim_x_value]
        PAUSE "This is Overwrite Mode. Continue?"
        COM affected_filter,filter=(context=board|misc)
        COM sel_delete
}


################################################################################
## Procedure    : pPANEL_CREATE_STEP_REPEAT
## ����         :
## Input        :
## Return       :
##

proc pPANEL_CREATE_STEP_REPEAT {} {
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel ���� ���� Check
        DO_INFO -t step -e $::wJOB/$::wPANEL -d exists
        if {$gEXISTS == "yes"} {
                PAUSE "Panel $::wPANEL is already exist, Would you check !!!"
                exit 1
        }


        # Panel ����
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]


        COM create_entity,job=$::wJOB,type=step,name=$::wPANEL

	STEP_ON $::wJOB $::wPANEL no
	COM units,type=mm

	COM profile_rect,x1=0,y1=0,x2=$work_x,y2=$work_y
	COM zoom_home

        if {$::wORIENTATION == "manual"} {
                PAUSE "Step&Repeat Manual !!!"
        } else {
                COM sr_auto,step=$::wSR_STEP,num_mode=multiple,xmin=0,ymin=0,width=$work_x,height=$work_y,panel_margin=0,step_margin=0,gold_plate=no,orientation=$::wORIENTATION,evaluate=no,active_margins=yes,top_active=$active_area_y,bottom_active=$active_area_y,left_active=$active_area_x,right_active=$active_area_x,step_xy_margin=yes,step_margin_x=$::wARRAY_DX,step_margin_y=$::wARRAY_DY
        }

        ########################################################################


        PAUSE "Panel Array Check !!!"
}




################################################################################
## Procedure    : pPANEL_CREATE_STEP_AUTO
## ����         : PNL SIZE 518 x 618 ������ ��� �ʸ� PLOTTING �� AUTO STEP ����
## Input        : $layer_info_path
## Return       :
##

proc pPANEL_CREATE_STEP_AUTO { layer_info_path } {

        puts "###### pPANEL_CREATE_STEP_AUTO START ############################"
        puts "###### pPANEL_CREATE_STEP_AUTO START ############################"
        puts "###### pPANEL_CREATE_STEP_AUTO START ############################"

        # PANEL Step Name Check
        DO_INFO -t step -e $::wJOB/$::wPANEL -d exists,units=mm
        if {$gEXISTS == "no"} {
                tk_messageBox -message "PNL Step \[$::wPANEL\] does not exist !!!"
                return
        }
        # PANEL Step Name Check : panel �� �ƴ� ��� ALARM
        if {$::wPANEL != "panel"} {
                set answer [tk_messageBox -type yesno -message "PNL STEP name is \[$::wPANEL\]!!!\nAuto Step create continue ?"]
                if {$answer == "no"} {
                        return
                }
        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel ���� ���� Ȯ��
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # 510x610 -> 518x618 ���� PNL Size�� AUTO-SM STEP ���� (20181231 ������Ʈ - Film�� ��û
        if {$work_x > 518 || $work_y > 618} {
                puts "Panel size is larger than 518x618.. Need not create Auto-sm step!!!"
                DO_INFO -t step -e $::wJOB/auto -d exists,units=mm
                if {$gEXISTS == "yes"} {
                        COM delete_entity,job=$::wJOB,type=step,name=auto
                }
                return
        }


        # ���� auto-sm STEP Check �� ����
        DO_INFO -t step -e $::wJOB/auto-sm -d exists,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_entity,job=$::wJOB,type=step,name=auto-sm
        }

        # ���� ���� - AUTO Step PNL �ִ� Size ����
        # KOREA AUTO Step �ִ� Size�� 597 x 699 (24x28 inch)
        # DDPI AUTO Step �ִ� Size�� 558 x 660 (22x26 inch)
        set PNL_STEP auto
        if {$::wSITE == 3} {
                set dx 558
                set dy 660
                set d_symbol dd.pnl.mlb_ddpi_dummy_auto
        } else {
                set dx 597
                set dy 699
                set d_symbol dd.pnl.mlb_dummy_auto_sm
        }


        # AUTO STEP Check
        DO_INFO -t step -e $::wJOB/$PNL_STEP -d exists
        if {$gEXISTS == "yes"} {
                # AUTO Step ���� data ����
                if {$::wSITE == 3} {
                        # AUTO step ���� �� ����
                        COM delete_entity,job=$::wJOB,type=step,name=$PNL_STEP
                        COM create_entity,job=$::wJOB,type=step,name=$PNL_STEP
                } else {
                        # AUTO step ���� ���� ����
                        STEP_ON $::wJOB $PNL_STEP no
                        COM affected_filter,filter=(context=board|misc)
                        COM sel_delete
                }
        } else {
                # AUTO step ����
                COM create_entity,job=$::wJOB,type=step,name=$PNL_STEP
        }

	STEP_ON $::wJOB $PNL_STEP no
	COM units,type=mm

        # PANEL STET S&R ����
	COM sr_auto,step=$::wPANEL,num_mode=multiple,xmin=0,ymin=0,width=$dx,height=$dy,panel_margin=0,step_margin=0,gold_plate=no,orientation=horizontal,evaluate=no,active_margins=yes,top_active=0,bottom_active=0,left_active=0,right_active=0,step_xy_margin=no,step_margin_x=0,step_margin_y=0

        CLEAR_RESET

        COM filter_reset,filter_name=popup

	# SR Layer �� ���� (2019.01.03 ������Ʈ - For DDPI)
	foreach layer "$sr_all $sr_all_1 $sr_all_2" {
	        DO_INFO -t layer -e $::wJOB/$PNL_STEP/$layer -d EXISTS,units=mm
                if {$gEXISTS == "yes"} {
        	        WORK $layer
                        set sr_margin_x 0
                        set sr_margin_y 0

                        set step_margin_x 0
                        set step_margin_y 0

                        set cut_prims yes

                        # cut_prims=no �� ������ �ð� ���� �߻� �� PAD ������ ������ ��� ���� �ʿ�
                        COM fill_params,type=pattern,origin_type=datum,solid_type=surface,std_type=line,min_brush=25.4,use_arcs=yes,symbol=$d_symbol,dx=$dx,dy=$dy,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=$cut_prims,outline_draw=no,outline_width=0,outline_invert=no
                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wPANEL,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                        COM fill_params,type=solid,origin_type=datum,solid_type=surface

                        # Symbol Break
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_break
                        }

                }
	}

	if {$::wSITE == 3} {
                set d_symbol dd.pnl.mlb_ddpi_dummy_auto
        } else {
                set d_symbol dd.pnl.mlb_dummy_auto_df
        }


	# DF Layer�� �� ���� (2019.01.03 ������Ʈ - For DDPI)
	foreach layer "$in_all $out_all" {
	        DO_INFO -t layer -e $::wJOB/$PNL_STEP/$layer -d EXISTS,units=mm
                if {$gEXISTS == "yes"} {
        	        WORK $layer
                        set sr_margin_x 0
                        set sr_margin_y 0

                        set step_margin_x 0
                        set step_margin_y 0

                        set cut_prims yes

                        # cut_prims=no �� ������ �ð� ���� �߻� �� PAD ������ ������ ��� ���� �ʿ�
                        COM fill_params,type=pattern,origin_type=datum,solid_type=surface,std_type=line,min_brush=25.4,use_arcs=yes,symbol=$d_symbol,dx=$dx,dy=$dy,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=$cut_prims,outline_draw=no,outline_width=0,outline_invert=no
                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wPANEL,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                        COM fill_params,type=solid,origin_type=datum,solid_type=surface

                        # Symbol Break
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_break
                        }

                }
	}

        if {$::wSITE == 3} {

                set position_y [expr $dy - 6.3]

                DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
                foreach layer $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                        #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                        if {$context != "board" || $layer == "c01" || [regexp {^p[0-9]*$|^ana|^p[0-9]*} $layer] || [regexp {silk_screen|drill} $layer_type] } {continue}

                        set t_symbol {$$JOB}

                        AFFECT $layer

                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm
                        set text "$layer $gLPDpolarity $gLPDxstretch $gLPDystretch $gLPDxshift $gLPDyshift $gLPDxmirror $gLPDymirror $gLPDxcenter_inch $gLPDycenter_inch $gLPDsmoothing $gLPDswap_axes $gLPDdef_ext_lpd $gLPDdevice_type $gLPDres_value $gLPDres_units"
                        set ymirror [lindex $text 7]

                        # ���� / Marking / Plugging
                        set top_jepan "$screen_c $silk_c $out_plug $out_plug_c $out_plug_1 $out_plug_2 $in_plug_c $in_plug_c_1 $in_plug_c_2"
                        set btm_jepan "$screen_s $silk_s $out_plug_s $in_plug_s $in_plug_s_1 $in_plug_s_2"

                        # Top - Mirror no
                        if {$ymirror != 0} {
                                # ���� Layer�� Mirror �ݴ� (Mirror - yes)
                                # PAUSE "lsearch $btm_jepan $layer == [lsearch $btm_jepan $layer]"
                                 if {[lsearch $btm_jepan $layer] != -1} {
                                        set position_x [expr $dx - 1]
                                        COM add_text,attributes=no,type=string,x=$position_x,y=$position_y,text=$t_symbol,x_size=5.08,y_size=5.08,w_factor=2,polarity=positive,angle=0,mirror=yes,fontname=standard,ver=1
                                } else {
                                        set position_x 1
                                        COM add_text,attributes=no,type=string,x=$position_x,y=$position_y,text=$t_symbol,x_size=5.08,y_size=5.08,w_factor=2,polarity=positive,angle=0,mirror=no,fontname=standard,ver=1
                                }
                        # Btm - Mirror yes
                        } else {
                                # ���� Layer�� Mirror �ݴ� (Mirror - no)
                                #PAUSE "lsearch $top_jepan $layer == [lsearch $top_jepan $layer]"
                                if {[lsearch $top_jepan $layer] != -1} {
                                        set position_x 1
                                        COM add_text,attributes=no,type=string,x=$position_x,y=$position_y,text=$t_symbol,x_size=5.08,y_size=5.08,w_factor=2,polarity=positive,angle=0,mirror=no,fontname=standard,ver=1
                                } else {
                                        set position_x [expr $dx - 1]
                                        COM add_text,attributes=no,type=string,x=$position_x,y=$position_y,text=$t_symbol,x_size=5.08,y_size=5.08,w_factor=2,polarity=positive,angle=0,mirror=yes,fontname=standard,ver=1
                                }
                        }

                }
        }


	if {$::wDDPI == 1} {
	        PAUSE "DDPI Auto Step Create Success !!!"
	}

        STEP_ON $::wJOB $::wPANEL no

        CLEAR_RESET

        puts "###### pPANEL_CREATE_STEP_AUTO END ############################"
        puts "###### pPANEL_CREATE_STEP_AUTO END ############################"
        puts "###### pPANEL_CREATE_STEP_AUTO END ############################"

}



################################################################################
## Procedure    : pLAYER_INFO
## ����         :
## Input        :
## Return       :

proc pLAYER_INFO {path {mod 0}} {
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        #if {$debug_mode} {puts "proc:pLAYER_INFO Start !!!!!"}

        if {! [info exists ::wPRODUCT_TYPE]} {set ::wPRODUCT_TYPE none}

        # ���� �ϱ�
        set f [open $path r]
        set data [split [read $f] "\n"]
        close $f

         foreach line $data {
                set line [split $line "\@"]
                if {[regexp {^\#} [lindex $line 0] ]} { continue }

                set VN "LA"

                if {[regexp $VN [lindex $line 0]]} {

                        # script ����
                        set script [lindex $line 3]
                        eval $script

                        set cmd "set [lindex $line 1] \"[subst [lindex $line 2]]\""
                        eval $cmd

                        # ���� Level �� ��������
                        uplevel 1 $cmd

                        #if {$debug_mode} {
                        #        if {$script == ""} {
                        #                puts $cmd
                        #        } else {
                        #                puts [subst $script]
                        #        }
                        #}
                        if {$mod} {puts "OK $line"}
                }
        }
        #PAUSE CHK
        #if {$debug_mode} {puts "proc:pLAYER_INFO End !!!!!"}
}

################################################################################
## Procedure    : pPOSITION_INFO
## ����         :
## Input        : id ws path
## Return      : uplevel ����Ͽ� Current Procedure ���� ������ ���� Procedure
##                ���� ��� ����

proc pPOSITION_INFO {id ws path} {
        # ���� �ϱ�
        set f [open $path r]
        set data [split [read $f] "\n"]
        close $f

        # Structure info
        foreach line $data {
                set line [split $line "\@"]

                if {! [regexp {^\#} [lindex $line 0] ]} {
                        if {[lindex $line 0] == "WS"} {
                                set value_index [lsearch -all $line $ws]
                        }

                        if {$value_index == -1} {
                                puts "ERROR (pPOSITION_INFO) : Window Work Size = $ws Excell Work Size List = $line"
                                PAUSE "ERROR (pPOSITION_INFO) : Work Size miss match !!!"
                                exit 1
                        }

                        if {[lindex $line 0] == "VN"} {
                                set variable_list [lrange $line 0 end]
                        }

                        if {[lindex $line 0] == "PO"} {
                                set t_id [lindex $line 1]
                                if {$id == $t_id} {
                                        set cmd "
                                                set t_x \"[lindex $line [lindex $value_index 0]]\"
                                                set t_y \"[lindex $line [lindex $value_index 1]]\"
                                        "

                                        # ���� Level �� ��������
                                        uplevel 1 $cmd
                                        return 0
                                }
                        }
                }
        }
        return 1
}

################################################################################
## Procedure    : pTOOL_XY_INFO
## ����         : ���� �߾Ӱ� XY ���� �ָ� ������ŭ�� ���� XY �� ����
## Input        : cen_x cen_y x1 y1 angle
## Return       :
##

proc pTOOL_XY_INFO {cen_x cen_y x1 y1 angle} {
        set x_sign [expr $x1 - $cen_x]
	set y_sign [expr $y1 - $cen_y]

        set r [expr sqrt(pow(($x1-$cen_x),2) + pow(($y1-$cen_y),2))]
        #puts "x1=$x1 cen_x=$cen_x x=$x_sign r=$r"
        set angle_start [rad2deg [expr acos($x_sign/$r)]]

        # 1��и� 2��и�
	if {$x_sign > 0 && $y_sign >= 0 || $x_sign <= 0 && $y_sign > 0} {
		set x [expr $r * cos([deg2rad [expr $angle_start + $angle]])]
                set y [expr $r * sin([deg2rad [expr $angle_start + $angle]])]
        # 3��и� 4��и�
	} elseif {$x_sign < 0 && $y_sign <= 0 || $x_sign >= 0 && $y_sign < 0} {
		set x [expr $r * cos([deg2rad [expr $angle_start - $angle]])]
                set y -[expr $r * sin([deg2rad [expr $angle_start - $angle]])]
	}
	return "[expr $x+$cen_x] [expr $y+$cen_y]"
}


################################################################################
## Procedure    : pADD_SYMBOL
## ����         :
## Input        : variable_list value_list
## Return      : Symbol ���� <return �� ����>

proc pADD_SYMBOL {layer_list variable_list value_list sr_pf_o_xy panel_pf_o_xy panel_pf_c_xy} {
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Layer List ������ ���� ����
        if {$layer_list == ""} {
                return
        }

        ## ���� ����
        foreach variable $variable_list value $value_list {
                set $variable $value
        }

        ## ���� �������� ��ǥ ����
        # orgin panel_prof_cen sr_prof_left sr_prof_right sr_prof_up sr_prof_down panel_prof_left panel_prof_right panel_prof_up panel_prof_down
        #PAUSE "t_type $t_type t_position_x $t_position_x"
        if {$t_orgin != "orgin" && $t_orgin != ""} {
                if {$t_orgin == "panel_prof_cen"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_c_xy 0] + $pos_x]
                                lappend position_y [expr [lindex $panel_pf_c_xy 1] + $pos_y]
                        }
                # $gLIMITSxmin $gLIMITSymin $gLIMITSxmax $gLIMITSymax
                } elseif {$t_orgin == "sr_prof_out"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                # x_min y_min
                                lappend position_x [expr [lindex $sr_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 1]-$pos_y]
                                # x_min y_max
                                lappend position_x [expr [lindex $sr_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 3]+$pos_y]
                                # x_max y_max
                                lappend position_x [expr [lindex $sr_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 3]+$pos_y]
                                # x_max y_min
                                lappend position_x [expr [lindex $sr_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 1]-$pos_y]
                                # x_min y_min
                                lappend position_x [expr [lindex $sr_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 1]-$pos_y]
                        }
                } elseif {$t_orgin == "sr_prof_xmin_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $sr_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 1]-$pos_y]
                        }
                } elseif {$t_orgin == "sr_prof_xmax_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $sr_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 3]+$pos_y]
                        }
                } elseif {$t_orgin == "sr_prof_xmin_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $sr_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 3]+$pos_y]
                        }
                } elseif {$t_orgin == "sr_prof_xmax_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $sr_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $sr_pf_o_xy 1]-$pos_y]
                        }
                } elseif {$t_orgin == "panel_prof_out"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                # x_min y_min
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]-$pos_y]
                                # x_min y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]+$pos_y]
                                # x_max y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]+$pos_y]
                                # x_max y_min
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]-$pos_y]
                                if {$t_type != "pad"} {
                                        # x_min y_min
                                        lappend position_x [expr [lindex $panel_pf_o_xy 0]-$pos_x]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 1]-$pos_y]
                                }
                        }
                } elseif {$t_orgin == "panel_prof_xmin_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]-$pos_y]
                        }
                } elseif {$t_orgin == "panel_prof_xmax_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]+$pos_y]
                        }
                } elseif {$t_orgin == "panel_prof_xmin_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]-$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]+$pos_y]
                        }
                } elseif {$t_orgin == "panel_prof_xmax_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]+$pos_x]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]-$pos_y]
                        }

                } elseif {$t_orgin == "panel_trim_out_line"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                # x_min y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                                # x_max y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                                # x_max y_min
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0]
                                # x_min y_min
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0]
                                # x_min y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                        }
                } elseif {$t_orgin == "panel_trim_out_pad"} {
                        set xy_index 0
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                #1 Xmin Ymax
                                if {[expr $xy_index % 4] == 0} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                                }
                                #2 Xmax Ymax
                                if {[expr $xy_index % 4] == 1} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                                }
                                #3 Xmax Ymin
                                if {[expr $xy_index % 4] == 2} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0]
                                }
                                #4 Xmin Ymin
                                if {[expr $xy_index % 4] == 3} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0]
                                }

                                incr xy_index
                        }
                } elseif {$t_orgin == "panel_trim_xmin_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                puts " panel_pf_o_xy : $panel_pf_o_xy"
                                puts " pos_x : $pos_x"
                                puts " t_order_x : $t_order_x"
                                puts " subst trim_${t_order_x}_x : [subst $[subst trim_${t_order_x}_x]]"
                                PAUSE 2
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0]
                        }
                } elseif {$t_orgin == "panel_trim_xmax_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                        }
                } elseif {$t_orgin == "panel_trim_xmin_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0]
                        }
                } elseif {$t_orgin == "panel_trim_xmax_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0]
                        }


                } elseif {$t_orgin == "panel_margin_out_line"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                # x_min y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                                # x_max y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0 - $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                                # x_max y_min
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0 - $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0 + $::wDF_MARGIN_Y]
                                # x_min y_min
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0 + $::wDF_MARGIN_Y]
                                # x_min y_max
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                        }
                } elseif {$t_orgin == "panel_margin_out_pad"} {
                        set xy_index 0
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                #1 Xmin Ymax
                                if {[expr $xy_index % 4] == 0} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                                }
                                #2 Xmax Ymax
                                if {[expr $xy_index % 4] == 1} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0 - $::wDF_MARGIN_X]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                                }
                                #3 Xmax Ymin
                                if {[expr $xy_index % 4] == 2} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0 - $::wDF_MARGIN_X]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0 + $::wDF_MARGIN_Y]
                                }
                                #4 Xmin Ymin
                                if {[expr $xy_index % 4] == 3} {
                                        lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                        lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0 + $::wDF_MARGIN_Y]
                                }

                                incr xy_index
                        }
                } elseif {$t_orgin == "panel_margin_xmin_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0 + $::wDF_MARGIN_Y]
                        }
                } elseif {$t_orgin == "panel_margin_xmax_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0 - $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                        }
                } elseif {$t_orgin == "panel_margin_xmin_ymax"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 0]+$pos_x+[subst $[subst trim_${t_order_x}_x]]/2.0 + $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 3]-$pos_y-[subst $[subst trim_${t_order_y}_y]]/2.0 - $::wDF_MARGIN_Y]
                        }
                } elseif {$t_orgin == "panel_margin_xmax_ymin"} {
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x [expr [lindex $panel_pf_o_xy 2]-$pos_x-[subst $[subst trim_${t_order_x}_x]]/2.0 - $::wDF_MARGIN_X]
                                lappend position_y [expr [lindex $panel_pf_o_xy 1]+$pos_y+[subst $[subst trim_${t_order_y}_y]]/2.0 + $::wDF_MARGIN_X]
                        }
                } else {
                        puts =$t_orgin not=
                        tk_messageBox -message  "t_orgin = $t_orgin not define!!!\nt_orgin=orgin change!!!"
			update
                        foreach pos_x $t_position_x pos_y $t_position_y {
                                lappend position_x $pos_x
                                lappend position_y $pos_y
                        }

                }
                set t_position_x $position_x
                set t_position_y $position_y
        }

        ## ��ǥ ������ ����
        if {$t_pos_scale_x != 1 && $t_pos_scale_x != ""} {
                foreach pos_x $t_position_x {
                        lappend position_x [expr $pos_x * $t_pos_scale_x]
                }
                set t_position_x $position_x
        }
        if {$t_pos_scale_y != 1 && $t_pos_scale_y != ""} {
                 foreach pos_y $t_position_y {
                        lappend position_y [expr $pos_y * $t_pos_scale_y]
                }
                set t_position_y $position_y
        }

        ## �Ӽ� ����
        if {$t_att == "yes"} {
                COM cur_atr_set,attribute=.string,text=$t_att_name
        }

        ## Layer ���� ���� Check
        #foreach layer $layer_list {
        #        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS
        #        if {$gEXISTS == "no"} {
        #                # ������ Checking �ϴ� ������� ����
        #                #PAUSE "$layer not Found !!! Att=$t_att_name"
        #                return
        #        }
        #}
        VOF
        ## Symbol ����
        AFFECT $layer_list
        #VON

        # PAD
        if {$t_type == "pad"} {
                # ��ǥ Check
#                if {[llength $t_position_x] != 1 || [llength $t_position_y] != 1} {
#                        tk_messageBox -message "CHECK: $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
#			update
#                        COM affected_layer,name=,mode=all,affected=no
#                        return
#                }

                # �Է°��� ��Ȯ���� ������ Default Setting
                if {$t_nx == "" || $t_ny == "" || $t_dx == "" || $t_dy == ""} {
                	set t_nx 1
                	set t_ny 1
                	set t_dx 1
                	set t_dy 1
                }

                foreach x $t_position_x y $t_position_y {
                        COM add_pad,attributes=$t_att,x=$x,y=$y,symbol=[subst $t_symbol],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,nx=$t_nx,ny=$t_ny,dx=$t_dx,dy=$t_dy,xscale=1,yscale=1
                }
        # Line
        } elseif {$t_type == "line"} {
                # ��ǥ Check
                if {[llength $t_position_x] < 2 || [llength $t_position_y] < 2} {
                        tk_messageBox -message "CHECK: symbol= $t_symbol $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
			update
                        COM affected_layer,name=,mode=all,affected=no
                        return
                }

                COM add_polyline_strt
                foreach x $t_position_x y $t_position_y {
                        COM add_polyline_xy,x=$x,y=$y
                }
                COM add_polyline_end,attributes=$t_att,symbol=$t_symbol,polarity=$t_polarity
        # Surface
        } elseif {$t_type == "surf"} {
                # ��ǥ Check
                if {[llength $t_position_x] < 4 || [llength $t_position_y] < 4} {
                        tk_messageBox -message "CHECK: $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
			update
                        COM affected_layer,name=,mode=all,affected=no
                        return
                }

                COM add_surf_strt,surf_type=feature
                COM add_surf_poly_strt,x=[lindex $t_position_x end],y=[lindex $t_position_y end]
                foreach x $t_position_x y $t_position_y {
                        COM add_surf_poly_seg,x=$x,y=$y
                }
                COM add_surf_poly_end
                COM add_surf_end,attributes=$t_att,polarity=$t_polarity
        # Clip Area
        } elseif {$t_type == "clip_area"} {
                COM clip_area_strt
                COM clip_area_xy,x=[lindex $t_position_x end],y=[lindex $t_position_y end]
                foreach x $t_position_x y $t_position_y {
                        COM clip_area_xy,x=$x,y=$y
                }
                COM clip_area_end,layers_mode=affected_layers,layer=,area=manual,area_type=polygon,inout=inside,contour_cut=yes,margin=0
        # Arc
        } elseif {$t_type == "arc"} {
                # ��ǥ Check
                if {[llength $t_position_x] != 3 || [llength $t_position_y] != 3} {
                        tk_messageBox -message "CHECK: $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
			update
                        COM affected_layer,name=,mode=all,affected=no
                        return
                }
                # ���� ������ ������ �⺻ cw
                if {$t_direction == ""} {
                	set t_direction cw
                }

                COM add_arc,attributes=$t_att,xc=[lindex $t_position_x 0],yc=[lindex $t_position_y 0],xs=[lindex $t_position_x 1],ys=[lindex $t_position_y 1],xe=[lindex $t_position_x 2],ye=[lindex $t_position_y 2],symbol=$t_symbol,polarity=$t_polarity,direction=$t_direction
        # Text
        } elseif {$t_type == "text"} {
#                # ��ǥ Check
#                if {[llength $t_position_x] != 1 || [llength $t_position_y] != 1} {
#                        tk_messageBox -message "CHECK: $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
#			update
#                        COM affected_layer,name=,mode=all,affected=no
#                        return
#                }
#
#                if {$t_att_name == "in_win_dot_size" } {
#                        set t_symbol "DOT SIZE = $::wIN_WIN_DOT_SIZE um"
#                        COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $t_position_x 0],y=[lindex $t_position_y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
#                } elseif {$t_att_name == "out_win_dot_size" } {
#                        set t_symbol "DOT SIZE = $::wOUT_WIN_DOT_SIZE um"
#                        COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $t_position_x 0],y=[lindex $t_position_y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
#                } elseif {$t_symbol == {$$DATE}} {
#                        set now_date [clock format [clock scan now] -format %m/%d/%y]
#                        COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $t_position_x 0],y=[lindex $t_position_y 0],text=$now_date,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
#                } else {
#                        COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $t_position_x 0],y=[lindex $t_position_y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
#                }

                foreach x $t_position_x y $t_position_y {

                        if {$t_att_name == "in_win_dot_size" } {
                                set t_symbol "DOT SIZE = $::wIN_WIN_DOT_SIZE um"
                                COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $x 0],y=[lindex $y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
                        } elseif {$t_att_name == "out_win_dot_size" } {
                                set t_symbol "DOT SIZE = $::wOUT_WIN_DOT_SIZE um"
                                COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $x 0],y=[lindex $y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
                        } elseif {$t_symbol == {$$DATE}} {
                                  COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $x 0],y=[lindex $y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
                        } elseif {$t_symbol == {$$JOB} || $t_symbol == {$$LAYER} || $t_symbol == {$$YY} || $t_symbol == {$$WW} || $t_symbol == {$$TIME}} {
                                COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $x 0],y=[lindex $y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
                        } else {
                                set t_symbol [subst $t_symbol]
                                COM add_text,attributes=$t_att,type=$t_t_type,x=[lindex $x 0],y=[lindex $y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,ver=1
                        }
#                        # Negative ����
#                        COM filter_reset,filter_name=popup
#                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
#                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$t_att_name
#                        COM filter_area_end,layer=,filter_name=popup,operation=select
#                        COM get_select_count
#                        if {$::COMANS} {
#                                DO_INFO -t layer -e $::wJOB/$::wPANEL/[lindex $layer_list 0] -d LIMITS -o select, units=mm
#                                COM sel_buffer_cut,x_datum=0,y_datum=0
#                                set xmin [expr $gLIMITSxmin -0.2]
#                                set ymin [expr $gLIMITSymin -0.2]
#                                set xmax [expr $gLIMITSxmax +0.2]
#                                set ymax [expr $gLIMITSymax +0.2]
#
#                                COM add_surf_poly_strt,x=$xmin,y=$ymin
#                                COM add_surf_poly_seg,x=$xmin,y=$ymax
#                                COM add_surf_poly_seg,x=$xmax,y=$ymax
#                                COM add_surf_poly_seg,x=$xmax,y=$ymin
#                                COM add_surf_poly_seg,x=$xmin,y=$ymin
#                                COM add_surf_poly_end
#                                COM add_surf_end,attributes=yes,polarity=negative
#
#                                COM sel_buffer_paste,x=0,y=0
#                        }
                }

        } elseif {$t_type == "barcode"} {
                # ��ǥ Check
                if {[llength $t_position_x] != 1 || [llength $t_position_y] != 1} {
                        tk_messageBox -message "CHECK: $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
			update
                        COM affected_layer,name=,mode=all,affected=no
                        return
                }

                COM add_text,attributes=$t_att,type=$t_type,x=[lindex $t_position_x 0],y=[lindex $t_position_y 0],text=$t_symbol,x_size=$t_x_size,y_size=$t_y_size,w_factor=[expr $t_l_width*3.28083992004],polarity=$t_polarity,angle=$t_angle,mirror=$t_mirror,fontname=standard,bar_type=UPC39,bar_char_set=full_ascii,bar_checksum=no,bar_background=yes,bar_add_string=no,bar_add_string_pos=top,bar_width=0.2032,bar_height=7.5,ver=1
        # cass_tunnel �� Ư������ ��ŭ �ݺ������Ѵ�. 360�� ���� ��������...
        } elseif {$t_type == "cass_tunnel"} {
                # ��ǥ Check
                if {[llength $t_position_x] != 2 || [llength $t_position_y] != 2} {
                        tk_messageBox -message "CHECK: $t_type coordinates t_x= $t_position_x t_y= $t_position_y\nSKIP COMMAND !!!"
			update
                        COM affected_layer,name=,mode=all,affected=no
                        return
                }

                # Layer ������ ���� �� ����
                DEL_LAYER _cass_tunnel
                COM create_layer,layer=_cass_tunnel,context=misc,type=signal,polarity=positive,ins_layer=

                AFFECT _cass_tunnel

                # Cass Tunnel ���������� ���� �� ȸ�� ��Ÿ�� ���ϱ�
                set loop [expr int($t_repeat_count) / 2]
                set x_cen [expr ([lindex $t_position_x 0] + [lindex $t_position_x 1]) / 2.0]
                set y_cen [expr ([lindex $t_position_y 0] + [lindex $t_position_y 1]) / 2.0]
                set angle [expr 180.0 / $loop]

                # ���� ���� ���� �� ��ǥ ����
                set start_xs [lindex $t_position_x 0]
                set start_ys [lindex $t_position_y 0]
                set start_xe [lindex $t_position_x 1]
                set start_ye [lindex $t_position_y 1]

                # Gass Tunnel �׸��� �� ȸ��
                while {$loop} {
                        # �׸���
                        COM add_line,attributes=$t_att,xs=$start_xs,ys=$start_ys,xe=$start_xe,ye=$start_ye,symbol=$t_symbol,polarity=$t_polarity

                        set xy [pTOOL_XY_INFO $x_cen $y_cen $start_xs $start_ys $angle]
                        set x [lindex $xy 0]
                        set y [lindex $xy 1]

                        set start_xs $x
                        set start_ys $y

                        set xy [pTOOL_XY_INFO $x_cen $y_cen $start_xe $start_ye $angle]
                        set x [lindex $xy 0]
                        set y [lindex $xy 1]

                        set start_xe $x
                        set start_ye $y

                        incr loop -1
                }
                # clip_area ����
                # ���� t_out_margin t_in_margin Checking
                if {$t_out_margin == "" || $t_in_margin == ""} {
                        tk_messageBox -message "Current Symbol Type = cass_tunnel : t_out_margin or t_inn_margin not Define !!!"
			update
                        exit 1
                }

                # Clip_area refrence layer ����
                DEL_LAYER _clip_area_ref
                COM create_layer,layer=_clip_area_ref,context=misc,type=signal,polarity=positive,ins_layer=

                AFFECT _clip_area_ref

                COM sr_fill,polarity=positive,step_margin_x=-200,step_margin_y=-200,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=-2540,sr_margin_y=-2540,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                #,use_profile=use_profile

                set step_margin_x [lindex $t_out_margin 0]
                set step_margin_y [lindex $t_out_margin 1]
                set sr_margin_x   [lindex $t_in_margin 0]
                set sr_margin_y   [lindex $t_in_margin 1]
                COM sr_fill,polarity=negative,step_margin_x=$step_margin_x,step_margin_y=$step_margin_x,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                #,use_profile=use_profile

                # �迭 ���� Step �� Step ���� �����ϱ� ����
                COM sel_break_isl_hole,islands_layer=isl_lyr,holes_layer=hole_lyr

		# Panel �� �迭���� ������ �ȵ�
		DO_INFO -t layer -e $::wJOB/$::wPANEL/ext-unit/ -d FEAT_HIST ,units=mm
		if {$gFEAT_HISTtotal == 0} {
			puts "ERROR: Step&Repeat or Profile Check !"
			tk_messageBox -message "ERROR: Step&Repeat or Profile Check !"
			update
			exit 1
		}

		# Surface ��������
                DO_INFO -t layer -e $::wJOB/$::wPANEL/hole_lyr/ -d LIMITS ,units=mm
                DEL_LAYER isl_lyr hole_lyr

                COM add_surf_strt,surf_type=feature
                COM add_surf_poly_strt,x=$gLIMITSxmin,y=$gLIMITSymin
                COM add_surf_poly_seg,x=$gLIMITSxmin,y=$gLIMITSymax
                COM add_surf_poly_seg,x=$gLIMITSxmax,y=$gLIMITSymax
                COM add_surf_poly_seg,x=$gLIMITSxmax,y=$gLIMITSymin
                COM add_surf_poly_seg,x=$gLIMITSxmin,y=$gLIMITSymin
                COM add_surf_poly_end
                COM add_surf_end,attributes=no,polarity=positive

                # ����
                AFFECT _cass_tunnel

                COM clip_area_strt
                COM clip_area_end,layers_mode=affected_layers,layer=,area=reference,area_type=rectangle,inout=inside,contour_cut=no,margin=0,ref_layer=_clip_area_ref,feat_types=line\;pad\;surface\;arc\;text
                DEL_LAYER _clip_area_ref

                foreach layer $layer_list {
                        # Cass Tunnel ����
                        COM sel_copy_other,dest=layer_name,target_layer=$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                }
                DEL_LAYER _cass_tunnel

        # ETC
        } else {
                puts "Type: $t_type not define !!!"
                foreach variable $variable_list var $value_list {
                        puts "$variable $value"
                }
                set answer [tk_messageBox -type yesno -message "Type: $t_type not define !!!\nContinue ?"]
		update
                if {$answer == "no"} {
                        exit 1
                }
        }
        # $t_att_name
        if {$t_type == "text" || $t_type == "barcode" || $t_att_name == "nickel_masking_expo"} {

        } else {
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$t_att_name
                COM filter_area_end,layer=,filter_name=popup,operation=select
                COM get_select_count
                if {$::COMANS} {
                        COM sel_break
                } else {
                        #PAUSE "Layer=$layer_list Attribute not Define !!!"
                }
        }
        COM affected_layer,name=,mode=all,affected=no
        VON
}


################################################################################
## Procedure    : pSYM_INFO
## ����         : Proc "pPOSITION_INFO" + "pADD_SYMBOL" Call
## Input        : layer worksize path position_info_path
## Return       : pADD_SYMBOL Call �Ͽ� Symbol ����

proc pSYM_INFO {path position_info_path layer_info_path} {
        puts "####### pSYM_INFO ###############################################"

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        ########################################################################

        # ���� �ϱ�
        set f [open $path r]
        set data [split [read $f] "\n"]
        close $f

        # ���� ����
        # sr_pf_o_xy
        pSR_PROFILE_OUT

        # panel_pf_o_xy
        pPANEL_PROFILE_OUT

        # panel_pf_c_xy
        pSTEP_PROFILE_CENTER $::wPANEL


        # Panel Step On
        STEP_ON $::wJOB $::wPANEL no

        # Symbol info
        foreach line $data {
                set line [split $line "\@"]
                if {! [regexp {^\#} [lindex $line 0] ]} {
                        if {[lindex $line 0] == "VN"} {
                                set variable_list [lrange $line 0 end]
                        }

                        if {[lindex $line 0] == "SY"} {
                                if {[info exists value_list]} {unset value_list}

                                foreach variable $variable_list {
                                        eval "set $variable [list [string trim [lindex $line [lsearch $variable_list $variable]]]]"

                                        if {$variable == "t_position_x"} {
                                                set id $t_position_x
                                                if {! [pPOSITION_INFO $id $::wWORK_SIZE $position_info_path]} {
                                                        set line [lreplace $line [lsearch $variable_list $variable] [lsearch $variable_list $variable] $t_x ]
                                                }

                                        } elseif {$variable == "t_position_y"} {
                                                set id $t_position_y
                                                if {! [pPOSITION_INFO $id $::wWORK_SIZE $position_info_path]} {
                                                        set line [lreplace $line [lsearch $variable_list $variable] [lsearch $variable_list $variable] $t_y]
                                                }
                                        }
                                        eval "set $variable [list [string trim [lindex $line [lsearch $variable_list $variable]]]]"
                                        lappend value_list [subst $[subst $variable]]
                                }


                                # add symbol

                                #foreach layer [subst $t_layers] {
                                        set layer [subst $t_layers]

                                        # ���� t_add_name ���ٿ��� ���ڰ� ������ �߰� �Ѵ� Ex)-win -> l2p-win
                                        foreach tmp $layer {
                                                lappend tmp_layer $tmp[subst $t_add_name]
                                        }
                                        if {[info exists tmp_layer]} {
                                                set layer $tmp_layer
                                                set tmp_layer ""
                                        }
                                        ########################################

                                        # Script ����
                                        if {$t_script == ""} {
                                                set result ok
                                        } else {
                                                set script "$t_script {set result ok} else {set result ng}"
                                                eval $script

                                                puts $script
                                        }

                                        if {$result == "ng"} {
                                                continue
                                        }

                                        #pADD_SYMBOL $layer $variable_list $value_list $sr_pf_o_xy $panel_pf_o_xy $panel_pf_c_xy
                                        foreach a $variable_list b $value_list {

                                        puts "$a $b "
                                        }
                                        pADD_SYMBOL [subst $layer] $variable_list $value_list $sr_pf_o_xy $panel_pf_o_xy $panel_pf_c_xy

                                        #puts "==$t_type=="
                                        if {$t_pause == 1} {
                                                PAUSE "STEP:$::wPANEL LAYER:$layer SYMBOL:$t_symbol ATT_NAME:$t_att_name Check!!!"
                                        }
                                #}
                        }
                }
        }
}

################################################################################
## Procedure    : pFEATURE_INFO
## ����         : ����ڰ� ������ �� Continue�� Ŭ���ϸ� Selected �� data �� ��ǥ �� ������ Excel �� ������ ���� Format�� ��ȯ ���� �ش�.
## Input        :
## Return       :

proc pFEATURE_INFO {job step} {

	# Data ����
	PAUSE "Converting Data Select !!!"

	COM get_select_count

	# ���õ� ����Ÿ�� ������ �׳� ���� ����
	if {! $::COMANS} {
		tk_messageBox -message "Select Data not Found !!!"
		update

		return
	}

	# ���� Work Layer
	COM get_work_layer
	set work_layer $::COMANS

	set sel_data_info ""
	set line_index -1
	DO_INFO1 -t layer -e $job/$step/$work_layer -m display -d FEATURES -o select ,units=mm
	foreach line $::data {
		incr line_index
		## ������ ����Ÿ Type�� Excel Format �� ��ȯ
		# Surface
		if {[lindex $line 0] == "#S"} {
			# �ؼ� ����
			if {[lindex $line 1] == "P"} {
				set polarity positive
			} else {
				set polarity negative
			}
			# �Ӽ� ����
			set att [lindex [regsub {\;} [lindex $line 2] " "] 1]
			if {[lindex [regsub {=} $att " "] 0] == ".string"} {
				set attributes yes
				set att_name [lindex [regsub {=} $att " "] 1]
			} else {
				set attributes no
				set att_name ""
			}
		}
		# Surface Hole Data �� Negative �� �ν� �������� �״�� �ν�
		if {[lindex $line 0] == "#OB"} {
			if {[lindex $line 3] == "H"} {
				set polarity negative
			}
		}

		# surface ��ǥ ����
		if {[lindex $line 0] == "#OS"} {
			lappend x_list [lindex $line 1]
			lappend y_list [lindex $line 2]
		}
		# surface ��ǥ ��
		if {[lindex $line 0] == "#OE"} {
			# Excel Format ���
			set string "; ;type @ surf ; att @ $attributes ; att_name @ $att_name ; polarity @ $polarity ; ; ; ; ; ; ; ; ; ; ; $x_list ; $y_list"
			puts $string
			lappend sel_data_info $string

			unset x_list
			unset y_list
		}
		# PAD
		### Layer - l1 features data ###
		#P 461.556565 226.3833 r1000 P 0 0 N
		#P 461.90308 235.854735 r2000 P 0 0 N;.stringadfasdfasdf
		if {[lindex $line 0] == "#P"} {
			# Symblo ����
			set symbol [lindex $line 3]

			#�ؼ� ����
			if {[lindex $line 4] == "P"} {
				set polarity positive
			} else {
				set polarity negative
			}

			# ���� ����
			set angle [lindex $line 6]

			# Mirror ����
			if {[lindex $line 7] == "N"} {
				set mirror no
			} else {
				set mirror yes
			}

			# �Ӽ� ����
			set att [lindex [regsub {\;} [lindex $line 7] " "] 1]
			if {[lindex [regsub {=} $att " "] 0] == ".string"} {
				set attributes yes
				set att_name [lindex [regsub {=} $att " "] 1]
			} else {
				set attributes no
				set att_name ""
			}

			# PAD DATA ��ǥ
			set x [lindex $line 1]
			set y [lindex $line 2]

			# Excel ���
			set string "symbol @ $symbol ; type @ pad ; att @ $attributes ; att_name @ $att_name ; polarity @ $polarity ; angle @ $angle ; mirror @ $mirror ; ; ; ; ; ; ; $x ; $y"
			puts $string
			lappend sel_data_info $string
		}
		# Line
		### Layer - l1 features data ###
		#L 464.8572 234.904 471.3264675 229.06079 r2000 P 0 ;.stringadfasdfasdf
		#L 471.3264675 229.06079 468.9891825 224.636645 r2000 P 0 ;.stringadfasdfasdf
		#L 468.9891825 224.636645 463.35466 222.424575 r2000 P 0 ;.stringadfasdfasdf

		#L 456.34281 233.8188325 455.090695 224.3862225 r2000 P 0 ;.stringadfasdfasdf
		if {[lindex $line 0] == "#L"} {
			# Symblo ����
			set symbol [lindex $line 5]

			#�ؼ� ����
			if {[lindex $line 6] == "P"} {
				set polarity positive
			} else {
				set polarity negative
			}

			# �Ӽ� ����
			set att [lindex [regsub {\;} [lindex $line 8] " "] 0]
			if {[lindex [regsub {=} $att " "] 0] == ".string"} {
				set attributes yes
				set att_name [lindex [regsub {=} $att " "] 1]
			} else {
				set attributes no
				set att_name ""
			}

			# Line DATA ��ǥ
			set xs [lindex $line 1]
			set ys [lindex $line 2]
			set xe [lindex $line 3]
			set ye [lindex $line 4]

			# Nex Line �� �̸� �о� Polyline Singleline �����Ͽ� ��ǥ Format ����
			set n_line [lindex $::data [expr $line_index +1]]
			set n_symbol  [lindex $n_line 5]
			set n_xs [lindex $n_line 1]
			set n_ys [lindex $n_line 2]
			set n_xe [lindex $n_line 3]
			set n_ye [lindex $n_line 4]

			lappend l_x_list $xs
			lappend l_y_list $ys

			if {$xe == $n_xs && $ye == $n_ys && $symbol == $n_symbol} {
				continue
			}

			lappend l_x_list $xe
			lappend l_y_list $ye

			# Excel Format ���
			set string "symbol @ $symbol ; type @ line ; att @ $attributes ; att_name @ $att_name ; polarity @ $polarity ; ; ; ; ; ; ; ; ; ; ; $l_x_list ; $l_y_list"
			puts $string
			lappend sel_data_info $string

			unset l_x_list
			unset l_y_list
		}

		# Arc
		#A -0.30478 -8.560485 -0.1532525 9.3198525 -0.000455 0.3777475 r2000 P 0 N;.stringadfasdfasdf
		#xc=13.258655,yc=11.0632325,xs=13.40853,ys=18.0327275,xe=13.257,ye=4.0921275
		if {[lindex $line 0] == "#A"} {
			# Symblo ����
			set symbol [lindex $line 7]

			#�ؼ� ����
			if {[lindex $line 8] == "P"} {
				set polarity positive
			} else {
				set polarity negative
			}

			# �Ӽ� ����
			set att [lindex [regsub {\;} [lindex $line 10] " "] 1]
			if {[lindex [regsub {=} $att " "] 0] == ".string"} {
				set attributes yes
				set att_name [lindex [regsub {=} $att " "] 1]
			} else {
				set attributes no
				set att_name ""
			}

			# Arc DATA ��ǥ
			set xc [lindex $line 1]
			set yc [lindex $line 2]
			set xs [lindex $line 3]
			set ys [lindex $line 4]
			set xe [lindex $line 5]
			set ye [lindex $line 6]

			# Excel Format ���
			set string "symbol @ $symbol ; type @ arc ; att @ $attributes ; att_name @ $att_name ; polarity @ $polarity ; ; ; ; ; ; ; ; $xc $yc $xs $ys $xe $ye"
			puts $string
			lappend sel_data_info $string
		}
		# Text 3.28083992004
		#T 488.792525 235.210635 standard P 0 N 10 12 4.92126 "ABCDEFG" 1;.nomenclature,.string=aaaa
		if {[lindex $line 0] == "#T"} {
			# Text �߰��� ������ �־ �������
			set line [regsub {\'} $line "\{"]
			set line [regsub {\'} $line "\}"]

			# text ����
			set symbol [lindex $line 10]

			#�ؼ� ����
			if {[lindex $line 4] == "P"} {
				set polarity positive
			} else {
				set polarity negative
			}

			# ���� ����
			set angle [lindex $line 5]

			# Mirror ����
			if {[lindex $line 6] == "N"} {
				set mirror no
			} else {
				set mirror yes
			}

			# �Ӽ� ����
			set att [lindex [regsub -all {\;|\,} [lindex $line 11] " "] 2]
			if {[lindex [regsub {=} $att " "] 0] == ".string"} {
				set attributes yes
				set att_name [lindex [regsub {=} $att " "] 1]
			} else {
				set attributes no
				set att_name ""
			}

			# Text DATA ��ǥ
			set x_size  [lindex $line 7]
			set y_size  [lindex $line 8]
			set l_width [format %g [format %.3f [expr [lindex $line 9] / 3.28083992004]]]

			set x [lindex $line 1]
			set y [lindex $line 2]

			# Excel Format ���
			set string "symbol @ $symbol ; type @ text ; att @ $attributes ; att_name @ $att_name ; polarity @ $polarity ; angle @ $angle ; mirror @ $mirror ; x_size @ $x_size ; y_size @ $y_size ; l_width @ $l_width ; $x ; $y"
			puts $string
			lappend sel_data_info $string
		}
	}
	puts "Proc pFEATURE_INFO Success"
}


################################################################################
## Procedure    : pALL_FEATURE_BREAK
## ����         : Panel�� �� �� �ִ� ��� Ư�� �ɺ� Break
## Input        :
## Return       :

proc pALL_FEATURE_BREAK { } {
        COM affected_layer,mode=all,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_set,filter_name=popup,update_popup=no,feat_types=line\;pad\;surface\;arc
        COM filter_area_end,layer=,filter_name=popup,operation=select
        COM get_select_count
        if {$::COMANS} {
                COM sel_break
        }
}



################################################################################
## Procedure    : pSTRUCTURE_CONVERT
## ����         : Panel ������ �ʿ��� ���� ���� ����
## Input        :
## Return       :

proc pSTRUCTURE_CONVERT {{mod 0}} {
        if {$mod} {puts "##################################################################################################################"}
        if {$mod} {puts "# pSTRUCTURE_CONVERT Start #######################################################################################"}

        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$drill_info_file_name not found!!!"
                return
        }


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$trim_info_file_name not found!!!"
                return
        }

        #########################################################################################################################
        # Drill Layer Define ####################################################################################################
        if {$mod} {puts "# Drill Layer Define #############################################################################################"}

        ## ����� Drill Info
        # d01    01 08 3 cf both 100.000 100.000 top m
        # d0207s 02 07 2 cf btm 100.000 100.000 top m
        # c0102c 01 02 3 cf top 100.000 100.000 top c
        # c0807c 08 07 3 cf btm 100.000 100.000 btm c

        ##����ϰ��� �ϴ� ���� ��
        # set m_2_top d0207
        # m_1_top, m_1_btm, c_1_top, c_1_btm, y_1_top, y_1_btm

        # Drill �⺻ ���� ����
        # m=mech, mp=pet laser, c=co2, y=uv, p=plug, inplug2=����2ȸ Plug Drill,  cu=cuopen, cap=cap, back=back drill, depth=depth drill,
        # xray=xray, cd=co2_direct, am=�ĵ帱, g=Guide Drill, backsub=back sub, depthsub=depth sub, backxray=back xray, depthxray=depth xray
        # gc=coin guide drill, step=step drill
        for {set no 1} {$no < 20} {incr no} {
                foreach name "m mp c y p inplug2 cu cap back depth xray cd am g backsub depthsub backxray depthxray gc step" {
                        # ���� 2ȸ Plugging �� = p_1_top_1, p_1_top_2
                        # 535x740 ���� �帱 = m_1_top_f (0��) , m_1_top_r (180�� ȸ��)
                        set cmd "
                                lappend ${name}_${no}_top
                                lappend ${name}_${no}_top_div_t
                                lappend ${name}_${no}_top_div_b
                                lappend ${name}_${no}_top_div_xt
                                lappend ${name}_${no}_top_div_xb
                                lappend ${name}_${no}_top_1
                                lappend ${name}_${no}_top_2
                                lappend ${name}_${no}_top_div_f
                                lappend ${name}_${no}_top_div_r
                                lappend ${name}_${no}_btm
                                lappend ${name}_${no}_btm_div_t
                                lappend ${name}_${no}_btm_div_b
                                lappend ${name}_${no}_btm_div_xt
                                lappend ${name}_${no}_btm_div_xb
                                lappend ${name}_${no}_btm_1
                                lappend ${name}_${no}_btm_2
                                lappend ${name}_${no}_btm_div_f
                                lappend ${name}_${no}_btm_div_r
                                lappend flip_${name}_${no}
                                lappend cnc_coupon_df_list_${no}
                        "

                        # ���� Level�� ���� ����
                        uplevel 1 $cmd
                }
        }

        # Drill ���ǵ� ���� ���� + ���� PLUG(ana) ����
        # d01    01 08 2 cf top 100.000 100.000 top m  200 no
        # d01-np 01 08 2 cf top 100.000 100.000 top am 200 no
        # d0207s 02 07 2 cf btm 100.000 100.000 top m  200 no
        # d0207g 02 07 2 cf btm 100.000 100.000 top g      no
        # c0102p 01 02 2 cf top 100.000 100.000 top c
        foreach line $drill_info {
                if {$line == ""} {continue}

                set cmd "lappend [lindex $line 9]_[lindex $line 3]_[lindex $line 8] [lindex $line 0]"

                # ���� Level �� ��������
                uplevel 1 $cmd

                if {$mod} {puts $cmd}

                # Flip ��/�� ����
                set cmd "lappend flip_[lindex $line 9]_[lindex $line 3] [lindex $line 11]"

                # ���� Level �� ��������
                uplevel 1 $cmd

                if {$mod} {puts $cmd}


                # ���� Plug Layer ����
                # ����: CNC Drill �� ������ ���� ���������� ana Layer�� �˻��Ͽ� ���� �ϸ� ���� ���� ������ ������ ���� ���� ����
                if {[lindex $line 9] == "m"} {
                        if {[lindex $line 3] < $::wEND_ORDER} {
                                set layer ana[string range [lindex [regsub {\-} [lindex $line 0] " "] 0] 1 end-1]

                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                                if {$gEXISTS == "yes"} {

                                        set cmd "lappend p_[lindex $line 3]_[lindex $line 8] $layer"

                                        # ���� Level�� ���� ����
                                        uplevel 1 $cmd

                                        if {$mod} {puts $cmd}
                                }

                                ## ���� Plug 2ȸ ���� 1�� ���� - (2020.02.27) ########################################
                                set layer ana[string range [lindex [regsub {\-} [lindex $line 0] " "] 0] 1 end-1]-1

                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                                if {$gEXISTS == "yes"} {

                                        set cmd "lappend p_[lindex $line 3]_[lindex $line 8]_1 $layer"

                                        # ���� Level�� ���� ����
                                        uplevel 1 $cmd

                                        if {$mod} {puts $cmd}
                                }
                                ## ���� Plug 2ȸ ���� 2�� ���� - (2020.02.27) ########################################
                                set layer ana[string range [lindex [regsub {\-} [lindex $line 0] " "] 0] 1 end-1]-2

                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                                if {$gEXISTS == "yes"} {

                                        set cmd "lappend p_[lindex $line 3]_[lindex $line 8]_2 $layer"

                                        # ���� Level�� ���� ����
                                        uplevel 1 $cmd

                                        if {$mod} {puts $cmd}


                                        ## ���� Plug Drill Layer Define - (2020.02.27) ###############################

                                        set cmd "lappend inplug2_[lindex $line 3]_[lindex $line 8] [lindex $line 0]"

                                        # ���� Level�� ���� ����
                                        uplevel 1 $cmd

                                        if {$mod} {puts $cmd}

                                }
                                #####################################################################################


                                ################################################
                                # CNC ALIGN Coupon DF List
                                # BVH ��ǰ �������� ������ ������ �޶� ���� ���� �ؾ���
                                set drill [lindex $line 0]
                                set org_start [lindex $line 1]
                                set org_end [lindex $line 2]
                                set dtm [lindex $line 10]

                                if {$dtm == ""} {continue}

                                set resize [expr ($dtm - 200)*2.0]
                                if {$org_start > $org_end} {
                                        set start [scan $org_end %d]
                                        set end [scan $org_start %d]
                                } else {
                                        set start [scan $org_start %d]
                                        set end [scan $org_end %d]
                                }

                		DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$drill -d EXISTS
                            	if { $gEXISTS == "no" } {
                            	        PAUSE "ERROR proc pCOUPON_SIZE_CHANGE : $drill Layer not found !!!"
                            	        exit 1
                                }

                                set df_layer_list ""

                                for {set no $start} {$no <= $end} {incr no} {
                                        if {$::wNO_OF_LAYER < 100} {
                                                if {$no < 10} {
                                                        lappend df_layer_list l0$no
                                                } else {
                                                        lappend df_layer_list l$no
                                                }
                                        } else {
                                                if {$no < 10} {
                                                        lappend df_layer_list l00$no
                                                } else {
                                                        if {$no < 100} {
                                                                lappend df_layer_list l0$no
                                                        } else {
                                                                lappend df_layer_list l$no
                                                        }
                                                }
                                        }
                                }

                                set cmd "lappend cnc_coupon_df_list_[lindex $line 3] $df_layer_list"

                                # ���� Level�� ���� ����
                                uplevel 1 $cmd

                                if {$mod} {puts $cmd}
                                ################################################
                        }
                }

                # PET Layer ����
                # d01    01 08 2 cf top 100.000 100.000 top m  200 no
                # c0102p 01 02 2 cf top 100.000 100.000 top c
                if {[lindex $line 9] == "mp"} {

                        set layer [lindex $line 0]
                        set direct [lindex $line 8]

                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                        if {$gEXISTS == "yes"} {

                                set cmd "lappend mp_[lindex $line 3]_$direct $layer"

                                # ���� Level�� ���� ����
                                uplevel 1 $cmd

                                if {$mod} {puts $cmd}
                        }
                }

                # Direct Laser ���� - 2018.08.02 KMC
                # d01    01 08 2 cf top 100.000 100.000 top m  200 no
                # c0102d 01 02 2 cf top 100.000 100.000 top cd
                if {[lindex $line 9] == "cd"} {
                        if {[scan [lindex $line 1] %d] < [scan [lindex $line 2] %d]} {
                                set first_layer [lindex $line 1]
                                set second_layer [lindex $line 2]
                        } elseif {[scan [lindex $line 1] %d] > [scan [lindex $line 2] %d]} {
                                set first_layer [lindex $line 1]
                                set second_layer [lindex $line 2]
                        }

                        set layer c${first_layer}${second_layer}d
                        set direct [lindex $line 8]

                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                        if {$gEXISTS == "yes"} {

                                set cmd "lappend cd_[lindex $line 3]_$direct $layer"

                                # ���� Level�� ���� ����
                                uplevel 1 $cmd

                                if {$mod} {puts $cmd}
                        }
                }

                # CU Open Layer ����
                # c0807c 08 07 3 cf btm 100.000 100.000 btm c
                if {[lindex $line 9] == "c"} {
                        # Co2 Layer Name �ǵڿ� c �� ���� �Ǿ� ������� Cu Open Layer ����
                        # c0102l --> c0102w �� ���� : large -> window = ���� "1" �� ���� "l" ȥ�� ���ɼ� 2018.05.09 ���ö ����
                        # [string index [lindex [regsub {\-} [lindex $line 0] " "] 0] end] == "c" || [string index [lindex [regsub {\-} [lindex $line 0] " "] 0] end] == "l"
                        if {[string index [lindex [regsub {\-} [lindex $line 0] " "] 0] end] == "c" || [string index [lindex [regsub {\-} [lindex $line 0] " "] 0] end] == "w"} {
                                # CO2 Layer �� Cu Open Layer�� ġȯ
                                set layer cu[string range [lindex [regsub {\-} [lindex $line 0] " "] 0] 1 end-1]

                                set cmd "lappend cu_[lindex $line 3]_[lindex $line 8] $layer"

                                # ���� Level�� ���� ����
                                uplevel 1 $cmd

                                if {$mod} {puts $cmd}
                        }
                }

        }

        # Back, Depth, X-Ray drill ���� �� Main, Cap, �ĵ帱 ���� 2���� ����
        DO_INFO -t step -e $::wJOB/$::wSR_STEP -d LAYERS_LIST
        foreach layer $gLAYERS_LIST {

                # Back Drill ���� - 2���� Top
                if {[regexp {^d} $layer] && [regexp {[0-9]b-t$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_top_div_t $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_btm_div_t $layer"
                        } else {
                                set cmd "lappend back_not_define_div_t $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Back Drill ���� - 2���� Top (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]b-f$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_top_div_f $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_btm_div_f $layer"
                        } else {
                                set cmd "lappend back_not_define_div_f $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Back Drill ���� - 2���� Top (Schmoll)
                if {[regexp {^d} $layer] && [regexp {[0-9]b-xt$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend backxray_${::wEND_ORDER}_top_div_xt $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend backxray_${::wEND_ORDER}_btm_div_xt $layer"
                        } else {
                                set cmd "lappend backxray_not_define_div_xt $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Back Drill ���� - 2���� Btm
                if {[regexp {^d} $layer] && [regexp {[0-9]b-b$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_top_div_b $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_btm_div_b $layer"
                        } else {
                                set cmd "lappend back_not_define_div_b $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Back Drill ���� - 2���� Btm (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]b-r$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_top_div_r $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend back_${::wEND_ORDER}_btm_div_r $layer"
                        } else {
                                set cmd "lappend back_not_define_div_r $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # X-Ray Back Drill ���� - 2���� Btm (Schmoll)
                if {[regexp {^d} $layer] && [regexp {[0-9]b-xb$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend backxray_${::wEND_ORDER}_top_div_xb $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend backxray_${::wEND_ORDER}_btm_div_xb $layer"
                        } else {
                                set cmd "lappend backxray_not_define_div_xb $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Depth Drill ���� - 2���� Top
                if {[regexp {^d} $layer] && [regexp {[0-9]d-t$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_top_div_t $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_btm_div_t $layer"
                        } else {
                                set cmd "lappend depth_not_define_div_t $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Depth Drill ���� - 2���� Top (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]d-f$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_top_div_f $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_btm_div_f $layer"
                        } else {
                                set cmd "lappend depth_not_define_div_f $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Depth Drill ���� - 2���� Top (Schmoll)
                if {[regexp {^d} $layer] && [regexp {[0-9]d-xt$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend depthxray_${::wEND_ORDER}_top_div_xt $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend depthxray_${::wEND_ORDER}_btm_div_xt $layer"
                        } else {
                                set cmd "lappend depthxray_not_define_div_xt $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Depth Drill ���� - 2���� Btm
                if {[regexp {^d} $layer] && [regexp {[0-9]d-b$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_top_div_b $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_btm_div_b $layer"
                        } else {
                                set cmd "lappend depth_not_define_div_b $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Depth Drill ���� - 2���� Btm (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]d-r$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_top_div_r $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend depth_${::wEND_ORDER}_btm_div_r $layer"
                        } else {
                                set cmd "lappend depth_not_define_div_r $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Depth Drill ���� - 2���� Btm (Schmoll)
                if {[regexp {^d} $layer] && [regexp {[0-9]d-xb$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend depthxray_${::wEND_ORDER}_top_div_xb $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend depthxray_${::wEND_ORDER}_btm_div_xb $layer"
                        } else {
                                set cmd "lappend depthxray_not_define_div_xb $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Main Drill ���� - 2���� Top
                if {[regexp {^d} $layer] && [regexp {[0-9]-t$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_top_div_t $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_btm_div_t $layer"
                        } else {
                                set cmd "lappend m_not_define_div_t $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Main Drill ���� - 2���� Forward (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]-f$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_top_div_f $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_btm_div_f $layer"
                        } else {
                                set cmd "lappend m_not_define_div_f $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Main Drill ���� - 2���� Btm
                if {[regexp {^d} $layer] && [regexp {[0-9]-b$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_top_div_b $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_btm_div_b $layer"
                        } else {
                                set cmd "lappend m_not_define_div_b $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Main Drill ���� - 2���� Reverse (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]-r$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_top_div_r $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend m_${::wEND_ORDER}_btm_div_r $layer"
                        } else {
                                set cmd "lappend m_not_define_div_r $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Cap Drill ���� - 2���� Top
                if {[regexp {^d} $layer] && [regexp {[0-9]c-t$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_top_div_t $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_btm_div_t $layer"
                        } else {
                                set cmd "lappend cap_not_define_div_t $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Cap Drill ���� - 2���� Forward (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]c-f$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_top_div_f $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_btm_div_f $layer"
                        } else {
                                set cmd "lappend cap_not_define_div_f $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Cap Drill ���� - 2���� Btm
                if {[regexp {^d} $layer] && [regexp {[0-9]c-b$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_top_div_b $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_btm_div_b $layer"
                        } else {
                                set cmd "lappend cap_not_define_div_b $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # Cap Drill ���� - 2���� Reverse (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]c-r$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_top_div_r $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend cap_${::wEND_ORDER}_btm_div_r $layer"
                        } else {
                                set cmd "lappend cap_not_define_div_r $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # AM Drill ���� - 2���� Top
                if {[regexp {^d} $layer] && [regexp {[0-9]-np-t$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_top_div_t $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_btm_div_t $layer"
                        } else {
                                set cmd "lappend am_not_define_div_t $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # AM Drill ���� - 2���� Forward (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]-np-f$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_top_div_f $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_btm_div_f $layer"
                        } else {
                                set cmd "lappend am_not_define_div_f $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # AM Drill ���� - 2���� Btm
                if {[regexp {^d} $layer] && [regexp {[0-9]-np-b$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_top_div_b $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_btm_div_b $layer"
                        } else {
                                set cmd "lappend am_not_define_div_b $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                # AM Drill ���� - 2���� Reverse (535x740)
                if {[regexp {^d} $layer] && [regexp {[0-9]-np-r$} $layer]} {
                        if {[regexp {^d01|^d001} $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_top_div_r $layer"
                        } elseif {[regexp [subst $::wEND_LAYER_NO] $layer]} {
                                set cmd "lappend am_${::wEND_ORDER}_btm_div_r $layer"
                        } else {
                                set cmd "lappend am_not_define_div_r $layer"
                        }
                        # ���� Level�� ���� ����
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

        }


        # Back, Depth, X-Ray drill ���� �� Main, Cap ���� 2���� ����
#        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
#        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
#                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
#                if {$context != "board" || ![regexp {drill} $layer_type] } {continue}
#
#                PAUSE $name
#                # 2���� Top ����
#                if {[regexp {\-t$} $name]} {
#                        PAUSE ==$name==
#                        foreach line $drill_info {
#                                if {$line == ""} {continue}
#                                if {$line == [regsub -all {\-t$} $name ""]} {
#                                        set drl_order [lindex $line 3]
#                                        set drl_type [lindex $line 9]
#                                        PAUSE "$drl_order == $drl_type"
#                                        if {[lindex $line 8] == "top"} {
#                                                set cmd "lappend ${drl_type}_${drl_order}_top_div_t $layer"
#                                        } elseif {[lindex $line 8] == "btm"} {
#                                                set cmd "lappend ${drl_type}_${drl_order}_btm_div_t $layer"
#                                        } else {
#                                                PAUSE "ALARM : DRILL TYPE MISS"
#                                                return
#                                        }
#                                }
#                        }
#                } elseif {[regexp {\-b$} $name]} {
#                        PAUSE ==$name==
#                        foreach line $drill_info {
#                                if {$line == ""} {continue}
#                                if {$line == [regsub -all {\-b$} $name ""]} {
#                                        set drl_order [lindex $line 3]
#                                        set drl_type [lindex $line 9]
#                                        PAUSE "$drl_order == $drl_type"
#                                        if {[lindex $line 8] == "top"} {
#                                                set cmd "lappend ${drl_type}_${drl_order}_top_div_b $layer"
#                                        } elseif {[lindex $line 8] == "btm"} {
#                                                set cmd "lappend ${drl_type}_${drl_order}_btm_div_b $layer"
#                                        } else {
#                                                PAUSE "ALARM : DRILL TYPE MISS"
#                                                return
#                                        }
#                                }
#                        }
#                }
#       }




        #########################################################################################################################
        # DF Layer Define #######################################################################################################
        if {$mod} {puts "# DF Layer Define ################################################################################################"}

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        ##����ϰ��� �ϴ� ���� ��
        # set df_3_no l01
        # df_1_no df_1_yes    ## no = top, yes = bottom

        # DF �⺻ ���� ����
        for {set no 1} {$no < 20} {incr no} {

                set cmd "
                        lappend df_${no}_no
                        lappend df_${no}_yes
                        lappend cp_${no}_no
                        lappend cp_${no}_yes
                        lappend df_${no}_process
                "

                # ���� Level�� ���� ����
                uplevel 1 $cmd

        }

        # DF ���ǵ� ���� ����
        foreach line $layer_info {
                if {$line == ""} {continue}

                set cmd "lappend df_[lindex $line 3]_[lindex $line 2] [lindex $line 0]"

                # ���� Level �� ��������
                uplevel 1 $cmd

                if {$mod} {puts $cmd}
        }

        # DF ���� ���� nega=TENTING, posi=PATTERN
        foreach line $layer_info {
                if {$line == ""} {continue}

                set cmd "set df_[lindex $line 3]_process [lindex $line 1]"

                # ���� Level �� ��������
                uplevel 1 $cmd

                if {$mod} {puts $cmd}
        }

        # CP Layer ���� �� Panel ������ ���� �Ǿ� �־����
        DO_INFO -t step -e $::wJOB/$::wSR_STEP -d LAYERS_LIST

        foreach layer $gLAYERS_LIST {
                if {[regexp {^cp[0-9]+\-[0-9]$} $layer]} {
                        set order [string index $layer end]

                        set layer_no [string range [lindex [regsub {\-} $layer " "] 0] 2 end]

                        foreach tmp $layer_info {
                                if {[string range [lindex $tmp 0] 1 end] == $layer_no} {
                                        set mirror [lindex $tmp 2]
                                        break
                                }
                        }

                        set cmd "lappend  cp_${order}_$mirror $layer"

                        # ���� Level �� ��������
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }
        }


        #########################################################################################################################
        # Trim Define ###########################################################################################################
        if {$mod} {puts "# Trim Define ####################################################################################################"}

        ## ����� Trim Info
        #1 5 5 402 505 bonding+pin
        #2 5 5 397 500 bonding+pin

        # Trim �⺻ ���� ����
        for {set no 1} {$no < 20} {incr no} {

                set cmd "
                        lappend trim_size_${no}_x
                        lappend trim_size_${no}_y

                        lappend trim_${no}_x
                        lappend trim_${no}_y

                        lappend layup_${no}

                        lappend pin_df_order_${no}
                "

                # ���� Level�� ���� ����
                uplevel 1 $cmd
        }



        # Trim

        # worksize ����
        set work_size_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_size_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        set cmd "
set work_size_x $work_size_x
set work_size_y $work_size_y
        "
        # ���� Level�� ���� ����
        uplevel 1 $cmd
        if {$mod} {puts $cmd}


        # 2L�� ���
        set final_trim_x         0
        set final_trim_y         0

        # Trim �� ���� ������ ����
        set final_trim_size_x $work_size_x
        set final_trim_size_y $work_size_y

        set pin_order 0

        foreach line $trim_info {
                if {$line == ""} {continue}
                #510x610
                #1 5 5 505 605 pin+guide
                #2 5 5 500 600 build
                #trim_size_1_x = 505-5 
                #trim_size_1_y = 605-5
                set trim_size_[lindex $line 0]_x [expr $final_trim_size_x - [lindex $line 1]]
                set trim_size_[lindex $line 0]_y [expr $final_trim_size_y - [lindex $line 2]]

                #trim_1_x = 0+5 
                #trim_1_y = 0+5
                set trim_[lindex $line 0]_x [expr $final_trim_x + [lindex $line 1]]
                set trim_[lindex $line 0]_y [expr $final_trim_y + [lindex $line 2]]

                #final_trim_size_x = $trim_size_1_x
                #final_trim_size_y = $trim_size_1_y
                set final_trim_size_x [subst $[subst trim_size_[lindex $line 0]_x]]
                set final_trim_size_y [subst $[subst trim_size_[lindex $line 0]_y]]

                #final_trim_x = 0+5 
                #final_trim_y = 0+5
                set final_trim_x [expr $final_trim_x + [lindex $line 1]]
                set final_trim_y [expr $final_trim_y + [lindex $line 2]]

                # Pin�� ������ ��Ī �Ǵ� DF ���� ����
                if {[regexp {pin} [lindex $line 5]]} {
                        incr pin_order

                        set cmd "
                        set pin_df_order_${pin_order} [lindex $line 0]
                        "

                        # ���� Level ���� ���� ����
                        uplevel 0 $cmd

                        # ���� Level ���� ��������
                        uplevel 1 $cmd

                        if {$mod} {puts $cmd}
                }

                set cmd "
                set layup_[lindex $line 0] [lindex $line 5]

                set trim_size_[lindex $line 0]_x [subst $[subst trim_size_[lindex $line 0]_x]]
                set trim_size_[lindex $line 0]_y [subst $[subst trim_size_[lindex $line 0]_y]]

                set trim_[lindex $line 0]_x [subst $[subst trim_[lindex $line 0]_x]]
                set trim_[lindex $line 0]_y [subst $[subst trim_[lindex $line 0]_y]]
                "

                # ���� Level ���� ���� ����
                uplevel 0 $cmd

                # ���� Level ���� ��������
                uplevel 1 $cmd

                if {$mod} {puts $cmd}
        }

        set cmd "
set trim_size_0_x $work_size_x
set trim_size_0_y $work_size_y

set trim_0_x 0
set trim_0_y 0

set trim_size_99_x $final_trim_size_x
set trim_size_99_y $final_trim_size_y

set trim_99_x $final_trim_x
set trim_99_y $final_trim_y

set active_area_x [expr $final_trim_x/2.0 + $::wTRIM_TO_ACTIVE_X]
set active_area_y [expr $final_trim_y/2.0 + $::wTRIM_TO_ACTIVE_Y]
        "

        # ���� Level ���� ���� ����
        uplevel 0 $cmd

        # ���� Level ���� ��������
        uplevel 1 $cmd

        if {$mod} {puts $cmd}

        # Pin�� ������ ��Ī �Ǵ� DF ���� ����
        # Pin���� 1�� �ΰ�쵵 D/F ������ 3���� ���� �� �� ���� ����: 12���� Bonding �ϰ��

        #PAUSE "CKECH : pSTRUCTURE_CONVERT Define !!!"

}


################################################################################
## Procedure    : pSAP_INTERFACE
## ����         : Area Check File Up-load for SAP Interface
## Input        :
## Return       :

proc pSAP_INTERFACE { } {

        puts "############ pSAP_INTERFACE START !!! ############"
        puts "############ pSAP_INTERFACE START !!! ############"
        puts "############ pSAP_INTERFACE START !!! ############"


        set answer [tk_messageBox -type yesno -message "UPLOAD SAP Interface ?"]
        if {$answer == "no"} { return }

        # NEW MES FTP - by KMC
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        if { $::wSITE == 1 || $::wSITE == 2} {
                set ip 192.168.6.244
                set id CAM_root
                set pw daeduck151root
        } elseif { $::wSITE == 3} {
                #set ip 10.200.1.141
                set ip 192.168.6.244
                set id CAM_root
                set pw daeduck151root
        }

        #set out_path /CAM_TEST/UPLOAD/ETC
        set out_path /CAM/UPLOAD/ETC
        if {$::wINCAM == 1} {
                set local_path $::env(JOB_USER_DIR)
        } else {
                set local_path $::gGENESIS_JOB_DB_PATH/user
        }
        set output_list $::wJOB.etc
        #exec gedit $local_path/$output_list
        #after 1000

        #  Regular Tool Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        if { $::wSITE == 1} {
            if { [regexp {^m[a-z]{2}[0-9]{5}\-[0-9]{2}$} $::wJOB ]} {
                # NEW MES FTP - by KMC
                pFTP_INTERFACE $ip $id $pw $out_path $local_path $output_list

            } else {
                tk_messageBox -message "SAP Interface FAIL - It is not Regular Tool Name !"
                return
            }

            tk_messageBox -message "ETC SAP Interface Upload Success !!!"

        } elseif {$::wSITE == 3} {
            if {[regexp {^c[a-z]{2}[0-9]{5}\-[0-9]{2}$} $::wJOB] || [regexp {^[0-9]{5}[a-z]{1}$} $::wJOB]} {
                # NEW MES FTP - by KMC
                pFTP_INTERFACE $ip $id $pw $out_path $local_path $output_list

            } else {
                tk_messageBox -message "SAP Interface FAIL - It is not Regular Tool Name !"
                return
            }

            tk_messageBox -message "ETC SAP Interface Upload Success !!!"
        }

        puts "############ pSAP_INTERFACE END !!! ############"
        puts "############ pSAP_INTERFACE END !!! ############"
        puts "############ pSAP_INTERFACE END !!! ############"
}


################################################################################
## Procedure    : pFTP_INTERFACE
## ����         : FTP Server File Up-load
## Input        : ip id pw out_path local_path output_list
## Return       :

proc pFTP_INTERFACE {ip id pw out_path local_path output_list} {

        puts "############ pFTP_INTERFACE START !!! ############"
        puts "############ pFTP_INTERFACE START !!! ############"
        puts "############ pFTP_INTERFACE START !!! ############"


        if [catch {
            cd $local_path

            package require ftp

            set FtpID [ftp::Open $ip $id $pw -port 8080 -timeout 20]

            if {$FtpID == -1} {
                tk_messageBox -message "FTP Check !!!\nFTP Connecting Error $ip"
                return 1
            }
            puts "$ip : ftp Connecting Success"


            if {! [ftp::Cd $FtpID $out_path]} {
                tk_messageBox -message "$ip : ftp CD Error $out_path"
                return 1
            }
            puts "$ip : ftp CD Success $out_path"

            foreach FileName $output_list {
                if {! [ftp::Put $FtpID $FileName]} {
                    tk_messageBox -message "ftp Put Error $FileName"
                    return 1
                }
                puts "$ip : ftp Put Success $FileName"
            }

            ftp::Close $FtpID
        } Error] {
            global errorInfo
            tk_messageBox -message "$Error $errorInfo"
            return 1
        }

        return 0


        puts "############ pFTP_INTERFACE END !!! ############"
        puts "############ pFTP_INTERFACE END !!! ############"
        puts "############ pFTP_INTERFACE END !!! ############"
}


################################################################################
## Procedure    : pDUMMY_CREATE
## ����         :
## Input        :
## Return       :
##

proc pDUMMY_CREATE {layer_info_path} {
        # puts "####### pDUMMY_CREATE ###########################################"
        # PAUSE pDUMMY_CREATE_start
        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pDUMMY_CREATE) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        STEP_ON $::wJOB $::wPANEL no

        DO_INFO -t step -e $::wJOB/$::wPANEL -d LAYERS_LIST
        foreach layer $gLAYERS_LIST {
                AFFECT $layer
                COM fill_params,type=solid,origin_type=datum,solid_type=surface

                DO_INFO -t step -e $::wJOB/$::wPANEL -d SR_LIMITS , units=mm

                # ���� 1/2�� ���� �ɰ�� top ���� 1�� CP���̾�� ���� 2�� ���� �� ����
                #                        btm ���� 1�� ������ ���� 1�� cp���̾�� ����

                # ���� + top 2�� + btm 1��
                if {[lsearch $out_all $layer] != -1 || [lsearch $out_c_2 $layer] != -1 || [lsearch $out_s_1 $layer] != -1} {

                        # Gap 2.2mm �ʰ��� ��� 0.75mm Cut(����), Gap 2.2mm ������ ��� 1.1mm Cut(�߰�) (2019.01.07 Dummy Cut ���� ������Ʈ)
                        if {$::wARRAY_DX <= 2.2 || $::wARRAY_DY <= 2.2} {
                                set sr_margin_x 1.1
                                set sr_margin_y 1.1
                        } else {
                                set sr_margin_x 0.75
                                set sr_margin_y 0.75
                        }

                        if {[regexp {H_GOLD} $::wFINISH_TYPE]} {
                                if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                                        set step_margin_x [expr $trim_99_x / 2.0 + 15]
                                        set step_margin_y [expr $trim_99_y / 2.0 + 15]
                                } else {
                                        set step_margin_x [expr $trim_99_x / 2.0 + 5]
                                        set step_margin_y [expr $trim_99_y / 2.0 + 5]
                                }
                        } else {
                                set step_margin_x 0
                                set step_margin_y 0
                        }

                        # 20193 ��ü & ENEPIG �� ��� Dummy ���� ����
                        # PSR - SCREEN ����� ��� ���� Dummy ���� ���� - 2019.02.11 �����Ͼ� ���� (����ö, �Ѻ���, �ֿ뼮)
                        # 20193 ��ü & ENEPIG �� ��� Dummy ���� ���� ���� - 2020.07.08 ������
                        if {$::wPSR == "SCREEN"} {
                                if {[regexp {H_GOLD} $::wFINISH_TYPE] == 1} {
                                        set answer [tk_messageBox -type yesno -message "WARRING : $layer layer \n\nHard Gold Clamp Need to \nPlating Line Connection !!! \n\nContinue ???"]
                                        if {$answer == "no"} {
                                                exit 1
                                        }
                                }
                        } else {
                                # PAUSE PSR_DUMMY_START
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                                # Nest_sr ���� (yes -> no) - 20200903
                                # PAUSE PSR_DUMMY_START2
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                
                                # PAUSE PSR_DUMMY_START3
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface
                                # PAUSE PSR_DUMMY_END
                        }

                }

                # CP + top 1�� + btm 2��
                if {[lsearch $cp_all $layer] != -1 || [lsearch $out_c_1 $layer] != -1 || [lsearch $out_s_2 $layer] != -1} {
                        set step_margin_x 0
                        set step_margin_y 0

                        set step_max_dist_x 2540
                        set step_max_dist_y 2540

                        if {[lsearch $cp_all $layer] != -1} {
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                                # CP Layer �� Fill ó�� - 2018.05.10 ���ö ���� ��û
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=0,sr_margin_y=0,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=-2540,sr_margin_y=-2540,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface
                        } else {
                                # 20193 ��ü & ENEPIG �� ��� Dummy ���� ����
                                # PSR - SCREEN ����� ��� ���� Dummy ���� ���� - 2019.02.11 �����Ͼ� ���� (����ö, �Ѻ���, �ֿ뼮)
                                # 20193 ��ü & ENEPIG �� ��� Dummy ���� ���� ���� - 2020.07.08 ������
                                if {$::wPSR == "SCREEN"} {
                                        if {[regexp {H_GOLD} $::wFINISH_TYPE] == 1} {
                                                set answer [tk_messageBox -type yesno -message "WARRING : $layer layer \n\nHard Gold Clamp Need to \nPlating Line Connection !!! \n\nContinue ???"]
                                                if {$answer == "no"} {
                                                        exit 1
                                                }
                                        }
                                } else {
                                        COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                                        # CP Layer �� Fill ó�� - 2018.05.10 ���ö ���� ��û
                                        #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=0,sr_margin_y=0,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=-2540,sr_margin_y=-2540,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                        COM fill_params,type=solid,origin_type=datum,solid_type=surface
                                }
                        }
                }


                # ����
                if {[lsearch $in_all $layer] != -1} {
                        # Gap 2.2mm �ʰ��� ��� 0.75mm Cut(����), Gap 2.2mm ������ ��� 1.1mm Cut(�߰�) (2019.01.07 Dummy Cut ���� ������Ʈ)
                        if {$::wARRAY_DX <= 2.2 || $::wARRAY_DY <= 2.2} {
                                set sr_margin_x 1.1
                                set sr_margin_y 1.1
                        } else {
                                set sr_margin_x 0.75
                                set sr_margin_y 0.75
                        }

                        set step_margin_x 0
                        set step_margin_y 0

                        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
                        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

                        set cut_prims no

                        ## ����� Layer Info
                        #l01 nega no 3 0.05over cf 100.000 100.000
                        #l02 nega no 2 0.05below ccl 100.000 100.000
                        #l03 nega yes 1 0.05below ccl 100.000 100.000
                        #l04 nega no 1 0.05over ccl 100.000 100.000
                        #l05 nega yes 1 0.05over ccl 100.000 100.000
                        #l06 nega no 1 0.05over ccl 100.000 100.000
                        #l07 nega yes 2 0.05over cf 100.000 100.000
                        #l08 nega yes 3 0.05over cf 100.000 100.000

                        # layer_index ���� lsearch -index �ɼ��� 8.4������ ����
                        set no 0
                        foreach line $layer_info {
                                if {[lindex $line 0] == $layer} {
                                        set layer_index $no
                                }
                                incr no
                        }

                        if {$layer_index != -1} {
                                set ccl_thick [lindex $layer_info $layer_index 4]
                                set mirror [lindex $layer_info $layer_index 2]
                        } else {
                                PAUSE "ERROR : proc pDUMMY_CREATE YK or MC Call !!!"
                                exit 1
                        }
                        if {$ccl_thick == "0.05below" || $ccl_thick == "full_tunnel"} {
                                set cut_prims yes

                                if {$mirror == "no"} {
                                        set d_symbol dd.pnl.mlb_dummy_in_50t_t_${dx}x$dy
                                } else {
                                        set d_symbol dd.pnl.mlb_dummy_in_50t_b_${dx}x$dy
                                }
                                COM fill_params,type=pattern,origin_type=datum,solid_type=surface,std_type=line,min_brush=25.4,use_arcs=yes,symbol=$d_symbol,dx=$dx,dy=$dy,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=$cut_prims,outline_draw=no,outline_width=0,outline_invert=no
                                # Nest_sr ���� (yes -> no) - 20200903
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface

                        } elseif {$ccl_thick == "0.05over" || $ccl_thick == "mesh"} {
                                if {$mirror == "no"} {
                                        set d_symbol dd.pnl.mlb_dummy_in_t_${dx}x$dy
                                } else {
                                        set d_symbol dd.pnl.mlb_dummy_in_b_${dx}x$dy
                                }
                                # cut_prims=no �� ������ �ð� ���� �߻� �� PAD ������ ������ ��� ���� �ʿ�
                                COM fill_params,type=pattern,origin_type=datum,solid_type=surface,std_type=line,min_brush=25.4,use_arcs=yes,symbol=$d_symbol,dx=$dx,dy=$dy,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=$cut_prims,outline_draw=no,outline_width=0,outline_invert=no
                                # Nest_sr ���� (yes -> no) - 20200903
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface

                        } elseif {$ccl_thick == "full"} {
                                # ������ ����
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                                # Nest_sr ���� (yes -> no) - 20200903
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface
                        }

                }

                # SCREEN ����
                if {[lsearch $screen_all $layer] != -1} {
                        set step_margin_x -10
                        set step_margin_y -10

                        if {$::wPSR != "SCREEN" } {

                                # 2020.04.08 Spray Type Design Rule ���� = Trim Edge + X : 12mm, Trim Edge + Y : 5mm
                                #set step_max_dist_x [expr $trim_99_x/2.0 + 1]
                                #set step_max_dist_y [expr $trim_99_y/2.0 + 1]

                                set step_max_dist_x [expr $trim_99_x/2.0 + 12]
                                set step_max_dist_y [expr $trim_99_y/2.0 + 5]

                                #set sr_margin_x 0
                                #set sr_margin_y 0
                                set sr_margin_x 2.0
                                set sr_margin_y 2.0



                                COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                                # Nest_sr ���� (yes -> no) - 20200903
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface

                        } elseif {$::wPSR == "SCREEN" } {

                                set step_max_dist_x 2540
                                set step_max_dist_y 2540

                                set sr_margin_x 2.0
                                set sr_margin_y 2.0

                                COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                                # Nest_sr ���� (yes -> no) - 20200903
                                #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                                COM fill_params,type=solid,origin_type=datum,solid_type=surface
                        }
                }

#                # ��Ÿ Layer �߰� ���� �ʿ�
#                # CP Layer Full Cu
#                if {[regexp {^l0[0-9]-cp$} $layer]} {
#                        COM fill_params,type=solid,origin_type=datum,solid_type=surface
#                        COM sr_fill,polarity=positive,step_margin_x=0,step_margin_y=0,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=-1000,sr_margin_y=-1000,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
#                }


                # SR (PSR �ܰ� Open ��)
                if {[lsearch $sr_all $layer] != -1} {
                        set step_margin_x 0
                        set step_margin_y 0

                        set step_max_dist_x [expr $trim_99_x/2.0 + 1.5]
                        set step_max_dist_y [expr $trim_99_y/2.0 + 1.5]

                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=0,sr_margin_y=0,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                }

                # �Ӽ� ����
                if {[lsearch $sr_all $layer] != -1} {
                        # psr_outline Attribute ����
                        COM cur_atr_reset
                        COM cur_atr_set,attribute=.string,text=psr_outline
                        COM sel_change_atr,mode=replace
                } else {

                        # Dummy Attribute ����
                        COM cur_atr_reset
                        COM cur_atr_set,attribute=.string,text=dummy
                        COM sel_change_atr,mode=replace

                        # ƴ������ ���� 100um ��� �� Ȯ��
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=surface
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_resize,size=-120,corner_ctl=no
                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                COM get_select_count
                                if {$::COMANS} {
                                        COM sel_resize,size=120,corner_ctl=no
                                }
                        }
                }
        }
        
        # PAUSE pDUMMY_CREATE_end
}



################################################################################
## Procedure    : pSTACKUP_COUPON
## ����         : Trim �� ���� ���� Ȯ�� (�ܸ�)
## Input        :
## Return       :
##

proc pSTACKUP_COUPON {layer_info_path } {
        puts "####### pSTACKUP_COUPON #####################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        STEP_ON $::wJOB $::wPANEL no

        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        set nega_width_x_mm [expr $trim_99_x/2.0 + 3.4]
        set nega_width_y_mm 31

        set posi_width_x_mm [expr $nega_width_x_mm - 0.4]
        set posi_width_y_mm 1

        set pos_x [expr $dx - $nega_width_x_mm/2.0]
        set pos_y [expr $dy / 2.0 + 65]

        # Stackup Coupon ��ġ ���� - RBM Clamp ��ġ ��ħ
        ## DDE W/S #############################################################
        if {$dx == 364 && $dy == 610} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 407 && $dy == 457} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 407 && $dy == 510} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 407 && $dy == 534} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 457 && $dy == 610} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 462 && $dy == 624} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 510 && $dy == 518} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 510 && $dy == 610} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 518 && $dy == 618} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 534 && $dy == 610} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 538 && $dy == 618} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 610 && $dy == 660} {
                set pos_y [expr $dy / 2.0 + 65]
        } elseif {$dx == 610 && $dy == 810} {
                set pos_y [expr $dy / 2.0 + 65 + 10]
        } elseif {$dx == 610 && $dy == 830} {
                set pos_y [expr $dy / 2.0 + 65 + 10]
        } elseif {$dy == 618} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        ## DDPI W/S ############################################################
        } elseif {$dx == 351 && $dy == 531} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 411 && $dy == 618} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 412 && $dy == 518} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 412 && $dy == 538} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 462 && $dy == 618} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 465 && $dy == 618} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 518 && $dy == 538} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } elseif {$dx == 541 && $dy == 621} {
                set pos_y [expr $dy / 2.0 + 65 + 20]
        } else {
                set pos_y [expr $dy / 2.0 + 65]
        }

        set posi_pos_x $pos_x
        set posi_pos_y [expr $pos_y + 14]

        DO_INFO -t step -e $::wJOB/$::wPANEL -d LAYERS_LIST

        set n -1
        for {set no 2} {$no < $::wNO_OF_LAYER} {incr no} {
                set layer l$no

                if {[string length $::wSTART_LAYER_NO] == 2} {
                        if {$no < 10} { set layer l0$no}
                }
                if {[string length $::wSTART_LAYER_NO] == 3} {
                        if {$no < 10} { set layer l00$no}
                        if {$no >= 10 && $no < 100} {set layer l0$no}
                }

                AFFECT $layer

                COM cur_atr_set,attribute=.string,text=stackup_coupon
                COM add_pad,attributes=yes,x=$pos_x,y=$pos_y,symbol=rect[expr $nega_width_x_mm * 1000]x[expr $nega_width_y_mm * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$posi_pos_x,y=$posi_pos_y,symbol=rect[expr $posi_width_x_mm * 1000]x[expr $posi_width_y_mm * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                if {[regexp {30|58|86|114|142|170|198} $no]} {set n [expr $n * -1]}
                set posi_pos_y [expr $posi_pos_y + $n]
        }
}

################################################################################
## Procedure    : pLAYER_ALIGN_COUPON
## ����         :
## Input        :
## Return       :
##

proc pLAYER_ALIGN_COUPON {layer_info_path {mod 0}} {

        puts "####### pLAYER_ALIGN_COUPON #####################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        # work Size
        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # ���� ��ġ ����
        # Work Size�� Edge to Coupon Start X ��ǥ �� ����
        ## DDE W/S #############################################################
        if {$dx == "364" && $dy == "610"} {
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 60
                #set start_right_x 80
                set start_left_x 66
                set start_right_x 75
        } elseif {$dx == "407" && $dy == "457"} {
                #set start_left_x 63.5
                #set start_right_x 77
                set start_left_x 70
                set start_right_x 80
        } elseif {$dx == "407" && $dy == "510"} {
                #set start_left_x 63.5
                #set start_right_x 77
                set start_left_x 70
                set start_right_x 80
        } elseif {$dx == "407" && $dy == "534"} {
                #set start_left_x 63.5
                #set start_right_x 77
                set start_left_x 70
                set start_right_x 80
        } elseif {$dx == "457" && $dy == "610"} {
                #set start_left_x 63.5
                #set start_right_x 77
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 70
                #set start_right_x 80
                set start_left_x 92
                set start_right_x 96
        } elseif {$dx == "510" && $dy == "518"} {
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 102
                #set start_right_x 102
                set start_left_x 91
                set start_right_x 96
        } elseif {$dx == "510" && $dy == "610"} {
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 102
                #set start_right_x 102
                set start_left_x 108
                set start_right_x 115
        } elseif {$dx == "518" && $dy == "618"} {
                set start_left_x 102
                set start_right_x 112
                if {$::wS_MARGIN == 1} {
                        set start_left_x 157
                        set start_right_x 111
                }
        } elseif {$dx == "534" && $dy == "610"} {
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 114
                #set start_right_x 114
                set start_left_x 120
                set start_right_x 125
        # 20200831 �ű� �߰�
        } elseif {$dx == "535" && $dy == "740"} {
                set start_left_x 110
                set start_right_x 115
        } elseif {$dx == "538" && $dy == "618"} {
                set start_left_x 112
                set start_right_x 122
                if {$::wS_MARGIN == 1} {
                        set start_left_x 167
                        set start_right_x 121
                }
        } elseif {$dx == "610" && $dy == "660"} {
                set start_left_x 137
                set start_right_x 137
        } elseif {$dx == "610" && $dy == "810"} {
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 120.5
                #set start_right_x 120.5
                set start_left_x 128
                set start_right_x 133
        } elseif {$dx == "610" && $dy == "830"} {
                # Trim Edge ���� W/S Edge �������� ���� (2019.10.28)
                #set start_left_x 100
                #set start_right_x 100
                set start_left_x 91
                set start_right_x 96
        ## DDPI W/S ############################################################
        } elseif {$dx == "351" && $dy == "531"} {
                set start_left_x 63.5
                set start_right_x 77
                if {$::wS_MARGIN == 1} {
                        set start_left_x  64.5
                        set start_right_x 78
                }
        } elseif {$dx == "411" && $dy == "618"} {
                set start_left_x 63.5
                set start_right_x 77
                if {$::wS_MARGIN == 1} {
                        set start_left_x  64.5
                        set start_right_x 78
                }
        } elseif {$dx == "412" && $dy == "518"} {
                set start_left_x 63.5
                set start_right_x 77
                if {$::wS_MARGIN == 1} {
                        set start_left_x  64.5
                        set start_right_x 78
                }
        } elseif {$dx == "412" && $dy == "538"} {
                set start_left_x 63.5
                set start_right_x 77
                if {$::wS_MARGIN == 1} {
                        set start_left_x  64.5
                        set start_right_x 78
                }
        } elseif {$dx == "462" && $dy == "618"} {
                # 5�� ���� �߰� (2020.02.07)
                #set start_left_x 63.5
                #set start_right_x 77
                set start_left_x 92
                set start_right_x 97
                if {$::wS_MARGIN == 1} {
                        # 5�� ���� �߰� (2020.02.07)
                        #set start_left_x  64.5
                        #set start_right_x 78
                        set start_left_x  82.5
                        set start_right_x 88
                }
        } elseif {$dx == "462" && $dy == "624"} {
                set start_left_x 98
                set start_right_x 103
                if {$::wS_MARGIN == 1} {
                        set start_left_x 99
                        set start_right_x 103
                }
        } elseif {$dx == "465" && $dy == "618"} {
                #set start_left_x 98
                #set start_right_x 103
                set start_left_x 83
                set start_right_x 88
                if {$::wS_MARGIN == 1} {
                        #set start_left_x 99
                        #set start_right_x 103
                        set start_left_x 84
                        set start_right_x 88
                }
        } elseif {$dx == "518" && $dy == "538"} {
                set start_left_x 98
                set start_right_x 103
                if {$::wS_MARGIN == 1} {
                        set start_left_x 99
                        set start_right_x 103
                }
        } elseif {$dx == "541" && $dy == "621"} {
                set start_left_x 98
                set start_right_x 103
                if {$::wS_MARGIN == 1} {
                        set start_left_x 99
                        set start_right_x 103
                }

        } else {
                PAUSE "ERROR : pLAYER_ALIGN_COUPON was not defined Shift value - $::wWORK_SIZE"
                exit 1
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        #set trim_99_x 10
        #set trim_99_y 10

        STEP_ON $::wJOB $::wPANEL no

        # Coupon ��ü Ring ���� ����
        set ring_cnt 0
        set order_pre 0
        set order_post 0

        foreach line $layer_info {
                if {[lindex $line 0] == "l$::wSTART_LAYER_NO" || [lindex $line 0] == "l$::wEND_LAYER_NO"} {continue}

                if {[regexp {^l[0-9]+$} [lindex $line 0]]} {
                        set mirror [lindex $line 2]
                        set order_pre [lindex $line 3]
                        set layup_type [lindex $line 5]

                        lappend n_data $line

                        if {$layup_type == "ccl"} {
                                # Order�� ���� �ɶ� or CCL �� ���� �� �� Count ����
                                if {$order_pre != $order_post || $mirror == "no" } {
                                        set ring_cnt [expr $ring_cnt + 1]
                                } else {
                                        set ring_cnt [expr $ring_cnt + 0]
                                }
                        } else {
                                set ring_cnt [expr $ring_cnt + 1]
                        }
                }
                #PAUSE "$line == $ring_cnt order_pre == $order_pre order_post == $order_post"
                # Order ���� Ȯ�ο�
                set order_post $order_pre
        }
        #PAUSE $ring_cnt


        # Type A = 0~29�� ���� 1set (Probe)
        # Type B_1 = ���� �׷��� 18�� ���� 1set, Type B_2 = 36�� ���� 2set (None Probe)
        # Type C = 37~55�� (None Probe) or 30~55 1set (Probe)
        # Type D = 56~70�� (Probe or None Probe)
        # Type E = 70��~ (Probe or None Probe)


        set ring_gap_size2 [expr 4050 + 225]

        # Probe Type ���
        if {$::wPROBE == 1} {
                set type A

                if {$ring_cnt <= 29} {
                        # Shift Value
                        set add_x [expr 18 / sqrt(2)]
                        set add_y [expr 18 / sqrt(2) * -1.0]

                        set ring_gap_size [expr 6300 + 225]
                        set line_length 14000

        #                set gREPEATstep   = ('pcb'         'pcb'         'pcb'        )
        #                set gREPEATxa     = ('-25.854695'  '20.58073'    '-49.6000825')
        #                set gREPEATya     = ('470.9328375' '482.014'     '467.766785' )
        #                set gREPEATangle  = ('90'          '90'          '90'         )
        #                set gREPEATmirror = ('no'          'no'          'no'         )
        #                set gREPEATxmin   = ('79.1453725'  '125.5807975' '55.4'       )
        #                set gREPEATymin   = ('135.93277'   '147.01395'   '132.7667175')
        #                set gREPEATxmax   = ('309.1453725' '355.5807975' '285.4'      )
        #                set gREPEATymax   = ('365.93277'   '377.01395'   '362.7667175')

                        DO_INFO -t step -e $::wJOB/$::wPANEL -d REPEAT, units=mm
                        foreach REPEATstep $gREPEATstep REPEATxmin $gREPEATxmin REPEATymin $gREPEATymin REPEATxmax $gREPEATxmax REPEATymax $gREPEATymax {
                                if {$REPEATstep == $::wSR_STEP} {
                                        lappend REPEATxmin_list $REPEATxmin
                                        lappend REPEATymin_list $REPEATymin
                                        lappend REPEATxmax_list $REPEATxmax
                                        lappend REPEATymax_list $REPEATymax
                                }
                        }
                        set limit_xmin [lindex [lsort -real $REPEATxmin_list] 0]
                        set limit_ymin [lindex [lsort -real $REPEATymin_list] 0]
                        set limit_xmax [lindex [lsort -real $REPEATxmax_list] end]
                        set limit_ymax [lindex [lsort -real $REPEATymax_list] end]


                        # ��ǰ ���� 20mm �̰ݿ�û (2019.04.30 by �����)
                        set size_x [expr ($limit_xmax - $limit_xmin) / 2.0 + 27]
                        set size_y [expr ($limit_ymax - $limit_ymin) / 2.0 + 27]

                        set center_x [expr $work_size_x / 2.0]
                        set center_y [expr $work_size_y / 2.0]


                        # ���� ��ġ ����
                        set lower_left_x1 [expr $center_x - cos([deg2rad 41])*$size_x]
                        set lower_left_y1 [expr $center_y - sin([deg2rad 41])*$size_y]

                        set upper_left_x1 [expr $center_x - cos([deg2rad 41])*$size_x]
                        set upper_left_y1 [expr $center_y + sin([deg2rad 41])*$size_y]

                        set lower_right_x1 [expr $center_x + cos([deg2rad 41])*$size_x]
                        set lower_right_y1 [expr $center_y - sin([deg2rad 41])*$size_y]

                        set upper_right_x1 [expr $center_x + cos([deg2rad 41])*$size_x]
                        set upper_right_y1 [expr $center_y + sin([deg2rad 41])*$size_y]

                } elseif {$ring_cnt > 29 && $ring_cnt <= 55} {

                        # ���C
                        set type C

                        # Shift Value
                        set add_x [expr 30 / sqrt(2)]
                        set add_y [expr 30 / sqrt(2) * -1.0]

                        set ring_gap_size [expr 12150 + 225]
                        set line_length 25000

                        DO_INFO -t step -e $::wJOB/$::wPANEL -d REPEAT, units=mm
                        foreach REPEATstep $gREPEATstep REPEATxmin $gREPEATxmin REPEATymin $gREPEATymin REPEATxmax $gREPEATxmax REPEATymax $gREPEATymax {
                                if {$REPEATstep == $::wSR_STEP} {
                                        lappend REPEATxmin_list $REPEATxmin
                                        lappend REPEATymin_list $REPEATymin
                                        lappend REPEATxmax_list $REPEATxmax
                                        lappend REPEATymax_list $REPEATymax
                                }
                        }
                        set limit_xmin [lindex [lsort -real $REPEATxmin_list] 0]
                        set limit_ymin [lindex [lsort -real $REPEATymin_list] 0]
                        set limit_xmax [lindex [lsort -real $REPEATxmax_list] end]
                        set limit_ymax [lindex [lsort -real $REPEATymax_list] end]

                        # ��ǰ ���� 20mm �̰ݿ�û (2019.04.30 by �����)
                        set size_x [expr ($limit_xmax - $limit_xmin) / 2.0 + 35]
                        set size_y [expr ($limit_ymax - $limit_ymin) / 2.0 + 35]

                        set center_x [expr $work_size_x / 2.0]
                        set center_y [expr $work_size_y / 2.0]



                        # ���� ��ġ ����
                        set lower_left_x1 [expr $center_x - cos([deg2rad 40])*$size_x]
                        set lower_left_y1 [expr $center_y - sin([deg2rad 40])*$size_y]

                        set upper_left_x1 [expr $center_x - cos([deg2rad 40])*$size_x]
                        set upper_left_y1 [expr $center_y + sin([deg2rad 40])*$size_y]

                        set lower_right_x1 [expr $center_x + cos([deg2rad 40])*$size_x]
                        set lower_right_y1 [expr $center_y - sin([deg2rad 40])*$size_y]

                        set upper_right_x1 [expr $center_x + cos([deg2rad 40])*$size_x]
                        set upper_right_y1 [expr $center_y + sin([deg2rad 40])*$size_y]

                } elseif {$ring_cnt > 55 && $ring_cnt <= 65} {

                        # ���D
                        set type D

                         # Shift Value
                        set add_x [expr 30 / sqrt(2)]
                        set add_y [expr 30 / sqrt(2) * -1.0]

                        set ring_gap_size [expr 15000 + 225]
                        set line_length 30500

                        DO_INFO -t step -e $::wJOB/$::wPANEL -d REPEAT, units=mm
                        foreach REPEATstep $gREPEATstep REPEATxmin $gREPEATxmin REPEATymin $gREPEATymin REPEATxmax $gREPEATxmax REPEATymax $gREPEATymax {
                                if {$REPEATstep == $::wSR_STEP} {
                                        lappend REPEATxmin_list $REPEATxmin
                                        lappend REPEATymin_list $REPEATymin
                                        lappend REPEATxmax_list $REPEATxmax
                                        lappend REPEATymax_list $REPEATymax
                                }
                        }
                        set limit_xmin [lindex [lsort -real $REPEATxmin_list] 0]
                        set limit_ymin [lindex [lsort -real $REPEATymin_list] 0]
                        set limit_xmax [lindex [lsort -real $REPEATxmax_list] end]
                        set limit_ymax [lindex [lsort -real $REPEATymax_list] end]

                        # ��ǰ ���� 20mm �̰ݿ�û (2019.04.30 by �����)
                        set size_x [expr ($limit_xmax - $limit_xmin) / 2.0 + 35]
                        set size_y [expr ($limit_ymax - $limit_ymin) / 2.0 + 35]

                        set center_x [expr $work_size_x / 2.0]
                        set center_y [expr $work_size_y / 2.0]

                        # ���� ��ġ ����
                        set lower_left_x1 [expr $center_x - cos([deg2rad 40])*$size_x]
                        set lower_left_y1 [expr $center_y - sin([deg2rad 40])*$size_y]

                        set upper_left_x1 [expr $center_x - cos([deg2rad 40])*$size_x]
                        set upper_left_y1 [expr $center_y + sin([deg2rad 40])*$size_y]

                        set lower_right_x1 [expr $center_x + cos([deg2rad 40])*$size_x]
                        set lower_right_y1 [expr $center_y - sin([deg2rad 40])*$size_y]

                        set upper_right_x1 [expr $center_x + cos([deg2rad 40])*$size_x]
                        set upper_right_y1 [expr $center_y + sin([deg2rad 40])*$size_y]

                } else {

                        # ���E
                        set type E

                        # 63�� �̻�
                        PAUSE "ERROR : pLAYER_ALIGN_COUPON need to define Type $type : $ring_cnt"
                        exit 1
                }

        # Probe Type�� �ƴ� ���
        } else {
                if {$ring_cnt <= 36} {

                        if {$ring_cnt <= 18} {
                                set type B_1
                        } else {
                                set type B_2

                                # Spcial Margin Check �߰� (2018.12.10)
                                if {$::wS_MARGIN == 1} {
                                        tk_messageBox -message "Can not apply Spcial Margin. Because Ring Cnt over 18 !!!"
                                        exit 1
                                }
                        }

                        # 2nd Coupon Insert Shift Value
                        # Spcial Margin �߰� (2018.12.10)
                        if {$::wS_MARGIN == 0} {
                                set add_x 18
                                set add_y 0
                                set ::gDDPI_MANUAL_EXPO_ADD_X $add_x
                                set ::gDDPI_MANUAL_EXPO_ADD_Y $add_y
                        # Special Margin : 30L ���Ϸ� ����
                        } elseif {$::wS_MARGIN == 1} {
                                set add_x 9
                                set add_y 0
                                set ::gDDPI_MANUAL_EXPO_ADD_X $add_x
                                set ::gDDPI_MANUAL_EXPO_ADD_Y $add_y
                        }

                        set ring_gap_size [expr 4050 + 225]
                        set line_length 8700

                        # Spcial Margin �߰� (2018.12.10)
                        if {$::wS_MARGIN == 0} {
                                # ��� B-1 : ù��° ���ɿ�
                                # ���� ��ġ ����
                                # X �� Trim Edget ���ؿ��� W/S Edget �������� ���� (2019.10.28)
                                #set upper_left_x1 [expr $trim_99_x/2.0 + $start_left_x]
                                set upper_left_x1 [expr 0 + $start_left_x]
                                set upper_left_y1 [expr $dy - $trim_99_y/2.0 - 11]

                                #set upper_right_x1 [expr $dx - $trim_99_x/2.0 - $start_right_x]
                                set upper_right_x1 [expr $dx - $start_right_x]
                                set upper_right_y1 [expr $dy - $trim_99_y/2.0 - 11]

                                #set lower_right_x1 [expr $dx - $trim_99_x/2.0 - $start_right_x]
                                set lower_right_x1 [expr $dx - $start_right_x]
                                set lower_right_y1 [expr $trim_99_y/2.0 + 11]

                                #set lower_left_x1 [expr $trim_99_x/2.0 + $start_left_x]
                                set lower_left_x1 [expr 0 + $start_left_x]
                                set lower_left_y1 [expr $trim_99_y/2.0 + 11]

                                # DDPI Manual Exposure Guide Positino Define########################
                                set ::gDDPI_MANUAL_EXPO_DX(UL) $upper_left_x1
                                set ::gDDPI_MANUAL_EXPO_DY(UL) $upper_left_y1

                                set ::gDDPI_MANUAL_EXPO_DX(UR) $upper_right_x1
                                set ::gDDPI_MANUAL_EXPO_DY(UR) $upper_right_y1

                                set ::gDDPI_MANUAL_EXPO_DX(LR) $lower_right_x1
                                set ::gDDPI_MANUAL_EXPO_DY(LR) $lower_right_y1

                                set ::gDDPI_MANUAL_EXPO_DX(LL) $lower_left_x1
                                set ::gDDPI_MANUAL_EXPO_DY(LL) $lower_left_y1
                                #####################################################################


                                # ��� B-2 : �߰� ���ɿ�
                                # ���� ��ġ ����
                                # 9 - Align Coupon Shift
                                # X �� Trim Edget ���ؿ��� W/S Edget �������� ���� (2019.10.28)
                                #set upper_left_x2 [expr $trim_99_x/2.0 + 9 + $start_left_x]
                                set upper_left_x2 [expr 9 + $start_left_x]
                                set upper_left_y2 [expr $dy - $trim_99_y/2.0 - 11]

                                #set upper_right_x2 [expr $dx - $trim_99_x/2.0 - 9 - $start_right_x]
                                set upper_right_x2 [expr $dx - 9 - $start_right_x]
                                set upper_right_y2 [expr $dy - $trim_99_y/2.0 - 11]

                                #set lower_right_x2 [expr $dx - $trim_99_x/2.0 - 9 - $start_right_x]
                                set lower_right_x2 [expr $dx - 9 - $start_right_x]
                                set lower_right_y2 [expr $trim_99_y/2.0 + 11]

                                #set lower_left_x2 [expr $trim_99_x/2.0 + 9 + $start_left_x]
                                set lower_left_x2 [expr 9 + $start_left_x]
                                set lower_left_y2 [expr $trim_99_y/2.0 + 11]

                        } elseif {$::wS_MARGIN == 1} {
                                # ��� B-1
                                # ���� ��ġ ����
                                set upper_left_x1 [expr 0 + $start_left_x]
                                set upper_left_y1 [expr $dy - $trim_99_y/2.0 - 5.5]

                                set upper_right_x1 [expr $dx - $start_right_x]
                                set upper_right_y1 [expr $dy - $trim_99_y/2.0 - 5.5]

                                set lower_right_x1 [expr $dx - $start_right_x]
                                set lower_right_y1 [expr $trim_99_y/2.0 + 5.5]

                                set lower_left_x1 [expr 0 + $start_left_x]
                                set lower_left_y1 [expr $trim_99_y/2.0 + 5.5]

                                # DDPI Manual Exposure Guide Positino Define########################
                                set ::gDDPI_MANUAL_EXPO_DX(UL) $upper_left_x1
                                set ::gDDPI_MANUAL_EXPO_DY(UL) $upper_left_y1

                                set ::gDDPI_MANUAL_EXPO_DX(UR) $upper_right_x1
                                set ::gDDPI_MANUAL_EXPO_DY(UR) $upper_right_y1

                                set ::gDDPI_MANUAL_EXPO_DX(LR) $lower_right_x1
                                set ::gDDPI_MANUAL_EXPO_DY(LR) $lower_right_y1

                                set ::gDDPI_MANUAL_EXPO_DX(LL) $lower_left_x1
                                set ::gDDPI_MANUAL_EXPO_DY(LL) $lower_left_y1
                                #####################################################################

                                # ��� B-2
                                # Spcial Margin ���� �Ұ�
                        }

                } elseif {$ring_cnt > 36 && $ring_cnt <= 55} {

                        # ���C
                        set type C

                        # Shift Value
                        set add_x 26
                        set add_y 0
                        set ::gDDPI_MANUAL_EXPO_ADD_X $add_x
                        set ::gDDPI_MANUAL_EXPO_ADD_Y $add_y

                        set ring_gap_size [expr 12150 + 225]
                        set line_length 25000

                        # ���� ��ġ ����
                        set lower_left_x1 [expr $active_area_x + 13.5]
                        set lower_left_y1 [expr $active_area_y + 13.5]

                        set upper_left_x1 [expr $active_area_x + 13.5]
                        set upper_left_y1 [expr $dy - $active_area_y - 13.5]

                        set lower_right_x1 [expr $dx - $active_area_x - 13.5]
                        set lower_right_y1 [expr $active_area_y + 13]

                        set upper_right_x1 [expr $dx - $active_area_x - 13.5]
                        set upper_right_y1 [expr $dy - $active_area_y - 13.5]

                        # DDPI Manual Exposure Guide Positino Define########################
                        set ::gDDPI_MANUAL_EXPO_DX(UL) $upper_left_x1
                        set ::gDDPI_MANUAL_EXPO_DY(UL) $upper_left_y1

                        set ::gDDPI_MANUAL_EXPO_DX(UR) $upper_right_x1
                        set ::gDDPI_MANUAL_EXPO_DY(UR) $upper_right_y1

                        set ::gDDPI_MANUAL_EXPO_DX(LR) $lower_right_x1
                        set ::gDDPI_MANUAL_EXPO_DY(LR) $lower_right_y1

                        set ::gDDPI_MANUAL_EXPO_DX(LL) $lower_left_x1
                        set ::gDDPI_MANUAL_EXPO_DY(LL) $lower_left_y1
                        #####################################################################

                } elseif {$ring_cnt > 55 && $ring_cnt <= 65} {

                        # ���D
                        set type D

                        # Shift Value
                        set add_x 26
                        set add_y 0
                        set ::gDDPI_MANUAL_EXPO_ADD_X $add_x
                        set ::gDDPI_MANUAL_EXPO_ADD_Y $add_y

                        set ring_gap_size [expr 15000 + 225]
                        set line_length 30500

                        # ���� ��ġ ����
                        set lower_left_x1 [expr $active_area_x + 13.5]
                        set lower_left_y1 [expr $active_area_y + 13.5]

                        set upper_left_x1 [expr $active_area_x + 13.5]
                        set upper_left_y1 [expr $dy - $active_area_y - 13.5]

                        set lower_right_x1 [expr $dx - $active_area_x - 13.5]
                        set lower_right_y1 [expr $active_area_y + 13]

                        set upper_right_x1 [expr $dx - $active_area_x - 13.5]
                        set upper_right_y1 [expr $dy - $active_area_y - 13.5]

                        # DDPI Manual Exposure Guide Positino Define########################
                        set ::gDDPI_MANUAL_EXPO_DX(UL) $upper_left_x1
                        set ::gDDPI_MANUAL_EXPO_DY(UL) $upper_left_y1

                        set ::gDDPI_MANUAL_EXPO_DX(UR) $upper_right_x1
                        set ::gDDPI_MANUAL_EXPO_DY(UR) $upper_right_y1

                        set ::gDDPI_MANUAL_EXPO_DX(LR) $lower_right_x1
                        set ::gDDPI_MANUAL_EXPO_DY(LR) $lower_right_y1

                        set ::gDDPI_MANUAL_EXPO_DX(LL) $lower_left_x1
                        set ::gDDPI_MANUAL_EXPO_DY(LL) $lower_left_y1
                        #####################################################################

                } else {
                        # ���E : ���� �ȵ�
                        set type E
                        PAUSE "ERROR : pLAYER_ALIGN_COUPON need to define Type $type : $ring_cnt"
                        exit 1
                }
        }
        puts "Layer Align Coupon Insert type = $type, Ring Count = $ring_cnt"

        # MOD=1 �϶� Skip (DDPI ���� �뱤 ���̵� ���� ��ǥ�� ����)
        if {$mod == 1} {
                return
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        set ring_cnt_chk 0
        set order_post 0
        foreach line $n_data {

                set layer [lindex $line 0]
                set mirror [lindex $line 2]
                set order_pre [lindex $line 3]
                set layup_type [lindex $line 5]

                AFFECT $layer

                if {$layup_type == "ccl"} {
                        # Order�� ���� �ɶ� or CCL �� ���� �� �� Count ����
                        if {$order_pre != $order_post || $mirror == "no"} {
                                set ring_gap_size [expr $ring_gap_size - 225]
                                set ring_gap_size2 [expr $ring_gap_size2 - 225]
                                set ring_cnt_chk [expr $ring_cnt_chk + 1]
                        } else {
                                set ring_cnt_chk [expr $ring_cnt_chk + 0]
                        }
                } else {
                        set ring_gap_size [expr $ring_gap_size - 225]
                        set ring_gap_size2 [expr $ring_gap_size2 - 225]
                        set ring_cnt_chk [expr $ring_cnt_chk + 1]
                }

                # $ring_cnt �� 18���� Ŭ ��� (B_2 Type) �� ��� Check
                if {$type == "B_2"} {
                        if {$ring_cnt_chk == [expr $ring_cnt / 2.0] || $ring_cnt_chk == [expr ($ring_cnt + 1) / 2.0]} {
                                set ring_gap_size2 4050
                        }
                }
                # Order ���� Ȯ�ο�
                set order_post $order_pre

                puts "$layer ======= $ring_cnt_chk ========= [expr $ring_cnt /2] =========== $ring_cnt"

                ## ���ϱ� ���
                # Negative ����
                COM cur_atr_set,attribute=.string,text=layer_align_coupon_add
                COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                ## ���ϱ� ���
                COM cur_atr_set,attribute=.string,text=layer_align_coupon_multi
                # Negative ����
                COM add_pad,attributes=yes,x=[expr $lower_left_x1+$add_x],y=[expr $lower_left_y1+$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_left_x1+$add_x],y=[expr $upper_left_y1-$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $lower_right_x1-$add_x],y=[expr $lower_right_y1+$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_right_x1-$add_x],y=[expr $upper_right_y1-$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                if {$type == "A" || $type == "C" || $type == "D" || $type == "B_1" || $type == "B_2" && [expr $ring_cnt_chk - 0.5] < [expr $ring_cnt / 2.0]} {
                        # ���ϱ� �ɺ� ����
                        COM cur_atr_set,attribute=.string,text=layer_align_coupon_add
                        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                        # ���ϱ� �ɺ� ����
                        COM cur_atr_set,attribute=.string,text=layer_align_coupon_multi
                        COM add_pad,attributes=yes,x=[expr $lower_left_x1+$add_x],y=[expr $lower_left_y1+$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_left_x1+$add_x],y=[expr $upper_left_y1-$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $lower_right_x1-$add_x],y=[expr $lower_right_y1+$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_right_x1-$add_x],y=[expr $upper_right_y1-$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                }

                if {$type == "B_2"} {
                        ## ���ϱ� ���
                        # Negative ����
                        # 1_2�� Nega
                        COM cur_atr_set,attribute=.string,text=layer_align_coupon_add
                        COM add_pad,attributes=yes,x=$lower_left_x2,y=$lower_left_y2,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=$upper_left_x2,y=$upper_left_y2,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=$lower_right_x2,y=$lower_right_y2,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=$upper_right_x2,y=$upper_right_y2,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                        ## ���ϱ� ���
                        # Negative ����
                        # 1_2�� Nega
                        COM cur_atr_set,attribute=.string,text=layer_align_coupon_multi
                        COM add_pad,attributes=yes,x=[expr $lower_left_x2+$add_x],y=[expr $lower_left_y2+$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_left_x2+$add_x],y=[expr $upper_left_y2-$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $lower_right_x2-$add_x],y=[expr $lower_right_y2+$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_right_x2-$add_x],y=[expr $upper_right_y2-$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                        if {[expr $ring_cnt_chk+1] >= [expr $ring_cnt / 2.0]} {
                                ## ���ϱ� ���
                                # �ɺ� ����
                                COM cur_atr_set,attribute=.string,text=layer_align_coupon_add
                                COM add_pad,attributes=yes,x=$lower_left_x2,y=$lower_left_y2,symbol=moire125x${ring_gap_size2}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                COM add_pad,attributes=yes,x=$upper_left_x2,y=$upper_left_y2,symbol=moire125x${ring_gap_size2}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                COM add_pad,attributes=yes,x=$lower_right_x2,y=$lower_right_y2,symbol=moire125x${ring_gap_size2}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                COM add_pad,attributes=yes,x=$upper_right_x2,y=$upper_right_y2,symbol=moire125x${ring_gap_size2}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                                ## ���ϱ� ���
                                # �ɺ� ����
                                COM cur_atr_set,attribute=.string,text=layer_align_coupon_multi
                                COM add_pad,attributes=yes,x=[expr $lower_left_x2+$add_x],y=[expr $lower_left_y2+$add_y],symbol=moire125x${ring_gap_size2}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                COM add_pad,attributes=yes,x=[expr $upper_left_x2+$add_x],y=[expr $upper_left_y2-$add_y],symbol=moire125x${ring_gap_size2}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                COM add_pad,attributes=yes,x=[expr $lower_right_x2-$add_x],y=[expr $lower_right_y2+$add_y],symbol=moire125x${ring_gap_size2}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                COM add_pad,attributes=yes,x=[expr $upper_right_x2-$add_x],y=[expr $upper_right_y2-$add_y],symbol=moire125x${ring_gap_size2}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        }
                }
        }

        # ���ɿ� ���� Symbol Break
        CLEAR_RESET
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_set,filter_name=popup,update_popup=no,include_syms=moire*
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_break
        }
        CLEAR_RESET
}



################################################################################
## Procedure    : pLAYER_ALIGN_COUPON_PROBE_BVH
## ����         :
## Input        :
## Return       :
##

proc pLAYER_ALIGN_COUPON_PROBE_BVH {layer_info_path} {

        puts "####### pLAYER_ALIGN_COUPON_PROBE_BVH START #####################################"
        puts "####### pLAYER_ALIGN_COUPON_PROBE_BVH START #####################################"
        puts "####### pLAYER_ALIGN_COUPON_PROBE_BVH START #####################################"


        if {$::wPROBE != 1 || [regexp {BVH} $::wTYPE] != 1} {
                return
        }

        # 2L �� ��� Skip
        if {$::wNO_OF_LAYER == 2} {
                return
        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON_PROBE_BVH) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON_PROBE_BVH) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON_PROBE_BVH) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        # work Size
        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        #set trim_99_x 10
        #set trim_99_y 10

        STEP_ON $::wJOB $::wPANEL no

        # Shift Value
        # Type D �߰��� ���� ���� (2019.12.20)
        #set add_x [expr  / sqrt(2)]
        #set add_y [expr 55 / sqrt(2) * -1.0]
        set add_x [expr 60 / sqrt(2)]
        set add_y [expr 60 / sqrt(2) * -1.0]


#        set gREPEATstep   = ('pcb'         'pcb'         'pcb'        )
#        set gREPEATxa     = ('-25.854695'  '20.58073'    '-49.6000825')
#        set gREPEATya     = ('470.9328375' '482.014'     '467.766785' )
#        set gREPEATangle  = ('90'          '90'          '90'         )
#        set gREPEATmirror = ('no'          'no'          'no'         )
#        set gREPEATxmin   = ('79.1453725'  '125.5807975' '55.4'       )
#        set gREPEATymin   = ('135.93277'   '147.01395'   '132.7667175')
#        set gREPEATxmax   = ('309.1453725' '355.5807975' '285.4'      )
#        set gREPEATymax   = ('365.93277'   '377.01395'   '362.7667175')

        DO_INFO -t step -e $::wJOB/$::wPANEL -d REPEAT, units=mm
        foreach REPEATstep $gREPEATstep REPEATxmin $gREPEATxmin REPEATymin $gREPEATymin REPEATxmax $gREPEATxmax REPEATymax $gREPEATymax {
                if {$REPEATstep == $::wSR_STEP} {
                        lappend REPEATxmin_list $REPEATxmin
                        lappend REPEATymin_list $REPEATymin
                        lappend REPEATxmax_list $REPEATxmax
                        lappend REPEATymax_list $REPEATymax
                }
        }
        set limit_xmin [lindex [lsort -real $REPEATxmin_list] 0]
        set limit_ymin [lindex [lsort -real $REPEATymin_list] 0]
        set limit_xmax [lindex [lsort -real $REPEATxmax_list] end]
        set limit_ymax [lindex [lsort -real $REPEATymax_list] end]

        # ��ǰ ���� 20mm �̰ݿ�û (2019.04.30 by �����)
        set size_x [expr ($limit_xmax - $limit_xmin) / 2.0 + 25]
        set size_y [expr ($limit_ymax - $limit_ymin) / 2.0 + 25]
        set center_x [expr [lindex [regsub {x|X} $::wWORK_SIZE " "] 0] / 2]
        set center_y [expr [lindex [regsub {x|X} $::wWORK_SIZE " "] 1] / 2]

        # ���� ��ġ ����
        set lower_left_x1 [expr $center_x - cos([deg2rad 37])*$size_x]
        set lower_left_y1 [expr $center_y - sin([deg2rad 37])*$size_y]

        set upper_left_x1 [expr $center_x - cos([deg2rad 37])*$size_x]
        set upper_left_y1 [expr $center_y + sin([deg2rad 37])*$size_y]

        set lower_right_x1 [expr $center_x + cos([deg2rad 37])*$size_x]
        set lower_right_y1 [expr $center_y - sin([deg2rad 37])*$size_y]

        set upper_right_x1 [expr $center_x + cos([deg2rad 37])*$size_x]
        set upper_right_y1 [expr $center_y + sin([deg2rad 37])*$size_y]


        CLEAR_RESET
        DO_INFO -t matrix -e $::wJOB/matrix,units=mm

        # Layer Affect
        foreach name $gROWname context $gROWcontext side $gROWside {
                puts "$name $context $side"
                if {$context == "board" && $side == "inner"} {
                        COM affected_layer,name=$name,mode=single,affected=yes
                }

        }

        set ring_gap_size [expr 3500 + 225]
        set line_length 8000

        ## ���ϱ� ���
        # Negative ����
        COM cur_atr_set,attribute=.string,text=layer_align_coupon_add
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        ## ���ϱ� ���
        COM cur_atr_set,attribute=.string,text=layer_align_coupon_multi
        # Negative ����
        COM add_pad,attributes=yes,x=[expr $lower_left_x1+$add_x],y=[expr $lower_left_y1+$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=[expr $upper_left_x1+$add_x],y=[expr $upper_left_y1-$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=[expr $lower_right_x1-$add_x],y=[expr $lower_right_y1+$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=[expr $upper_right_x1-$add_x],y=[expr $upper_right_y1-$add_y],symbol=r$line_length,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        CLEAR_RESET

        ## ����� Drill Info
        #d01     01 08 3 cf both 100.000 100.000 top m 200 no
        #d0104s  01 04 2 cf both 100.000 100.000 top m 200 no
        #d0508s  05 08 2 cf both 100.000 100.000 top m 200 no
        #c0102   01 02 3 cf top  100.000 100.000 top c     no
        #c0807   08 07 3 cf btm  100.000 100.000 btm c     no

        set layer_list ""

        # PROBE is only Normal or BVH Type.

        foreach line $drill_info {
                if {[regexp {^d[0-9]*s$} [lindex $line 0]] && [lindex $line 3] == 2 && [lindex $line 9] == "m"} {

                        # ������ ��� ���ɿ� ���� ���� ����
                        if {[lindex $line 1] == $::wSTART_LAYER_NO} {

                        } else {
                                lappend layer_list l[lindex $line 1]
                        }

                        # ������ ��� ���ɿ� ���� ���� ����
                        if {[lindex $line 2] == $::wEND_LAYER_NO} {

                        } else {
                                lappend layer_list l[lindex $line 2]
                        }
                }
        }

        foreach layer $layer_list {
                AFFECT $layer

                set ring_gap_size [expr $ring_gap_size - 225]

                # ���ϱ� �ɺ� ����
                COM cur_atr_set,attribute=.string,text=layer_align_coupon_add
                COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=moire125x${ring_gap_size}x1x125x${line_length}x0,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                # ���ϱ� �ɺ� ����
                COM cur_atr_set,attribute=.string,text=layer_align_coupon_multi
                COM add_pad,attributes=yes,x=[expr $lower_left_x1+$add_x],y=[expr $lower_left_y1+$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_left_x1+$add_x],y=[expr $upper_left_y1-$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $lower_right_x1-$add_x],y=[expr $lower_right_y1+$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_right_x1-$add_x],y=[expr $upper_right_y1-$add_y],symbol=moire125x${ring_gap_size}x1x125x${line_length}x45,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        }

        # ���ɿ� ���� Symbol Break
        CLEAR_RESET
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_set,filter_name=popup,update_popup=no,include_syms=moire*
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_break
        }
        CLEAR_RESET

        puts "####### pLAYER_ALIGN_COUPON_PROBE_BVH END #####################################"
        puts "####### pLAYER_ALIGN_COUPON_PROBE_BVH END #####################################"
        puts "####### pLAYER_ALIGN_COUPON_PROBE_BVH END #####################################"


}



################################################################################
## Procedure    : pXRAY_DRILL_MARK
## ����         : X-Ray Drill Mark �ν� Target Guide ����
## Input        :
## Return       :
##

proc pXRAY_DRILL_MARK {layer_info_path} {

        puts "####### pXRAY_DRILL_MARK START #####################################"
        puts "####### pXRAY_DRILL_MARK START #####################################"
        puts "####### pXRAY_DRILL_MARK START #####################################"

        # Probe �� �ƴҰ�� Return
        if {$::wPROBE != 1} {
                if {$::wETC_DATA_CREATE == 1} {
                        PAUSE "ALARM (pXRAY_DRILL_MARK) : Need to insert by manually except PROBE Type!!!"
                }
                return
        }


        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$drill_info_file_name not found!!!"
                return
        }


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        # X-Ray Drill Layer Define
        set flag 0
        foreach line $drill_info {
                if {[lindex $line 9] == "xray"} {
                        set flag 1
                        set xray_drl_layer [lindex $line 0]
                }
        }
        if {$flag == 0} {return}

        # work Size
        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        STEP_ON $::wJOB $::wPANEL no

        # Symbol Delete
        COM affected_filter,filter=(context=board)
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=xray_drill_mark
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        # Probe Type ���
        if {$::wPROBE == 1} {

#                set gREPEATstep   = ('pcb'         'pcb'         'pcb'        )
#                set gREPEATxa     = ('-25.854695'  '20.58073'    '-49.6000825')
#                set gREPEATya     = ('470.9328375' '482.014'     '467.766785' )
#                set gREPEATangle  = ('90'          '90'          '90'         )
#                set gREPEATmirror = ('no'          'no'          'no'         )
#                set gREPEATxmin   = ('79.1453725'  '125.5807975' '55.4'       )
#                set gREPEATymin   = ('135.93277'   '147.01395'   '132.7667175')
#                set gREPEATxmax   = ('309.1453725' '355.5807975' '285.4'      )
#                set gREPEATymax   = ('365.93277'   '377.01395'   '362.7667175')

                DO_INFO -t step -e $::wJOB/$::wPANEL -d REPEAT, units=mm
                foreach REPEATstep $gREPEATstep REPEATxmin $gREPEATxmin REPEATymin $gREPEATymin REPEATxmax $gREPEATxmax REPEATymax $gREPEATymax {
                        if {$REPEATstep == $::wSR_STEP} {
                                lappend REPEATxmin_list $REPEATxmin
                                lappend REPEATymin_list $REPEATymin
                                lappend REPEATxmax_list $REPEATxmax
                                lappend REPEATymax_list $REPEATymax
                        }
                }
                set limit_xmin [lindex [lsort -real $REPEATxmin_list] 0]
                set limit_ymin [lindex [lsort -real $REPEATymin_list] 0]
                set limit_xmax [lindex [lsort -real $REPEATxmax_list] end]
                set limit_ymax [lindex [lsort -real $REPEATymax_list] end]

                set size_x [expr ($limit_xmax - $limit_xmin) / 2.0 + 8]
                set size_y [expr ($limit_ymax - $limit_ymin) / 2.0 + 8]
#                set center_x [expr $limit_xmin + $size_x - 8]
#                set center_y [expr $limit_ymin + $size_y - 8]
                set center_x [expr $work_size_x / 2.0]
                set center_y [expr $work_size_y / 2.0]

                # ���� ��ġ ����
                set upper_left_x1 [expr $center_x - cos([deg2rad 45])*$size_x]
                set upper_left_y1 [expr $center_y + sin([deg2rad 45])*$size_y]

                #���� ��� ���Ī ����
                set upper_right_x1 [expr $center_x + cos([deg2rad 45])*$size_x + 3]
                set upper_right_y1 [expr $center_y + sin([deg2rad 45])*$size_y - 3]

                set lower_right_x1 [expr $center_x + cos([deg2rad 45])*$size_x]
                set lower_right_y1 [expr $center_y - sin([deg2rad 45])*$size_y]

                set lower_left_x1 [expr $center_x - cos([deg2rad 45])*$size_x]
                set lower_left_y1 [expr $center_y - sin([deg2rad 45])*$size_y]
        }

        # Attribute Define
        set attr xray_drill_mark

        # SR Layer Target Insert
        CLEAR_RESET

        set symbol dd.pnl.mlb_xray_mark_sr
        COM cur_atr_set,attribute=.string,text=$attr
        COM affected_filter,filter=(type=solder_mask&context=board)
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Outer Layer Target Insert
        CLEAR_RESET

        set symbol dd.pnl.mlb_xray_mark_out
        COM cur_atr_set,attribute=.string,text=$attr
        COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=top|bottom)
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Inner Layer Target Insert
        CLEAR_RESET

        set symbol dd.pnl.mlb_xray_mark_in
        COM cur_atr_set,attribute=.string,text=$attr
        COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=inner)
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Drill Layer Target Insert
        CLEAR_RESET

        WORK $xray_drl_layer
        set symbol dd.pnl.mlb_xray_mark_drl
        COM cur_atr_set,attribute=.string,text=$attr
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Symbol Break
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_break
        }
        CLEAR_RESET

        puts "####### pXRAY_DRILL_MARK END #####################################"
        puts "####### pXRAY_DRILL_MARK END #####################################"
        puts "####### pXRAY_DRILL_MARK END #####################################"

}



################################################################################
## Procedure    : pXRAY_DRILL_HOLE
## ����         : Back/Depth X-Ray Drill Hole �ν� Target Guide ����
## Input        :
## Return       :
##

proc pXRAY_DRILL_HOLE {layer_info_path} {

        puts "####### pXRAY_DRILL_HOLE START #####################################"
        puts "####### pXRAY_DRILL_HOLE START #####################################"
        puts "####### pXRAY_DRILL_HOLE START #####################################"

#        # Probe �� �ƴҰ�� Return
#        if {$::wPROBE != 1} {
#                if {$::wETC_DATA_CREATE == 1} {
#                        PAUSE "ALARM (pXRAY_DRILL_HOLE) : Need to insert by manually except PROBE Type !!"
#                }
#                return
#        }


        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$drill_info_file_name not found!!!"
                return
        }


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_ALIGN_COUPON) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        # X-Ray Drill Layer Check
        if {$::wNO_OF_LAYER >= 100} {
                set guide_drl d001
        } elseif {$::wNO_OF_LAYER < 100} {
                set guide_drl d01
        }

        set back_xray_drl_list ""
        set depth_xray_drl_list ""

        set xray_hole_check 0

        foreach line $drill_info {
                #  Cap Drill �� ������ Cap Drill �� Guide Hole ����
                if {[lindex $line 9] == "cap" && [lindex $line 3] == $::wEND_ORDER} {
                        set guide_drl [lindex $line 0]
                }

                if {[lindex $line 9] == "backxray" && [lindex $line 3] == $::wEND_ORDER} {
                        set xray_hole_check 1
                        lappend back_xray_drl_list [lindex $line 0]
                }
                if {[lindex $line 9] == "depthxray" && [lindex $line 3] == $::wEND_ORDER} {
                        set xray_hole_check 1
                        lappend depth_xray_drl_list [lindex $line 0]
                }
        }
        #PAUSE "$back_xray_drl_list $depth_xray_drl_list"

        if {$xray_hole_check == 0} {
                PAUSE "Need to Check DRILL Info. Tab (Drill Type : backxray or depthxray). X-Ray Hole Align Insert SKIP !!!"
                return
        }

        # work Size
        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        STEP_ON $::wJOB $::wPANEL no

        # Symbol Delete
        COM affected_filter,filter=(context=board)
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=xray_drill_hole
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        # Snap Mode off ����
        COM snap_mode,mode=off

        # Display ����
        COM display_layer,name=l$::wSTART_LAYER_NO,display=yes,number=1
        COM display_layer,name=l$::wEND_LAYER_NO,display=yes,number=2
        if {$::wNO_OF_LAYER > 99} {
                COM display_layer,name=l002,display=yes,number=3
        } else {
                COM display_layer,name=l02,display=yes,number=3
        }


        # Hole Align Position gain
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS, units=mm

        # ���� ���
        COM zoom_area,x1=[expr $gPROF_LIMITSxmin -5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmin +20],y2=[expr $gPROF_LIMITSymax -200]
        MOUSE "_Click X-Ray Hole Align position (Left Top)"
        set upper_left_x1 [lindex $::MOUSEANS 0]
        set upper_left_y1 [lindex $::MOUSEANS 1]

        # ���� ���
        COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmax -20],y2=[expr $gPROF_LIMITSymax -200]
        MOUSE "_Click X-Ray Hole Align position (Right Top)"
        set upper_right_x1 [lindex $::MOUSEANS 0]
        set upper_right_y1 [lindex $::MOUSEANS 1]

        # ���� �ϴ�
        COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymin -5],x2=[expr $gPROF_LIMITSxmax -20],y2=[expr $gPROF_LIMITSymin +200]
        MOUSE "_Click X-Ray Hole Align position (Right Bottom)"
        set lower_right_x1 [lindex $::MOUSEANS 0]
        set lower_right_y1 [lindex $::MOUSEANS 1]


        # ���� �ϴ�
        COM zoom_area,x1=[expr $gPROF_LIMITSxmin -5],y1=[expr $gPROF_LIMITSymin -5],x2=[expr $gPROF_LIMITSxmin +20],y2=[expr $gPROF_LIMITSymin +200]
        MOUSE "_Click X-Ray Hole Align position (Left Bottom)"
        set lower_left_x1 [lindex $::MOUSEANS 0]
        set lower_left_y1 [lindex $::MOUSEANS 1]

        # Attribute Define
        set attr xray_drill_hole

        # Outer Layer Target Insert
        CLEAR_RESET

        set symbol dd.pnl.mlb_xray_hole_out
        COM cur_atr_set,attribute=.string,text=$attr
        COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=top|bottom)
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Inner Layer Target Insert
        CLEAR_RESET

        set symbol dd.pnl.mlb_xray_hole_in
        COM cur_atr_set,attribute=.string,text=$attr
        COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=inner)
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Guide Drill Layer Target Insert
        CLEAR_RESET
        set symbol dd.pnl.mlb_xray_hole_guide_drl
        COM cur_atr_set,attribute=.string,text=$attr
        WORK $guide_drl
        COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Drill Layer Target Insert
        set symbol dd.pnl.mlb_xray_hole_drl
        COM cur_atr_set,attribute=.string,text=$attr
        foreach xray_drl_layer "$back_xray_drl_list $depth_xray_drl_list" {
                if {$xray_drl_layer == ""} {continue}
                WORK $xray_drl_layer
                COM cur_atr_set,attribute=.string,text=$attr
                COM add_pad,attributes=yes,x=$lower_left_x1,y=$lower_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_left_x1,y=$upper_left_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$lower_right_x1,y=$lower_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_right_x1,y=$upper_right_y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        }

        # Symbol Break
        COM affected_filter,filter=(context=board)
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_break
        }
        CLEAR_RESET

        puts "####### pXRAY_DRILL_HOLE END #####################################"
        puts "####### pXRAY_DRILL_HOLE END #####################################"
        puts "####### pXRAY_DRILL_HOLE END #####################################"

}




################################################################################
## Procedure    : pOPTEC_COUPON
## ����         :
## Input        :
## Return       :
##

proc pOPTEC_COUPON { layer_info_path} {
        puts "####### pOPTEC_COUPON #####################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pOPTEC_COUPON) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pOPTEC_COUPON) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        # 2L �� ��� Skip
        if {$::wNO_OF_LAYER == 2} {
                return
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        #set trim_99_x 10
        #set trim_99_y 10

        # work Size
        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # ���� ��ġ ����
        # Work Size�� Edge to Coupon Start X ��ǥ �� ����
        ## DDE W/S #############################################################
        if {$dx == "364" && $dy == "610"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 50
                set start_left_x 55
                set start_right_x 135
        # DDPI Auto Drill Guide ���Կ� ���� ��ġ���� - (20190216)
        # 10�� ���� �߰��� ���� ��ġ���� - (20191023)
        # BVH ���� ��� Type �Ÿ��� ���� �ݿ�
        } elseif {$dx == "407" && $dy == "457"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 51.5
                set start_left_x 54.5
                set start_right_x 130
        } elseif {$dx == "407" && $dy == "510"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 51.5
                set start_left_x 54.5
                set start_right_x 130
        } elseif {$dx == "407" && $dy == "534"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 51.5
                set start_left_x 54.5
                set start_right_x 130
        } elseif {$dx == "457" && $dy == "610"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 70
                #set start_right_x 155
                set start_left_x 80
                set start_right_x 155
        } elseif {$dx == "510" && $dy == "518"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 96.5
                #set start_right_x 181.5
                set start_left_x 80
                set start_right_x 181.5
        } elseif {$dx == "510" && $dy == "610"} {
                set start_left_x 96.5
                set start_right_x 181.5
        } elseif {$dx == "518" && $dy == "618"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 105.5
                #set start_right_x 185.5

                # ���� ��ǰ Opteck Guide ��ġ ���� (2020.02.13)
                #set start_left_x 110
                #set start_right_x 185
                set start_left_x 101
                set start_right_x 185
                # Special Marjin ��ǥ �и� (2020.02.13)
                if {$::wS_MARGIN == 1} {
                        set start_left_x 101
                        set start_right_x 185
                }
        } elseif {$dx == "534" && $dy == "610"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 108.5
                #set start_right_x 193.5
                set start_left_x 110
                set start_right_x 193
        # 20200831 �ű� �߰�
        } elseif {$dx == "535" && $dy == "740"} {
                set start_left_x 100
                set start_right_x 183
        } elseif {$dx == "538" && $dy == "618"} {
                set start_left_x 110.5
                set start_right_x 195.5
        } elseif {$dx == "610" && $dy == "660"} {
                set start_left_x 136.5
                set start_right_x 214.5
        } elseif {$dx == "610" && $dy == "810"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 115
                #set start_right_x 200
                set start_left_x 126
                set start_right_x 210
        } elseif {$dx == "610" && $dy == "830"} {
                # 10�� ���� �߰��� ���� ��ġ ���� 2019.10.24
                #set start_left_x 115
                #set start_right_x 200
                set start_left_x 80
                set start_right_x 210

        ## DDPI W/S ############################################################
        } elseif {$dx == "351" && $dy == "531"} {
                set start_left_x 53
                set start_right_x 100
                if {$::wS_MARGIN == 1} {
                        set start_left_x  80.5
                        set start_right_x 131
                }
        } elseif {$dx == "411" && $dy == "618"} {
                set start_left_x 53
                set start_right_x 132
                if {$::wS_MARGIN == 1} {
                        set start_left_x  80.5
                        set start_right_x 132
                }
        } elseif {$dx == "412" && $dy == "518"} {
                set start_left_x 53
                set start_right_x 132
                if {$::wS_MARGIN == 1} {
                        set start_left_x  80.5
                        set start_right_x 132
                }
        } elseif {$dx == "412" && $dy == "538"} {
                set start_left_x 53
                set start_right_x 132
                if {$::wS_MARGIN == 1} {
                        set start_left_x  80.5
                        set start_right_x 132
                }
        } elseif {$dx == "462" && $dy == "618"} {
                # 2020.02.05 5�� ���� ������Ʈ�� ���� �Ÿ��� ����
                #set start_left_x 53
                set start_left_x 80
                set start_right_x 135
                if {$::wS_MARGIN == 1} {
                        # 2020.02.05 5�� ���� ������Ʈ�� ���� �Ÿ��� ����
                        #set start_left_x  80.5
                        #set start_right_x 152
                        set start_left_x  98.5
                        set start_right_x 152
                }
        } elseif {$dx == "462" && $dy == "624"} {
                set start_left_x 95
                set start_right_x 132
                if {$::wS_MARGIN == 1} {
                        set start_left_x 115
                        set start_right_x 165
                }
        } elseif {$dx == "465" && $dy == "618"} {
                set start_left_x 95
                set start_right_x 132
                if {$::wS_MARGIN == 1} {
                        set start_left_x 115
                        set start_right_x 160
                }
        } elseif {$dx == "518" && $dy == "538"} {
                #set start_left_x 100.5
                #set start_right_x 185.5
                set start_left_x 95
                set start_right_x 165
                if {$::wS_MARGIN == 1} {
                        set start_left_x 115
                        set start_right_x 165
                }
        } elseif {$dx == "541" && $dy == "621"} {
                set start_left_x 95
                set start_right_x 165
                if {$::wS_MARGIN == 1} {
                        set start_left_x  115
                        set start_right_x 165
                }
        } else {
                PAUSE "ERROR : pOPTEC_COUPON was not defined Shift value - $::wWORK_SIZE"
                exit 1
        }

        # 2018.12.04 Y�� �� ���� (Edge to 3mm -> 4mm)
        set upper_left_x [expr $trim_0_x + $start_left_x]
        set upper_left_y [expr $dy - $trim_99_y/2.0 - 4]

        set upper_right_x [expr $dx - $trim_0_x - $start_right_x]
        set upper_right_y [expr $dy - $trim_99_y/2.0 - 4]

        set lower_right_x [expr $dx - $trim_0_x - $start_right_x]
        set lower_right_y [expr $trim_99_y/2.0 + 4]

        set lower_left_x [expr $trim_0_x + $start_left_x]
        set lower_left_y [expr $trim_99_y/2.0 + 4]

        # Optec Y�ణ �Ÿ� Max 770mm :
        if {$dx == "610" && $dy == "810"} {
                set upper_right_y [expr $dy - $trim_99_y/2.0 - 4 - 13.5]
                set upper_left_y [expr $dy - $trim_99_y/2.0 - 4 - 13.5]
                set lower_right_y [expr $trim_99_y/2.0 + 4 + 13.5]
                set lower_left_y [expr $trim_99_y/2.0 + 4 + 13.5]
        } elseif {$dx == "610" && $dy == "830"} {
                set upper_right_y [expr $dy - $trim_99_y/2.0 - 4]
                set upper_left_y [expr $dy - $trim_99_y/2.0 - 4]
                set lower_right_y [expr $trim_99_y/2.0 + 4]
                set lower_left_y [expr $trim_99_y/2.0 + 4]
                PAUSE "$::wWORK_SIZE Optec Coupon Y Distant Check : Need to Under 770mm!!!"
        }

        STEP_ON $::wJOB $::wPANEL no

        # Coupon ��ü ���� ����
        set pad_cnt 1
        set order_post 0

        foreach line $layer_info {
                if {[lindex $line 0] == "l$::wSTART_LAYER_NO" || [lindex $line 0] == "l$::wEND_LAYER_NO"} {continue}

                if {[regexp {^l[0-9]+$} [lindex $line 0]]} {
                        set mirror [lindex $line 2]
                        set order_pre [lindex $line 3]
                        set layup_type [lindex $line 5]

                        lappend n_data $line

                        if {$layup_type == "ccl"} {
                                # Order�� ���� �ɶ� or CCL �� ���� �� �� Count ����
                                if {$order_pre != $order_post || $mirror == "no" } {
                                        set pad_cnt [expr $pad_cnt + 1]
                                } else {
                                        set pad_cnt [expr $pad_cnt + 0]
                                }
                        } else {
                                set pad_cnt [expr $pad_cnt + 1]
                        }
                }
                #PAUSE "$line == $pad_cnt order_pre == $order_pre order_post == $order_post"
                # Order ���� Ȯ�ο�
                set order_post $order_pre
        }
        #PAUSE $pad_cnt

        # 32�� 2�� �̻� ���� ���� -> 100L �̻� 35 x 2�� ������Ʈ (2020.01.14)
#        if {$pad_cnt > 64} {
#                PAUSE "ERROR : OPTEC Coupon Length : $pad_cnt > 64, YK & MC Call !!!"
#                exit 1
#        }
        if {$pad_cnt > 70} {
                PAUSE "ERROR : OPTEC Coupon Length : $pad_cnt > 70, YK & MC Call !!!"
                exit 1
        }


#        # ���� ������ PAD ����
#        set pad_cnt_max 32
#        if {$pad_cnt <= $pad_cnt_max} {
#                set coupon_cnt 1
#                set coupon_length_mm [expr ($pad_cnt-1)*2.5+4]
#        } else {
#                set coupon_cnt 2
#                set coupon_length_mm [expr ($pad_cnt_max-1)*2.5+4]
#                set coupon_length_mm_2 [expr ($pad_cnt-$pad_cnt_max-1)*2.5+4]
#        }

        # ���� ������ PAD ����
        if {$dx <= 407} {
                set pad_cnt_max 27
        } elseif {$dx > 407 && $dx < 610} {
                # 100L �̻��� ���
                if {$::wNO_OF_LAYER >= 100} {
                        set pad_cnt_max 35
                # 100L �̸��� ���
                } else {
                        set pad_cnt_max 32
                }
        }  elseif {$dx >= 610} {
                # 100L �̻��� ���
                if {$::wNO_OF_LAYER >= 100} {
                        set pad_cnt_max 35
                # 100L �̸��� ���
                } else {
                        set pad_cnt_max 32
                }
        } else {
                if {$::wNO_OF_LAYER >= 100} {
                        set pad_cnt_max 35
                } else {
                        set pad_cnt_max 32
                }
        }

        # ���� ���� ���
        if {$pad_cnt <= $pad_cnt_max} {
                set coupon_cnt 1
                # ���� Pad to ���� Pad Pitch : 3mm ����
                set coupon_length_mm [expr $pad_cnt * 2 + 3]
        } else {
                set coupon_cnt 2
                # ���� Pad to ���� Pad Pitch : 3mm ����
                set coupon_length_mm [expr $pad_cnt_max * 2 + 3]
                # ���� Pad ���� / ���� Pad to ���� Pad Pitch : 2mm ����
                set coupon_length_mm_2 [expr ($pad_cnt - $pad_cnt_max)*2 + 2]
        }

        # 1/2���� CCL �϶� - BVH Type ������ ����
        if {[lindex [lindex $layer_info 0] 5] == "ccl"} {
                set shift_x_mm 1
                set shift_y_mm 0

        # 1/2���� C/F �϶�
        } else {
                set shift_x_mm 1
                set shift_y_mm 0
        }

        # Optec Coupon 2��° �� ���� Y��
        # Probe �� ��� ù��° Coupon �� 6mm �̰�- (2020.023.02)
        if {$::wPROBE == 1} {
                set shift_y_mm_cnt2   6

        # Y�� ������ ���� - (2020.023.02)
        } else {
                # set shift_y_mm_cnt2 [expr $::wTRIM_TO_ACTIVE_Y - 1]
                set shift_y_mm_cnt2 [expr round ($::wTRIM_TO_ACTIVE_Y - 1)]
        }


        #set no 0
        # Optec Coupon �и� ���� ������Ʈ (2020.03.10)
        set order_post 0
        foreach line $n_data {
                set layer [lindex $line 0]
                AFFECT $layer

                set mirror [lindex $line 2]
                set order_pre [lindex $line 3]
                set layup_type [lindex $line 5]
                if {$layup_type == "ccl"} {
                        # Order�� ���� �ɶ� or CCL �� ���� �� �� Count ����
                        if {$order_pre != $order_post || $mirror == "no"} {
                                set shift_x_mm [expr $shift_x_mm + 2]
                        } else {
                                # Optec Coupon �и� ���� ������Ʈ (2020.03.10)
                                set shift_x_mm $shift_x_mm
                        }
                } else {
                        set shift_x_mm [expr $shift_x_mm + 2]
                }

                # 2�� ���� ��ǥ �缳��
                if {$shift_x_mm > [expr $pad_cnt_max * 2]} {
                        set shift_x_mm 0
                        set shift_y_mm $shift_y_mm_cnt2
                }
                # Order ���� Ȯ�ο�
                set order_post $order_pre

                ## 1�� �ϰ��
                # �׵θ�
                COM cur_atr_set,attribute=.string,text=optec_coupon

                # 518x618 or 538x618�� ��� Optec Guide �׵θ� Size ��� ���� (2018.12.06)
                # Special Margin �ϰ�� ��� �߰� (2019.09.21)
#                  if { [regexp {518|538} $dx] && $dy == "618" || $::wS_MARGIN == 1} {
#                        set size 3.4
#                } else {
#                        set size 4
#                }

                # Size ��� Ȯ�� ����  (2019.09.21)
                set size 3.4

                # Positive
                COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm / 2.0],y=$lower_left_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm / 2.0],y=$upper_left_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm / 2.0],y=$lower_right_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm / 2.0],y=$upper_right_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                # Negative
                COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm / 2.0],y=$lower_left_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm / 2.0],y=$upper_left_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm / 2.0],y=$lower_right_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm / 2.0],y=$upper_right_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                # 2�� �ϰ��
                if {$coupon_cnt == 2} {
                        # 2�� ���� �׵θ�
                        # Positive
                        COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_left_y + $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_left_y - $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_right_y + $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_right_y - $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr $size * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                        # 2�� ���� Negative
                        COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_left_y + $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                         COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_left_y - $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_right_y + $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                        COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_right_y - $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr ($size - 0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                }


#                if { [regexp {518|538} $dx] && $dy == "618" || $::wS_MARGIN == 1} {
#                        # Positive
#                        COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm / 2.0],y=$lower_left_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm / 2.0],y=$upper_left_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm / 2.0],y=$lower_right_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm / 2.0],y=$upper_right_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#
#                        # Negative
#                        COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm / 2.0],y=$lower_left_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm / 2.0],y=$upper_left_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm / 2.0],y=$lower_right_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm / 2.0],y=$upper_right_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#
#                        # 2�� �ϰ��
#                        if {$coupon_cnt == 2} {
#                                # 2�� ���� �׵θ�
#                                # Positive
#                                COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_left_y + $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_left_y - $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_right_y + $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_right_y - $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 3.4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#
#                                # 2�� ���� Negative
#                                COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_left_y + $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                 COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_left_y - $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_right_y + $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_right_y - $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (3.4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        }
#                } else {
#                         # Positive
#                        COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm / 2.0],y=$lower_left_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm / 2.0],y=$upper_left_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm / 2.0],y=$lower_right_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm / 2.0],y=$upper_right_y,symbol=rect[expr $coupon_length_mm * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#
#                        # Negative
#                        COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm / 2.0],y=$lower_left_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm / 2.0],y=$upper_left_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm / 2.0],y=$lower_right_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm / 2.0],y=$upper_right_y,symbol=rect[expr ($coupon_length_mm - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#
#                        # 2�� �ϰ��
#                        if {$coupon_cnt == 2} {
#                                # 2�� ���� �׵θ�
#                                # Positive
#                                COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_left_y + $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_left_y - $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_right_y + $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_right_y - $shift_y_mm_cnt2],symbol=rect[expr $coupon_length_mm_2 * 1000]x[expr 4 * 1000],polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#
#                                # 2�� ���� Negative
#                                COM add_pad,attributes=yes,x=[expr $lower_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_left_y + $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_left_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_left_y - $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $lower_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $lower_right_y + $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                                COM add_pad,attributes=yes,x=[expr $upper_right_x - 2 + $coupon_length_mm_2 / 2.0],y=[expr $upper_right_y - $shift_y_mm_cnt2],symbol=rect[expr ($coupon_length_mm_2 - 0.4) * 1000]x[expr (4 -0.4) * 1000],polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
#                        }
#                }

                # ���� ���� PAD
                COM add_pad,attributes=yes,x=$lower_left_x,y=$lower_left_y,symbol=r1500,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_left_x,y=$upper_left_y,symbol=r1500,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$lower_right_x,y=$lower_right_y,symbol=r1500,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$upper_right_x,y=$upper_right_y,symbol=r1200,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                # ���� PAD
                COM add_pad,attributes=yes,x=[expr $lower_left_x + $shift_x_mm],y=[expr $lower_left_y + $shift_y_mm],symbol=r1000,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_left_x + $shift_x_mm],y=[expr $upper_left_y - $shift_y_mm],symbol=r1000,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $lower_right_x + $shift_x_mm],y=[expr $lower_right_y + $shift_y_mm],symbol=r1000,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=[expr $upper_right_x + $shift_x_mm],y=[expr $upper_right_y - $shift_y_mm],symbol=r1000,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        }
}




################################################################################
## Procedure    : pBONDING_CLAMP_PIN_GUIDE_CHANGE
## ����         : CCL Thickness �� ���� Design ���� (0.05below / 0.05over)
## Input        :
## Return       :
##

proc pBONDING_CLAMP_PIN_GUIDE_CHANGE { layer_info_path } {
        puts "####### pBONDING_CLAMP_PIN_GUIDE_CHANGE #####################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBONDING_CLAMP_PIN_GUIDE_CHANGE) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        STEP_ON $::wJOB $::wPANEL no

        DO_INFO -t step -e $::wJOB/$::wPANEL -d LAYERS_LIST
        foreach layer $gLAYERS_LIST {

                AFFECT $layer

                # ����
                if {[lsearch $in_all $layer] != -1} {

                        set no 0
                        foreach line $layer_info {
                                if {[lindex $line 0] == $layer} {
                                        set layer_index $no
                                }
                                incr no
                        }

                        if {$layer_index != -1} {
                                set ccl_thick [lindex $layer_info $layer_index 4]
                                set mirror [lindex $layer_info $layer_index 2]
                        } else {
                                PAUSE "ERROR : proc pBONDING_CLAMP_PIN_GUIDE_CHANGE YK or MC Call !!!"
                                exit 1
                        }
                        if {$ccl_thick == "0.05below"} {
                                # Bonding Clamp Change
                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=bonding_clamp
                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                COM get_select_count
                                set sel_cnt $::COMANS
                                if {$sel_cnt != 0} {
                                        if {$sel_cnt == 24 || $sel_cnt == 48} {
                                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r100
                                                COM filter_area_end,layer=,filter_name=popup,operation=unselect
                                                COM get_select_count
                                                if {$::COMANS} {
                                                        COM sel_delete
                                                }

                                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                                COM get_select_count
                                                if {$::COMANS} {
                                                        if {$::wS_MARGIN != 1} {
                                                                COM sel_change_sym,symbol=dd.pnl.mlb_bonding_clamp_0.05t,reset_angle=no
                                                        } else {
                                                                COM sel_change_sym,symbol=dd.pnl.mlb_bonding_clamp_0.05t_special,reset_angle=no
                                                        }
                                                }

                                                COM filter_reset,filter_name=popup
                                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=bonding_clamp
                                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                                COM get_select_count
                                                if {$::COMANS} {
                                                        VOF
                                                        COM sel_break
                                                        VON
                                                }
                                        # Bonding D/F Cut Area = SKIP
                                        } elseif {$sel_cnt == 4 || $sel_cnt == 8} {

                                        } else {
                                                PAUSE "ERROR proc pBONDING_CLAMP_PIN_GUIDE_CHANGE (Bonding Clamp) : CNT = $sel_cnt  YK & MC Call !!!"
                                                exit 1
                                        }
                                }
                                # Pin Guide Change ���� = core �β��� 0.05t ������ ��� bottom�鿡 ���� ��ũ �̹��� ����
                                if {$mirror == "yes"} {

                                        # ��ü Unselect
                                        COM filter_reset,filter_name=popup
                                        COM filter_area_strt
                                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                                        # Pin Guide ����
                                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=muraki_pin_guide_1
                                        COM filter_area_end,layer=,filter_name=popup,operation=select
                                        COM get_select_count
                                        set sel_cnt $::COMANS
                                        if {$sel_cnt != 0} {
                                                if {$sel_cnt == 18} {
                                                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r1190
                                                        COM filter_area_end,layer=,filter_name=popup,operation=unselect
                                                        COM get_select_count
                                                        if {$::COMANS} {
                                                                COM sel_delete
                                                        }

                                                        COM filter_area_end,layer=,filter_name=popup,operation=select
                                                        COM get_select_count
                                                        if {$::COMANS} {
                                                                COM sel_change_sym,symbol=dd.pnl.mlb_muraki_pin_guide_t,reset_angle=no
                                                        }

                                                        COM filter_reset,filter_name=popup
                                                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=muraki_pin_guide_1
                                                        COM filter_area_end,layer=,filter_name=popup,operation=select
                                                        COM get_select_count
                                                        if {$::COMANS} {
                                                                COM sel_break
                                                        }
                                                # Bonding D/F Cut Area = SKIP
                                                } elseif {$sel_cnt == 4 || $sel_cnt == 8} {

                                                } else {
                                                        PAUSE "ERROR proc pBONDING_CLAMP_PIN_GUIDE_CHANGE (Pin Guide) : CNT = $sel_cnt  YK & MC Call !!!"
                                                        exit 1
                                                }
                                        }
                                }
                        }
                }
        }
        COM filter_reset,filter_name=popup
}


################################################################################
## Procedure    : pCOUPON_SIZE_CHANGE
## ����         : Panel�� �� �� �ִ� Coupon �� Drill �� Window Size ����
##	          Drill size�� ��ǰ Size�� �����ϰ� ����.
## Input        :
## Return       :

proc pCOUPON_SIZE_CHANGE {layer_info_path} {
        puts "####### pCOUPON_SIZE_CHANGE START #####################################"
        puts "####### pCOUPON_SIZE_CHANGE START #####################################"
        puts "####### pCOUPON_SIZE_CHANGE START #####################################"

	# Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pCOUPON_SIZE_CHANGE) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        #########################################################################################################################
        # Drill Layer Define ####################################################################################################

        ## ����� Drill Info
        #d01 01 08 3 cf both 100.000 100.000 top m 200 no
        #d0104 02 07 2 cf top 100.000 100.000 top m 200 no
        #d0508 02 07 2 cf top 100.000 100.000 top m 200 no
        #c0102 01 02 3 cf top 100.000 100.000 top c     no
        #c0807 08 07 3 cf btm 100.000 100.000 btm c     no

	foreach line $drill_info {

	        # SKIP Layer Define
	        if {[regexp {milling|ccl|ppg|film} [lindex $line 0]]} { continue }

                set drill [lindex $line 0]
                set org_start [lindex $line 1]
                set org_end [lindex $line 2]
                set dtm [lindex $line 10]
                set type [lindex $line 9]

                if {$dtm == ""} {continue}

                set resize [expr ($dtm - 200)*2.0]
                if {$org_start > $org_end} {
                        set start [scan $org_end %d]
                        set end [scan $org_start %d]
                } else {
                        set start [scan $org_start %d]
                        set end [scan $org_end %d]
                }

                # Coupon �Ӽ� ����
                set att_name ""
                set text ""
                if {$type == "m"} {
                        if {($start == 1 && $end == $::wNO_OF_LAYER) || ($start == $::wNO_OF_LAYER && $end == 1)} {
                                set att_name "cnc_align_coupon_main"
                                set text "MAIN"
                        } elseif {[lindex $line 3] < $::wEND_ORDER && [lindex $line 3] > 1} {
                                set att_name "cnc_align_coupon_ivh[lindex $line 3]"
                                set text "$org_start-$org_end"
                        }
                } elseif {$type == "cap"} {
                        set att_name "cnc_align_coupon_cap"
                        set text "CAP"
                } elseif {$type == "am"} {
                        set att_name "cnc_align_coupon_am"
                        set text "2ND"
                }

                if {$att_name == "" || $text == ""} {continue}

		DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$drill -d EXISTS
            	if { $gEXISTS == "no" } {
            	        PAUSE "ERROR proc pCOUPON_SIZE_CHANGE : $drill Layer not found !!!"
            	        exit 1
                }

                set df_layer_list ""

                for {set no $start} {$no <= $end} {incr no} {
                        if {$::wNO_OF_LAYER < 100} {
                                if {$no < 10} {
                                        lappend df_layer_list l0$no
                                } else {
                                        lappend df_layer_list l$no
                                }
                        } else {
                                if {$no < 10} {
                                        lappend df_layer_list l00$no
                                } else {
                                        if {$no < 100} {
                                                lappend df_layer_list l0$no
                                        } else {
                                                lappend df_layer_list l$no
                                        }
                                }
                        }
                }

                AFFECT $df_layer_list

                # PAD Size Cheange
                COM filter_reset,filter_name=popup
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r850\;r850.01\;r1150\;r1150.01
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_name
                COM filter_area_end,layer=,filter_name=popup,operation=select
                COM get_select_count
                set cnt $::COMANS

                # 610x810 or 610x830 Define - CNC Coupon * 8 (Because 2div)
                if {($work_size_y == 810 || $work_size_y == 830) && [regexp {^[1|2]$} $::wEND_ORDER]} {
                        # Layer Count * [ Coupon 8ea * (Posi & Nega 4ea) = 32ea ]
                        if {$cnt != [expr [llength $df_layer_list] * 32]} {
                                PAUSE "ERROR proc pCOUPON_SIZE_CHANGE 2Div : $drill sel_cnt=$cnt sel_att=$att_name sel_sym=r850\;r1150 Coupon data Check !!!"
            	                exit 1
            	        }
                } else {
                        # Layer Count * [ Coupon 4ea * (Posi & Nega 4ea) = 16ea ]
                        if {$cnt != [expr [llength $df_layer_list] * 16]} {
                                PAUSE "ERROR proc pCOUPON_SIZE_CHANGE Global : $drill sel_cnt=$cnt sel_att=$att_name sel_sym=r850\;r1150 Coupon data Check !!!"
            	                exit 1
            	        }

                }
                COM sel_resize,size=$resize,corner_ctl=no

                ## Text ����
                # Text ��ǥ ����
                COM filter_reset,filter_name=popup
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r1.01\;r1.02\;r1.04\;r1.07\;r1.09\;r1.12\;r1.015\;r1.042\;r1.067\;r1.092\;r1.117
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_name
                COM filter_area_end,layer=,filter_name=popup,operation=select
                COM get_select_count
                set cnt $::COMANS

                # END Order=2 & (610x810 or 610x830) Define - only Normal or BUM-A Type CNC Coupon * 8 (Because 2div)
                if {$::wEND_ORDER == 2 && ($work_size_y == 810 || $work_size_y == 830)} {
                        # Layer Count * [ Coupon 8ea * (Text ���� ��ǥ ��ġ 5) = 40ea ]
                        if {$cnt != [expr [llength $df_layer_list] * 40]} {
                                PAUSE "ERROR proc pCOUPON_SIZE_CHANGE : sel_cnt=$cnt sel_att=$att_name sel_sym=r1.02\;r1.04\;r1.07\;r1.09\;r1.12 Coupon data Check !!!"
            	                exit 1
                        }
                } else {
                        # Layer Count * [ Coupon 4ea * (Text ���� ��ǥ ��ġ 5) = 20ea ]
                        if {$cnt != [expr [llength $df_layer_list] * 20]} {
                                PAUSE "ERROR proc pCOUPON_SIZE_CHANGE : sel_cnt=$cnt sel_att=$att_name sel_sym=r1.02\;r1.04\;r1.07\;r1.09\;r1.12 Coupon data Check !!!"
            	                exit 1
                        }
                }

                set df_layer [lindex $df_layer_list 1]
                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$df_layer -d FEATURES -o select,units=mm

                COM sel_delete
                #P 19.389165 441.658385 r1.02 P 0 0 N
                #P 19.387375 441.61348 r1.04 P 0 0 N
                #P 19.40626 441.5634925 r1.07 P 0 0 N
                #P 19.4373625 441.53128 r1.09 P 0 0 N
                COM cur_atr_set,attribute=.string,text=$att_name

                foreach line $::data {
                        if {[lindex $line 0] == "#P"} {
                                set pos_x [lindex $line 1]
                                set pos_y [lindex $line 2]

                                # GENESIS | INCAM : symbol size different update (2019.05.10)
                                # TOOL Nname
                                if {[lindex $line 3] == "r1.01" || [lindex $line 3] == "r1.02" || [lindex $line 3] == "r1.015"} {
                                        COM add_text,attributes=yes,type=string,x=$pos_x,y=$pos_y,text=\$\$JOB,x_size=0.45,y_size=0.58,w_factor=0.2887139022,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                }

                                # DTM1
                                if {[lindex $line 3] == "r1.04" || [lindex $line 3] == "r1.042"} {
                                        COM add_text,attributes=yes,type=string,x=$pos_x,y=$pos_y,text=[expr round($dtm)],x_size=0.45,y_size=0.58,w_factor=0.2887139022,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                }

                                # DTM2
                                if {[lindex $line 3] == "r1.07" || [lindex $line 3] == "r1.067"} {
                                        COM add_text,attributes=yes,type=string,x=$pos_x,y=$pos_y,text=[expr round($dtm)],x_size=0.45,y_size=0.58,w_factor=0.2887139022,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                }

                                # AR ������
                                if {[lindex $line 3] == "r1.09" || [lindex $line 3] == "r1.092"} {
                                        COM add_text,attributes=yes,type=string,x=$pos_x,y=$pos_y,text=100,x_size=0.45,y_size=0.58,w_factor=0.2887139022,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                }

                                # Drill ���� ����
                                if {[lindex $line 3] == "r1.12" || [lindex $line 3] == "r1.117"} {
                                        COM add_text,attributes=yes,type=string,x=$pos_x,y=$pos_y,text=$text,x_size=0.45,y_size=0.58,w_factor=0.2887139022,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                }
                        }

                }
                #PAUSE "CKH drill=$drill df_layer_list=$df_layer_list"
        }

        puts "####### pCOUPON_SIZE_CHANGE END #####################################"
        puts "####### pCOUPON_SIZE_CHANGE END #####################################"
        puts "####### pCOUPON_SIZE_CHANGE END #####################################"

}



################################################################################
## Procedure    : pTARGET_TOUCH_CHK
## ����         : Target �� Guide�� Touch Check
## Input        :
## Return       :

proc pTARGET_TOUCH_CHK { layer_info_path genesis_ver } {
        puts "####### pTARGET_TOUCH_CHK #######################################"

	# Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        set layer_list ""

        foreach layer "$out_all $in_all" {
                set att_list ""
                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES,units=mm
                foreach line $::data {
                        if {[lindex $line 0] == "#T"} {continue}
                        if {[lsearch $line *string*] != -1} {
                                lappend att_list [lindex [regsub {\=} [lsearch -inline [regsub {\,} [lindex [regsub -all {\;} $line " "] end] " "] *string*] " "] end]
                        }
                }

                set att_list [lsort -uniq $att_list]

                if {$genesis_ver < 10} {
                        foreach att $att_list {
                                if {[regexp {dummy|auto_peelar|film_center} $att]} {continue}

                                COM display_layer,name=$layer,display=yes,number=1
                                COM work_layer,name=$layer
                                COM sel_copy_other,dest=layer_name,target_layer=_$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none

                                COM display_layer,name=_$layer,display=yes,number=2
                                COM work_layer,name=_$layer

                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att
                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                COM affected_layer,name=_$layer,mode=single,affected=yes

                                COM work_layer,name=$layer
                                COM filter_reset,filter_name=popup
                                COM filter_set,filter_name=popup,update_popup=no,feat_types=line\;pad\;surface\;arc
                                COM sel_ref_feat,layers=,use=select,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_peelar
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=film_center

                                COM filter_atr_logic,filter_name=popup,logic=or


#                                if {[regexp {cnc_align_coupon} $att]} {
#                                        COM filter_atr_logic,filter_name=popup,logic=or
#                                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon*
#                                }
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect
                                COM get_select_count

                                if {$::COMANS} {
                                        COM sel_copy_other,dest=layer_name,target_layer=touch_$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                                        lappend layer_list touch_${layer}
                                }
                                DEL_LAYER _$layer
                        }
                } else {
                        foreach att $att_list {
                                if {[regexp {dummy|auto_peelar|film_center} $att]} {continue}

                                AFFECT $layer

                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att
                                COM filter_set,filter_name=popup,update_popup=no,feat_types=line\;pad\;surface\;arc
                                COM filter_area_end,layer=,filter_name=popup,operation=select

                                COM filter_reset,filter_name=popup
                                COM filter_set,filter_name=popup,update_popup=no,feat_types=line\;pad\;surface\;arc

                                COM sel_ref_feat,layers=,use=select,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_peelar
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=film_center

                                COM filter_atr_logic,filter_name=popup,logic=or

#                                if {[regexp {cnc_align_coupon} $att]} {
#                                        COM filter_atr_logic,filter_name=popup,logic=or
#                                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon*
#                                }
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect
                                COM get_select_count

                                if {$::COMANS} {
                                        COM sel_copy_other,dest=layer_name,target_layer=touch_$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                                        lappend layer_list touch_${layer}
                                }
                        }
                }


                #puts ==$layer==
                #puts $att_list
        }
        COM negative_data,mode=dim
        set layer_list [lsort -uniq $layer_list]
        PAUSE "Check the Touched Layer ==$layer_list=="
}


################################################################################
## Procedure    : pIMAGE_PRODUCTION_PARAMS_SETTING
## ����         : Image Production Params �⺻ Setting
## Input        :
## Return       :

proc pIMAGE_PRODUCTION_PARAMS_SETTING { layer_info_path } {

        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING START ###################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING START ###################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING START ###################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        STEP_ON $::wJOB $::wPANEL no

        set mirror no
        set swap_axes no_swap
        set xshift 0
        set yshift 0
        set xmirror 0
        set ymirror 0
        set scale_x 100.000
        set scale_y 100.000

        # POSITIVE APPLY
        # e-mask($enig_gold_dfr_c, $enig_gold_dfr_s) Negative -> positive ���� ���� (2019.11.04)
        # ANA($out_plug,$out_plug_c,$out_plug_s,$out_plug_1,$out_plug_2,$in_plug_c_1,$in_plug_s_1,$in_plug_c_2,$in_plug_s_2), �� Mirror �ݴ� ����
        set polarity positive

        # Top Side
        foreach layer "$sr_c $sr_c_1 $sr_c_2 $cu_open_c $enig_gold_dfr_c $h_gold_sr_c $h_gold_sr_2_c $h_gold_dfr_c $etch_back_c $s_etch_back_c $tbs_c $out_plug_s $in_plug_s $in_plug_s_1 $in_plug_s_2 aoi-mask" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror $center_y
                        set resolution_value 0.125
                } else {
                        set xmirror $center_x
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

        }
        # Bottom Side
        foreach layer "$sr_s $sr_s_1 $sr_s_2 $cu_open_s $enig_gold_dfr_s $h_gold_sr_s $h_gold_sr_2_s $h_gold_dfr_s $etch_back_s $s_etch_back_s $tbs_s $out_plug $out_plug_c $out_plug_1 $out_plug_2 $in_plug_c $in_plug_c_1 $in_plug_c_2" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror 0
                        set resolution_value 0.125
                } else {
                        set xmirror 0
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

        }

        # NEGATIVE APPLY
        # s-tent �� Negative ����
        # e-mask($enig_gold_dfr_c, $enig_gold_dfr_s) Negative -> positive ���� ���� (2019.11.04)
        set polarity negative
        # Top Side
        foreach layer "$out_c $in_c $out_c_1 $out_c_2 $cp_c $s_tent_c" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror $center_y
                        set resolution_value 0.125
                } else {
                        set xmirror $center_x
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

        }
        # Bottom Side
        foreach layer "$out_s $in_s $out_s_1 $out_s_2 $cp_s $s_tent_s" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror 0
                        set resolution_value 0.125
                } else {
                        set xmirror 0
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

        }

        # ���� ������ ����
        # POSITIVE APPLY
        # Marking($silk_c,$silk_s),P-MASK($p_mask_c,$p_mask_s)���� Scale �Է�(XY-99.980), Mirror �ݴ� ���� - FILM�� ��û(20180918)
        # M2 (DDPI) Marking($silk_c,$silk_s)���� Scale �Է�(X99.980, Y100.000) (2020.08.25)
        set polarity positive

        set cnt 1

        # Top Side
        foreach layer "$silk_c $p_mask_c" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror 0
                        set resolution_value 0.125
                        set scale_x 99.960
                        set scale_y 100.000
                } else {
                        set xmirror 0
                        set resolution_value 0.25
                        set scale_x 99.980
                        set scale_y 99.980
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # Scale TEXT ����
                # work_size_x_value work_size_y_value
                WORK $layer
                foreach att_text "work_size_x_value work_size_y_value" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x_value"} {
                                                COM sel_change_txt,text=$scale_x
                                        }
                                        if {$att_text == "work_size_y_value"} {
                                                COM sel_change_txt,text=$scale_y
                                        }
                                } else {
                                        PAUSE "ERROR proc pIMAGE_PRODUCTION_PARAMS_SETTING : Top $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }
        }

        # Bottom Side
        foreach layer "$silk_s $p_mask_s" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror $center_y
                        set resolution_value 0.125
                } else {
                        set xmirror $center_x
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # Scale TEXT ����
                # work_size_x_value work_size_y_value
                WORK $layer
                foreach att_text "work_size_x_value work_size_y_value" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x_value"} {
                                                COM sel_change_txt,text=$scale_x
                                        }
                                        if {$att_text == "work_size_y_value"} {
                                                COM sel_change_txt,text=$scale_y
                                        }
                                } else {
                                        PAUSE "ERROR proc pIMAGE_PRODUCTION_PARAMS_SETTING : Btm $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }
        }

        # NEGATIVE APPLY
        # ���� Layer = PSR ����($screen_c,$screen_s)�� ���� Scale �Է�(XY-99.985), Mirror �ݴ� ���� - FILM�� ��û(20180918)
        set polarity negative
        set scale_x 99.985
        set scale_y 99.985
        # Top Side
        foreach layer "$screen_s" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror $center_y
                        set resolution_value 0.125
                } else {
                        set xmirror $center_x
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # Scale TEXT ����
                # work_size_x_value work_size_y_value
                WORK $layer
                foreach att_text "work_size_x_value work_size_y_value" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x_value"} {
                                                COM sel_change_txt,text=$scale_x
                                        }
                                        if {$att_text == "work_size_y_value"} {
                                                COM sel_change_txt,text=$scale_y
                                        }
                                } else {
                                        PAUSE "ERROR proc pIMAGE_PRODUCTION_PARAMS_SETTING : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }
        }


        # Bottom Side
        foreach layer "$screen_c" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                set device_type "EITHER TYPE"

                # DDPI�� Mirror Center X -> Y �� ����
                if {$::wSITE == 3} {
                        set ymirror 0
                        set resolution_value 0.125
                } else {
                        set xmirror 0
                        set resolution_value 0.25
                }
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                # Scale TEXT ����
                # work_size_x_value work_size_y_value
                WORK $layer
                foreach att_text "work_size_x_value work_size_y_value" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x_value"} {
                                                COM sel_change_txt,text=$scale_x
                                        }
                                        if {$att_text == "work_size_y_value"} {
                                                COM sel_change_txt,text=$scale_y
                                        }
                                } else {
                                        PAUSE "ERROR proc pIMAGE_PRODUCTION_PARAMS_SETTING : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }
        }

        CLEAR_RESET

        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING END ###################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING END ###################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING END ###################"


}



################################################################################
## Procedure    : pJOB_SCALE_CHANGE
## ����         : SCALE CHANGE �� Layer Info. Tab Scale �� ��
## Input        :
## Return       :

proc pJOB_SCALE_CHANGE { } {


        puts "####### pJOB_SCALE_CHANGE START !!! ########################"
        puts "####### pJOB_SCALE_CHANGE START !!! ########################"
        puts "####### pJOB_SCALE_CHANGE START !!! ########################"


        set ::wLAYER_INFO [LAYER_TABLELIST get 0 end]
        set ::wSCALE_CHANGE [SCALE_TABLELIST get 0 end]

        LAYER_TABLELIST delete 0 end

        set line_no 0

        foreach line $::wLAYER_INFO  line2 $::wSCALE_CHANGE {
                # delete end line
                if {[lindex $line 0] == ""} {continue}

                set new_info "[lindex $line 0] [lindex $line 1] [lindex $line 2] [lindex $line 3] [lindex $line 4] [lindex $line 5] [lindex $line2 4] [lindex $line2 5]"

                LAYER_TABLELIST insert end $new_info
                incr line_no
        }

        # Line Background change
        for {set no 0} {$no < $line_no } {incr no 2} {
                LAYER_TABLELIST rowconfigure $no -background #cccccc
        }

        update

        set ::wLAYER_INFO [LAYER_TABLELIST get 0 end]

        pJOB_LAYER_INFO_SAVE

        puts "####### pJOB_SCALE_CHANGE END !!! ########################"
        puts "####### pJOB_SCALE_CHANGE END !!! ########################"
        puts "####### pJOB_SCALE_CHANGE END !!! ########################"

}




################################################################################
## Procedure    : pOPPOSITE_SCALE
## ����         : �� Scale ���� & Image Production Params Setting
## Input        :
## Return       :

proc pOPPOSITE_SCALE { layer_info_path {mod 0} } {

        puts "####### pOPPOSITE_SCALE START !!! ########################"
        puts "####### pOPPOSITE_SCALE START !!! ########################"
        puts "####### pOPPOSITE_SCALE START !!! ########################"

        # MOD = 0 : PNL ���� �� Scale ����
        # MOD = 1 : PNL ���� �� Scale Change Mode

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pOPPOSITE_SCALE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pOPPOSITE_SCALE) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pOPPOSITE_SCALE) : $file_path/$layer_info_file_name not found!!!"
                return
        }
        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        ########################################################################

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        # 1�� Sub Drill�� Pin�� Guide Hole �������� ���� START ################################################################
        # Scale Change Mode �� �ƴҰ�� ����, 1�� Sub Drill Scale ������ PNL ����� �ʿ� !!!
        if {$mod != 1} {
                foreach layer "$m_1_top $m_1_btm" {
                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                        if {$gEXISTS == "no"} {continue}

                        # Scale Define
                        set scale_x [lindex [lsearch -inline $drill_info *$layer*] 6]
                        set scale_y [lindex [lsearch -inline $drill_info *$layer*] 7]

                        set opposite_scale_x [expr 1.0/($scale_x*0.01)]
                        set opposite_scale_y [expr 1.0/($scale_y*0.01)]

                        puts "SUB Drill $layer Scale : scale x=$scale_x, scale_y=$scale_y"

                        AFFECT $layer
                        foreach att_text "muraki_pin_guide_1" cnt "6" {
                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                COM get_select_count
                                set sel_cnt $::COMANS
                                if {$sel_cnt} {
                                        if {[regexp "$cnt" $sel_cnt]} {
                                                # �� Scale �ݿ�
                                                COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=$center_x,y_anchor=$center_y,angle=0,x_scale=$opposite_scale_x,y_scale=$opposite_scale_y,x_offset=0,y_offset=0
                                        } else {
                                                PAUSE "ERROR proc pOPPOSITE_SCALE (SUB Drill) : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                                exit 1
                                        }
                                }
                        }
                }
        }
        # 1�� Sub Drill�� Pin�� Guide Hole �������� ���� END ################################################################


        # 1�� Direct Laser Drill�� Target align Hole �������� ���� START ####################################################
        # Scale Change Mode �� �ƴҰ�� ����, 1�� Direct Laser Scale ������ PNL ����� �ʿ� !!!
        if {$mod != 1 && $::wGUIDE_DRL == 1} {
                # �ߺ� Layer �� ���� ���� �������� ���� ����
                set cd_1_top [lsort -uniq $cd_1_top]
                set cd_1_btm [lsort -uniq $cd_1_btm]

                foreach layer "$cd_1_top $cd_1_btm" {
                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                        if {$gEXISTS == "no"} {continue}

                        # Scale Define
                        set scale_x [lindex [lsearch -inline $drill_info *$layer*] 6]
                        set scale_y [lindex [lsearch -inline $drill_info *$layer*] 7]

                        set opposite_scale_x [expr 1.0/($scale_x*0.01)]
                        set opposite_scale_y [expr 1.0/($scale_y*0.01)]

                        puts "SUB Drill $layer Scale : scale x=$scale_x, scale_y=$scale_y"

                        AFFECT $layer
                        foreach att_text "laser_align" cnt "4" {
                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                COM get_select_count
                                set sel_cnt $::COMANS
                                if {$sel_cnt} {
                                        if {[regexp "$cnt" $sel_cnt]} {
                                                # �� Scale �ݿ�
                                                COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=$center_x,y_anchor=$center_y,angle=0,x_scale=$opposite_scale_x,y_scale=$opposite_scale_y,x_offset=0,y_offset=0
                                        } else {
                                                PAUSE "ERROR proc pOPPOSITE_SCALE (SUB Drill) : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                                exit 1
                                        }
                                }
                        }
                }
        }
        # 1�� Direct Laser Drill�� Target align Hole �������� ���� END ####################################################


        # 1�� Coin Guide Drill�� Pin�� Guide Hole & 1�� �뱤 Guide Hole �������� ���� START ################################################################
        # Scale Change Mode �� �ƴҰ�� �ǿ� ����, 1�� Coin Guide Drill Scale ������ PNL ����� �ʿ� !!!
        if {$mod != 1} {
                foreach layer "$gc_1_top $gc_1_btm" {
                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                        if {$gEXISTS == "no"} {continue}

                        # Scale Define
                        set scale_x [lindex [lsearch -inline $drill_info *$layer*] 6]
                        set scale_y [lindex [lsearch -inline $drill_info *$layer*] 7]

                        set opposite_scale_x [expr 1.0/($scale_x*0.01)]
                        set opposite_scale_y [expr 1.0/($scale_y*0.01)]

                        puts "SUB Drill $layer Scale : scale x=$scale_x, scale_y=$scale_y"

                        AFFECT $layer
                        foreach att_text "muraki_pin_guide_1 auto_expo_in_1" cnt "6 5" {
                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                                COM filter_area_end,layer=,filter_name=popup,operation=select
                                COM get_select_count
                                set sel_cnt $::COMANS
                                if {$sel_cnt} {
                                        if {[regexp "$cnt" $sel_cnt]} {
                                                # �� Scale �ݿ�
                                                #PAUSE "$layer $att_text $cnt $scale_x $scale_y"
                                                COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=$center_x,y_anchor=$center_y,angle=0,x_scale=$opposite_scale_x,y_scale=$opposite_scale_y,x_offset=0,y_offset=0
                                        } else {
                                                PAUSE "ERROR proc pOPPOSITE_SCALE (SUB Drill) : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                                exit 1
                                        }
                                }
                        }
                }
        }
        # 1�� Sub Drill�� Pin�� Guide Hole �������� ���� END ################################################################

        # D/F Order 2 ���� ���� Pin�� ���� ���̵� .out_scale ���� (2020.07.24) START ########################################
        # Scale Change Mode �� �ƴҰ�� �ǿ� ����, 1�� Coin Guide Drill Scale ������ PNL ����� �ʿ� !!!
        if {$::wOUT_SCALE == 1} {
                if {$mod != 1} {
                        foreach layer "$df_2_no $df_2_yes $df_3_no $df_3_yes $df_4_no $df_4_yes $df_5_no $df_5_yes $df_6_no $df_6_yes $df_7_no $df_7_yes $df_8_no $df_8_yes $df_9_no $df_9_yes $df_10_no $df_10_yes $out_all_1 $out_all_2 $cp_2_no $cp_2_yes $cp_3_no $cp_3_yes $cp_4_no $cp_4_yes $cp_5_no $cp_5_yes $cp_6_no $cp_6_yes $cp_7_no $cp_7_yes $cp_8_no $cp_8_yes $cp_9_no $cp_9_yes $cp_10_no $cp_10_yes" {
                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                                if {$gEXISTS == "no"} {continue}

                                # Scale Define
                                #set scale_x [lindex [lsearch -inline $layer_info *$layer*] 6]
                                #set scale_y [lindex [lsearch -inline $layer_info *$layer*] 7]

                                #set opposite_scale_x [expr 1.0/($scale_x*0.01)]
                                #set opposite_scale_y [expr 1.0/($scale_y*0.01)]

                                #puts "SUB Drill $layer Scale : scale x=$scale_x, scale_y=$scale_y"

                                AFFECT $layer
                                foreach att_text "muraki_pin_guide_1 muraki_pin_guide_2 muraki_pin_guide_3 muraki_pin_guide_4 muraki_pin_guide_5 muraki_pin_guide_6 muraki_pin_guide_7 muraki_pin_guide_8 muraki_pin_guide_9 muraki_pin_guide_10" {
                                        COM filter_reset,filter_name=popup
                                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                                        COM filter_area_end,layer=,filter_name=popup,operation=select
                                        COM get_select_count
                                        if {$::COMANS} {
                                                COM cur_atr_reset
                                                COM cur_atr_set,attribute=.out_scale
                                                COM sel_change_atr,mode=add
                                        }
                                }
                        }
                }
        }
        # D/F Order 2 ���� ���� Pin�� ���� ���̵� .out_scale ���� (2020.07.24) END ########################################

        # AUTO Step Check
        DO_INFO -t step -e $::wJOB/auto -d exists,units=mm
        if {$gEXISTS == "yes"} {
                DO_INFO -t step -e $::wJOB/auto -d PROF_LIMITS,units=mm
                set auto_center_x [expr $gPROF_LIMITSxmax / 2.0]
                set auto_center_y [expr $gPROF_LIMITSymax / 2.0]
                set AUTO_PANEL auto
                set auto_step 1
        } else {
                set auto_step 0
        }


        foreach layer "$in_all $out_all $cp_all" {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                # CP-Layer Scale Defince
                if {[regexp {cp} $layer]} {
                        # CP Layer�� Matching �Ǵ� ���� Layer �̸� ����
                        set _layer [lindex [regsub {\-} [regsub {cp} $layer "l"] " "] 0]
                        # CP Layer Order ����
                        set cp_order [lindex [regsub {\-} [regsub {cp} $layer "l"] " "] 1]
                        set app_layer ""
                        foreach line $layer_info {
                                # CP Layer �� ���� ���� Layer List ����
                                if {$cp_order == [lindex $line 3]} {
                                        lappend app_layer [lindex $line 0]
                                }
                        }
                        puts "cp_order=$cp_order $app_layer"
                        #cp_order=3 l13 l14

                        # CP Layer�� ���� Layer Name Mirror ���� Ȯ��
                        if {[lindex [lsearch -inline $layer_info *$_layer*] 2] == "no"} {
                                # Mirror=no �� ��� �������� ����, CP Layer ���� ū ���� ���� Layer Scale ����
                                set mirror no
                                set polarity negative
                                set app_layer [lsort -dict -increasing $app_layer]
                                puts "$layer INCR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
                                # cp02-3 INCR=no l13 l14
                                foreach line2 $app_layer {
                                        if {[regsub {l} $line2 ""] > [regsub {l} $_layer ""]} {
                                                set s_layer $line2
                                                puts $s_layer
                                                # $mod = ������ �������
                                                if {$mod} {
                                                        set change_scale_x [expr [lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 4]/[lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 1] * 100.0]
                                                        set change_scale_y [expr [lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 5]/[lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 2] * 100.0]
                                                        set scale_x [lindex [lsearch -inline $layer_info *$s_layer*] 6]
                                                        set scale_y [lindex [lsearch -inline $layer_info *$s_layer*] 7]
                                                } else {
                                                        set scale_x [lindex [lsearch -inline $layer_info *$s_layer*] 6]
                                                        set scale_y [lindex [lsearch -inline $layer_info *$s_layer*] 7]
                                                }
                                                puts "CP=$s_layer $scale_x $scale_y"
                                                # CP=l13 100.2 100.1
                                                break
                                        } else {
                                                continue
                                        }
                                }

                        } else {
                                # Mirror=yes �� ��� �������� ����, CP Layer ���� ���� ���� ū Layer Scale ����
                                set mirror yes
                                set polarity negative
                                set app_layer [lsort -dict -decreasing $app_layer]
                                puts "$layer DECR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
                                # cp25-3 DECR=yes l14 l13
                                foreach line2 $app_layer {
                                        if {[regsub {l} $line2 ""] < [regsub {l} $_layer ""]} {
                                                set s_layer $line2
                                                #PAUSE $s_layer
                                                # $mod = ������ �������
                                                if {$mod} {
                                                        set change_scale_x [expr [lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 4]/[lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 1] * 100.0]
                                                        set change_scale_y [expr [lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 5]/[lindex [lsearch -inline $::wSCALE_CHANGE *$s_layer*] 2] * 100.0]
                                                        set scale_x [lindex [lsearch -inline $layer_info *$s_layer*] 6]
                                                        set scale_y [lindex [lsearch -inline $layer_info *$s_layer*] 7]
                                                } else {
                                                        set scale_x [lindex [lsearch -inline $layer_info *$s_layer*] 6]
                                                        set scale_y [lindex [lsearch -inline $layer_info *$s_layer*] 7]
                                                }
                                                puts "CP=$s_layer $scale_x $scale_y"
                                                # CP=l13 100.2 100.1
                                                break
                                        } else {
                                                continue
                                        }
                                }

                        }
                # Regular Layer Scale Defince
                } else {
                        #set _layer [lindex [regsub {\-} [regsub {cp} $layer "l"] " "] 0]
                        set _layer $layer

                        # Mirror ���� Ȯ��
                        if {[lindex [lsearch -inline $layer_info *$_layer*] 2] == "no"} {
                                set mirror no
                        } else {
                                set mirror yes
                        }

                        # Polarity ���� Ȯ��
                        if {[lindex [lsearch -inline $layer_info *$_layer*] 1] == "nega"} {
                                set polarity negative
                        } else {
                                set polarity positive
                        }


                        # Scale ����
                        # $mod = ������ �������
                        if {$mod} {
                                set change_scale_x [expr [lindex [lsearch -inline $::wSCALE_CHANGE *$_layer*] 4]/[lindex [lsearch -inline $::wSCALE_CHANGE *$_layer*] 1] * 100.0]
                                set change_scale_y [expr [lindex [lsearch -inline $::wSCALE_CHANGE *$_layer*] 5]/[lindex [lsearch -inline $::wSCALE_CHANGE *$_layer*] 2] * 100.0]
                                set scale_x [lindex [lsearch -inline $layer_info *$_layer*] 6]
                                set scale_y [lindex [lsearch -inline $layer_info *$_layer*] 7]
                        } else {
                                set scale_x [lindex [lsearch -inline $layer_info *$_layer*] 6]
                                set scale_y [lindex [lsearch -inline $layer_info *$_layer*] 7]
                        }
                        puts "$_layer SCALE = $scale_x X $scale_y"
                        # l26 SCALE = 100.2 X 100.3
                }

                puts "CHECK : LAYER=$layer SCALE_X=$scale_x SCALE_Y=$scale_y $polarity $mirror"
                # CHECK : LAYER=l26 SCALE_X=100.2 SCALE_Y=100.1 negative yes
                # CHECK : LAYER=cp02-3 SCALE_X=100.2 SCALE_Y=100.1 negative no
                # CHECK : LAYER=cp25-3 SCALE_X=100.2 SCALE_Y=100.1 negative yes

                # �� Scale ���� �� ����
                # $mod = ������ �������
                if {$mod} {
                        set opposite_scale_x [expr 1.0/($change_scale_x*0.01)]
                        set opposite_scale_y [expr 1.0/($change_scale_y*0.01)]
                } else {
                        set opposite_scale_x [expr 1.0/($scale_x*0.01)]
                        set opposite_scale_y [expr 1.0/($scale_y*0.01)]
                }

                puts "$layer APPLY = $opposite_scale_x X $opposite_scale_y $polarity $mirror"
                # cp02-3 APPLY = 1.0 X 1.0

                AFFECT $layer
                # Scale Change mod �̰� ������ ���� ���� ���� ��� ���� ���� ���� ���� Layer�� �Ѿ
                if {$mod == 1 && $opposite_scale_x == 1.0 && $opposite_scale_y == 1.0 && $::wAUTO_STEP != 1} {
                        puts "$layer = opposite_scale_x $opposite_scale_x == opposite_scale_y $opposite_scale_y == Scale Chagne SKIP!!"
                        # l25 = opposite_scale_x 1.0 == opposite_scale_y 1.0 == Scale Chagne SKIP!!
                        continue
                }

                #Image Production Params Setting START #########################
                set swap_axes no_swap
                set xshift 0
                set yshift 0
                set xmirror 0
                set ymirror 0

                # AUTO step ���� ����
                set auto_xmirror 0
                set auto_ymirror 0

                # Mirror Check
                if {$mirror == "no"} {
                        # Top Side

                        set device_type "EITHER TYPE"

                        # DDPI�� Mirror Center X -> Y �� ����
                        if {$::wSITE == 3} {
                                set ymirror $center_y
                                set resolution_value 0.125

                                # AUTO step Center �� ����
                                if {$auto_step == 1} {
                                        set auto_ymirror $auto_center_y
                                }
                        } else {
                                set xmirror $center_x
                                set resolution_value 0.25

                                # AUTO step Center �� ����
                                if {$auto_step == 1} {
                                        set auto_xmirror $auto_center_x
                                }
                        }
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                        # Scale Change Mod �� ��� AUTO Step lpd ���� Scale �� ����
                        if {$mod} {
                                if {$auto_step == 1} {
                                        COM "image_set_elpd2,job=$::wJOB,step=$AUTO_PANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$auto_xmirror,ymirror=$auto_ymirror,xcenter=$auto_center_x,ycenter=$auto_center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"
                                }
                        }

                        # DDPI LP-9 Scale Setting Addition
                        set device_type LP-9
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                        # Scale Change Mod �� ��� AUTO Step lpd ���� Scale �� ����
                        if {$mod} {
                                if {$auto_step == 1} {
                                        COM "image_set_elpd2,job=$::wJOB,step=$AUTO_PANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$auto_xmirror,ymirror=$auto_ymirror,xcenter=$auto_center_x,ycenter=$auto_center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"
                                }
                        }

                } else {
                        # Bottom Side

                        set device_type "EITHER TYPE"

                        # DDPI�� Mirror Center X -> Y �� ����
                        if {$::wSITE == 3} {
                                set ymirror 0
                                set resolution_value 0.125

                                # AUTO step Center �� ����
                                if {$auto_step == 1} {
                                        set auto_ymirror $auto_center_y
                                }
                        } else {
                                set xmirror 0
                                set resolution_value 0.25

                                # AUTO step Center �� ����
                                if {$auto_step == 1} {
                                        set auto_xmirror $auto_center_x
                                }
                        }
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                        # Scale Change Mod �� ��� AUTO Step lpd ���� Scale �� ����
                        if {$mod} {
                               if {$auto_step == 1} {
                                        COM "image_set_elpd2,job=$::wJOB,step=$AUTO_PANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$auto_xmirror,ymirror=$auto_ymirror,xcenter=$auto_center_x,ycenter=$auto_center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"
                                }
                        }

                        # DDPI LP-9 Scale Setting Addition
                        set device_type LP-9
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                        # Scale Change Mod �� ��� AUTO Step lpd ���� Scale �� ����
                        if {$mod} {
                               if {$auto_step == 1} {
                                        COM "image_set_elpd2,job=$::wJOB,step=$AUTO_PANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$auto_xmirror,ymirror=$auto_ymirror,xcenter=$auto_center_x,ycenter=$auto_center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"
                                }
                        }

                }

                #Image Production Params Setting END ###########################


                # Scale TEXT ����
                # work_size_x_value work_size_y_value
                set cnt 1
                foreach att_text "work_size_x_value work_size_y_value" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x_value"} {
                                                COM sel_change_txt,text=$scale_x
                                        }
                                        if {$att_text == "work_size_y_value"} {
                                                COM sel_change_txt,text=$scale_y
                                        }
                                } else {
                                        PAUSE "ERROR proc pOPPOSITE_SCALE : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }

                # work size TEXT ����
                # work_size_x work_size_y
                set cnt 1
                foreach att_text "work_size_x work_size_y" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x"} {
                                                set text "$work_size_x ="
                                                COM sel_change_txt,text=$text
                                        }
                                        if {$att_text == "work_size_y"} {
                                                set text "$work_size_y ="
                                                COM sel_change_txt,text=$text
                                        }
                                } else {
                                        PAUSE "ERROR proc pOPPOSITE_SCALE : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }
                #PAUSE "$layer Scale Chagne GO Complete!!"


#                # Scale Change mod �̰� ������ ���� ���� ���� ��� ���� ���� ���� ���� Layer�� �Ѿ
#                if {$mod == 1 && $opposite_scale_x == 1.0 && $opposite_scale_y == 1.0} {
#                        puts "$layer = opposite_scale_x $opposite_scale_x == opposite_scale_y $opposite_scale_y == Scale Chagne SKIP!!"
#                        # l25 = opposite_scale_x 1.0 == opposite_scale_y 1.0 == Scale Chagne SKIP!!
#                        continue
#                }


                # .out_scale �Ӽ� ����� Symbol Check
                set att_check ""
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.out_scale
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                        foreach line $::data {
                                if {[lsearch $line *string*] != -1} {
                                        lappend att_check [lindex [regsub {\=} [lsearch -inline [regsub {\,} [lindex [regsub -all {\;} $line " "] end] " "] *string*] " "] end]
                                }
                        }
                }
                set att_check [lsort -unique $att_check]

                # ������ �ݿ� - (2018.11.06 - DDPI Guide �߰� = ddpi_rbm_guide_align ddpi_auto_drill_guide)
                # ������ �ݿ� - (2018.12.04 - ���� RBM Guide �߰� = rbm_opti rbm_punching)

                # 1�� Drill �� SCALE ���� ��/�� (2019.02.13)
                #   -> Guide Drill[type = g] (���� Hole X) - Drill (Pin Guide 100x100), Image (�뱤 Guide ��������, Pin Guide ��������)
                #   -> 1�� Drill  [type = m] (���� Hole O) - Drill (Pin Guide ��������), Image (�뱤 Guide 100x100, Pin Guide ��������)

                # layer_align_coupon_multi = 8|12|16|20|24|40,   muraki_pin_guide* = 8|12|20|24|26|28|34|40,
                # bonding_align_square = 2|3|5|9|11,   bonding_align_round = 2|3|5|7|8,   auto_expo_in_1 = 4|5|12|15,
                # ddpi_rbm_guide_align = 32,   rbm_opti = 4|6,   rbm_punching = 6|12,    ddpi_auto_drill_guide = 12|20,    ddpi_rivet_guide = 4|12|32
                # bonding2_align_square = 2|3|5,
                foreach att_text "layer_align_coupon_multi muraki_pin_guide* bonding_align_square bonding_align_round auto_expo_in_1 ddpi_rbm_guide_align rbm_opti rbm_punching ddpi_auto_drill_guide ddpi_rivet_guide bonding2_align_square bonding2_align_round" cnt "8|12|16|20|24|40 8|12|16|20|24|26|28|34|40 2|3|5|9|11 2|3|5|7|8 4|5|12|15 32 4|6 6|12 12|20 4|12|32 2|3|5" {

                        # Filter Reset
                        COM filter_reset,filter_name=popup
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                        # Guide Drill �� �ƴҰ�� 1�� IVH �뱤 Guide �������� ������
                        if {$::wGUIDE_DRL != 1} {
                                if {$att_text == "auto_expo_in_1"} {
                                        continue
                                }
                        }

                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {[regexp "$cnt" $sel_cnt]} {
                                        # .out_scale ���� Symbol �� ��Scale �̹ݿ�
                                        if {[regexp $att_text $att_check]} {
                                                continue
                                        }
                                        # �� Scale �ݿ�
                                        COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=$center_x,y_anchor=$center_y,angle=0,x_scale=$opposite_scale_x,y_scale=$opposite_scale_y,x_offset=0,y_offset=0
                                } else {
                                        PAUSE "ERROR proc pOPPOSITE_SCALE : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit 1
                                }
                        }
                }
        }
        CLEAR_RESET

        puts "####### pOPPOSITE_SCALE END !!! ########################"
        puts "####### pOPPOSITE_SCALE END !!! ########################"
        puts "####### pOPPOSITE_SCALE END !!! ########################"
}


################################################################################
## Procedure    : pPNL_DIV_HOLE_COPY
## ����         : 2���� Drill PNL �ܰ� Ȧ Copy
## Input        :
## Return       :

proc pPNL_DIV_HOLE_COPY { } {
        puts "####### pPNL_DIV_HOLE_COPY START !!! ########################"
        puts "####### pPNL_DIV_HOLE_COPY START !!! ########################"
        puts "####### pPNL_DIV_HOLE_COPY START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pPNL_DIV_HOLE_COPY) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pPNL_DIV_HOLE_COPY) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # trim ���� ����
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # 2���� PNL Check
        if {$work_y < 740} {
                return
        }

        # PROFILE
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        # set gPROF_LIMITSxmin
        # set gPROF_LIMITSymin
        # set gPROF_LIMITSxmax
        # set gPROF_LIMITSymax

        CLEAR_RESET

        # 2���� Drill "-t -b -f -r layer"
        foreach line $drill_info {
                #d01 01 08 3 ccl none 100.000 100.000 top m 150 no
                #d0108c 01 08 3 ccl none 100.000 100.000 top cap 160 no
                #d0104s 01 04 2 ccl none 100.000 100.000 top m 170 no
                #d0508s 05 08 2 ccl none 100.000 100.000 top m 180 no

                if {$line == "" } {continue}
                set layer_org [lindex $line 0]
                set layer_t [lindex $line 0]\-t
                set layer_b [lindex $line 0]\-b
                set layer_f [lindex $line 0]\-f
                set layer_r [lindex $line 0]\-r
                set layer_list [list $layer_t $layer_b $layer_f $layer_r]

                # 2���� Layer �� Data Copy
                foreach layer $layer_list {
                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm

                        # r10 ���� ��� ����
                        if {$gEXISTS == "yes"} {

                                AFFECT $layer
                                COM filter_reset,filter_name=popup
                                COM filter_set,filter_name=popup,update_popup=no,exclude_syms=r10
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                                COM get_select_count

                                if {$::COMANS} {
                                        COM sel_delete
                                }
                        } else {
                                continue
                        }

                        AFFECT $layer_org
                        #PAUSE "$layer_org == $layer"

                        COM filter_reset,filter_name=popup
                        COM sel_clear_feat
                        COM filter_area_strt
                        COM filter_area_xy,x=0,y=[expr $gPROF_LIMITSymax / 2.0]
                        COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=yes
                        COM get_select_count
                        if {$::COMANS} {
                                if {[regexp {\-t} $layer] || [regexp {\-r} $layer]} {

                                        # 2���� �帱 Target Drill Copy ���� (r10, r3175.36) ����
                                        # 2�� Drill Stacking Hole ���� Size ���� (r3175.36 -> r3150.46) ���� (2020.07.13)
                                        COM filter_reset,filter_name=popup
                                        #COM filter_set,filter_name=popup,update_popup=no,include_syms=r10\;r3175.36
                                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r10\;r3150.46
                                        COM filter_area_strt
                                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                        COM get_select_count
                                        if {$::COMANS} {
                                                COM sel_copy_other,dest=layer_name,target_layer=$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                                        }
                                } elseif {[regexp {\-b} $layer] || [regexp {\-f} $layer]} {

                                        COM sel_reverse

                                        # 2���� �帱 Target Drill Copy ���� (r10, r3175.36) ����
                                        # 2�� Drill Stacking Hole ���� Size ���� (r3175.36 -> r3150.46) ���� (2020.07.13)
                                        COM filter_reset,filter_name=popup
                                        #COM filter_set,filter_name=popup,update_popup=no,include_syms=r10\;r3175.36
                                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r10\;r3150.46
                                        COM filter_area_strt
                                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                        COM get_select_count
                                        if {$::COMANS} {
                                                COM sel_copy_other,dest=layer_name,target_layer=$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                                        }
                                }
                        }
                }
        }


#        # Schmoll 2���� Drill "-xt -xb layer"
#        foreach line $drill_info {
#                #d01 01 08 3 ccl none 100.000 100.000 top m 150 no
#                #d0108c 01 08 3 ccl none 100.000 100.000 top cap 160 no
#                #d0104s 01 04 2 ccl none 100.000 100.000 top m 170 no
#                #d0508s 05 08 2 ccl none 100.000 100.000 top m 180 no
#
#                if {$line == "" } {continue}
#                set layer_org [lindex $line 0]
#                set layer_x [lindex $line 0]\-x
#                set layer_xt [lindex $line 0]\-xt
#                set layer_xb [lindex $line 0]\-xb
#                set layer_list [list $layer_xt $layer_xb]
#
#                # 2���� Layer �� Data Copy
#                foreach layer $layer_list {
#                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
#
#                        if {$gEXISTS == "yes"} {
#                                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer_x -d EXISTS,units=mm
#                                if {$gEXISTS == "yes"} {
#                                        AFFECT $layer_x
#                                } else {
#                                        continue
#                                }
#                        } else {
#                                continue
#                        }
#
#                        #PAUSE "$layer_x == $layer"
#
#                        COM filter_reset,filter_name=popup
#                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r22
#                        COM sel_clear_feat
#                        COM filter_area_strt
#                        COM filter_area_xy,x=0,y=[expr $gPROF_LIMITSymax * 3 / 4.0]
#                        COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
#                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=yes
#                        COM filter_area_strt
#                        COM filter_area_xy,x=0,y=[expr $gPROF_LIMITSymax * 1 / 4.0]
#                        COM filter_area_xy,x=$gPROF_LIMITSxmax,y=[expr $gPROF_LIMITSymax * 2 / 4.0]
#                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=yes
#                        COM get_select_count
#                        if {$::COMANS} {
#                                if {[regexp {\-xt} $layer]} {
#
#                                        # 2���� �帱 Align Hole ��ǥ Copy - (r10) ����
#                                        COM filter_reset,filter_name=popup
#                                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r10
#                                        COM filter_area_strt
#                                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
#                                        COM get_select_count
#
#                                        if {$::COMANS} {
#                                                COM sel_copy_other,dest=layer_name,target_layer=$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
#                                        }
#
#                                } elseif {[regexp {\-xb} $layer]} {
#
#                                        COM sel_reverse
#
#                                        # 2���� �帱 Align Hole ��ǥ Copy - (r10) ����
#                                        COM filter_reset,filter_name=popup
#                                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r10\;r3175.36
#                                        COM filter_area_strt
#                                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
#                                        COM get_select_count
#
#                                        if {$::COMANS} {
#                                                COM sel_copy_other,dest=layer_name,target_layer=$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
#                                        }
#                                }
#                        }
#                }
#        }


        puts "####### pPNL_DIV_HOLE_COPY END !!! ########################"
        puts "####### pPNL_DIV_HOLE_COPY END !!! ########################"
        puts "####### pPNL_DIV_HOLE_COPY END !!! ########################"

        return
}


################################################################################
## Procedure    : pBIT_CHECK_HOLE
## ����         : Bit Check Hole ���� Layer ���� �� �Լ� CALL
## Input        :
## Return       :

proc pBIT_CHECK_HOLE {chk} {
        puts "####### pBIT_CHECK_HOLE ##########################################"

        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path
        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }


        # Trim Info Load ######################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set trim_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set trim_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists trim_file_path]} {
                set f [open $trim_file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $trim_file_path/$trim_info_file_name not found!!!"
                return
        }

        #trim ���� ����
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # Drill Info�� ���ǵ� ��ü Drill Layer�� ���Ͽ� �ڵ����� Bit Check Hole ����
        if {$chk == "ALL"} {

                set layer_check all

                Scrolledlistbox1 delete 0 end
                DO_INFO -t matrix -e $::wJOB/matrix
                foreach type $gROWlayer_type name $gROWname context $gROWcontext {
                        if {$type == "drill" && [regexp {^d} $name] && $context == "board"} {
                                Scrolledlistbox1 insert end $name
                        } else {
                                continue
                        }
                }
                set all_drill [Scrolledlistbox1 get 0 end]

                foreach drl_layer $all_drill {

                        if {$drl_layer == ""} {continue}

                        # Back/Depth/Guide Drill �� SKIP
                        # Step Drill Skip �߰� - (2020.03.05)
                        if {[regexp {^d} $drl_layer] && [regexp {[0-9][b|d|g|t]} $drl_layer]} {
                                puts "Back/Depth Drill : Bit Check Hole Insert SKIP!"
                                continue
                        }

                        # X-Ray Drill �� SKIP (2019.09.28)
                        if {[regexp {^d} $drl_layer] && [regexp {\-x} $drl_layer]} {
                                puts "X-Ray Drill : Bit Check Hole Insert SKIP!"
                                continue
                        }

                        foreach line $drill_info {
                                #d01 01 08 3 ccl none 100.000 100.000 top m 150 no
                                #d0108c 01 08 3 ccl none 100.000 100.0#00 top cap 160 no
                                #d0104s 01 04 2 ccl none 100.000 100.000 top m 170 no
                                #d0508s 05 08 2 ccl none 100.000 100.000 top m 180 no

                                if {$line == ""} {continue}

                                # Main, Cap, IVH, �ĵ帱
                                if {$drl_layer == [lindex $line 0]} {

                                        set layer $drl_layer
                                        set order [lindex $line 3]
                                        set type [lindex $line 9]
                                        puts "${::wNO_OF_LAYER}L=[lindex $line 0]==$type==$::wBIT_SHIFT"
                                        pBIT_CHECK_HOLE_SUB1 $layer $order $type
                                        lappend layer_check $layer

                                # Main / AM / Cap / IVH Drill 2���ҿ�
                                } elseif {$drl_layer == "[lindex $line 0]\-t" || $drl_layer == "[lindex $line 0]\-b"} {

                                        set layer $drl_layer
                                        set order [lindex $line 3]

                                        if {[regexp {^d01\-t$|^d001\-t$} $layer]} {
                                                set type div_top_main
                                        } elseif {[regexp {^d01\-b$|^d001\-b$} $layer]} {
                                                set type div_btm_main
                                        } elseif {[regexp {^d01\-np\-t$|^d001\-np\-t$} $layer]} {
                                                set type div_top_am
                                        } elseif {[regexp {^d01\-np\-b$|^d001\-np\-b$} $layer]} {
                                                set type div_btm_am
                                        } elseif {[regexp {^d[0-9]+c\-t$} $layer]} {
                                                set type div_top_cap
                                        } elseif {[regexp {^d[0-9]+c\-b$} $layer]} {
                                                set type div_btm_cap
                                        } elseif {[regexp {^d[0-9]+[m|s]\-t$} $layer]} {
                                                set type div_top_ivh
                                        } elseif {[regexp {^d[0-9]+[m|s]\-b$} $layer]} {
                                                set type div_btm_ivh
                                        }

                                        puts "${::wNO_OF_LAYER}L=[lindex $line 0]==$type==$::wBIT_SHIFT"
                                        pBIT_CHECK_HOLE_SUB1 $layer $order $type
                                        lappend layer_check $layer

                                # Forward / Reverse Type �߰� (2020.05.30)
                                } elseif {$drl_layer == "[lindex $line 0]\-f" || $drl_layer == "[lindex $line 0]\-r"} {

                                        set layer $drl_layer
                                        set order [lindex $line 3]
                                        #set type [lindex $line 9]

                                        if {[regexp {^d01\-f$|^d001\-f$} $layer]} {
                                                set type div_forward_main
                                        } elseif {[regexp {^d01\-r$|^d001\-r$} $layer]} {
                                                set type div_reverse_main
                                        } elseif {[regexp {^d01\-np\-f$|^d001\-np\-f$} $layer]} {
                                                set type div_forward_am
                                        } elseif {[regexp {^d01\-np\-r$|^d001\-np\-r$} $layer]} {
                                                set type div_reverse_am
                                        } elseif {[regexp {^d[0-9]+c\-f$} $layer]} {
                                                set type div_forward_cap
                                        } elseif {[regexp {^d[0-9]+c\-r$} $layer]} {
                                                set type div_reverse_cap
                                        } elseif {[regexp {^d[0-9]+[m|s]\-f$} $layer]} {
                                                set type div_forward_ivh
                                        } elseif {[regexp {^d[0-9]+[m|s]\-r$} $layer]} {
                                                set type div_reverse_ivh
                                        }


                                        puts "${::wNO_OF_LAYER}L=[lindex $line 0]==$type==$::wBIT_SHIFT"
                                        pBIT_CHECK_HOLE_SUB1 $layer $order $type
                                        lappend layer_check $layer
                                }
                        }
                }

        # ���� Drill Layer�� ���Ͽ� ������ Bit Check Hole ����
        } elseif {$chk == "MANUAL"} {
                set layer_check 0
                foreach line $drill_info {
                        #d01 01 08 3 ccl none 100.000 100.000 top m 150 no
                        #d0108c 01 08 3 ccl none 100.000 100.0#00 top cap 160 no
                        #d0104s 01 04 2 ccl none 100.000 100.000 top m 170 no
                        #d0508s 05 08 2 ccl none 100.000 100.000 top m 180 no

                        if {$line == ""} {continue}

                        # Back/Depth/Guide Drill �� SKIP
                        # Step Drill Skip �߰� - (2020.03.05)
                        if {[regexp {^d} $::wDRILL_LAYER] && [regexp {[0-9][b|d|g|t]} $::wDRILL_LAYER]} {
                                puts "Back/Depth Drill : Bit Check Hole Insert SKIP!"
                                return $layer_check
                        }

                        # X-Ray Drill �� SKIP (2019.09.28)
                        if {[regexp {^d} $::wDRILL_LAYER] && [regexp {\-x} $::wDRILL_LAYER]} {
                                puts "X-Ray Drill : Bit Check Hole Insert SKIP!"
                                return $layer_check
                        }

                        # Main, Cap, IVH, �ĵ帱
                        if {$::wDRILL_LAYER == [lindex $line 0]} {

                                set layer [lindex $line 0]
                                set order [lindex $line 3]
                                set type [lindex $line 9]
                                puts "${::wNO_OF_LAYER}L=[lindex $line 0]==$type==$::wBIT_SHIFT"
                                pBIT_CHECK_HOLE_SUB1 $layer $order $type
                                set layer_check 1

                        # Main / Cap Drill 2���ҿ�
                        } elseif {$::wDRILL_LAYER == "[lindex $line 0]\-t" || $::wDRILL_LAYER == "[lindex $line 0]\-b"} {

                                set layer $::wDRILL_LAYER
                                set order [lindex $line 3]

                                if {[regexp {^d01\-t$|^d001\-t$} $layer]} {
                                        set type div_top_main
                                } elseif {[regexp {^d01\-b$|^d001\-b$} $layer]} {
                                        set type div_btm_main
                                } elseif {[regexp {^d01\-np\-f$|^d001\-np\-t$} $layer]} {
                                        set type div_top_am
                                } elseif {[regexp {^d01\-np\-r$|^d001\-np\-b$} $layer]} {
                                        set type div_btm_am
                                } elseif {[regexp {^d[0-9]+c\-t$} $layer]} {
                                        set type div_top_cap
                                } elseif {[regexp {^d[0-9]+c\-b$} $layer]} {
                                        set type div_btm_cap
                                } elseif {[regexp {^d[0-9]+[m|s]\-t$} $layer]} {
                                        set type div_top_ivh
                                } elseif {[regexp {^d[0-9]+[m|s]\-b$} $layer]} {
                                        set type div_btm_ivh
                                }


                                puts "${::wNO_OF_LAYER}L=[lindex $line 0]==$type==$::wBIT_SHIFT"
                                pBIT_CHECK_HOLE_SUB1 $layer $order $type
                                set layer_check 1

                        # Forward / Reverse Type �߰� (2020.05.30)
                        } elseif {$::wDRILL_LAYER == "[lindex $line 0]\-f" || $::wDRILL_LAYER == "[lindex $line 0]\-r"} {

                                set layer $::wDRILL_LAYER
                                set order [lindex $line 3]
                                #set type [lindex $line 9]

                                if {[regexp {^d01\-f$|^d001\-f$} $layer]} {
                                        set type div_forward_main
                                } elseif {[regexp {^d01\-r$|^d001\-r$} $layer]} {
                                        set type div_reverse_main
                                } elseif {[regexp {^d01\-np\-f$|^d001\-np\-f$} $layer]} {
                                        set type div_forward_am
                                } elseif {[regexp {^d01\-np\-r$|^d001\-np\-r$} $layer]} {
                                        set type div_reverse_am
                                } elseif {[regexp {^d[0-9]+c\-f$} $layer]} {
                                        set type div_forward_cap
                                } elseif {[regexp {^d[0-9]+c\-r$} $layer]} {
                                        set type div_reverse_cap
                                } elseif {[regexp {^d[0-9]+[m|s]\-f$} $layer]} {
                                        set type div_forward_ivh
                                } elseif {[regexp {^d[0-9]+[m|s]\-r$} $layer]} {
                                        set type div_reverse_ivh
                                }

                                puts "${::wNO_OF_LAYER}L=[lindex $line 0]==$type==$::wBIT_SHIFT"
                                pBIT_CHECK_HOLE_SUB1 $layer $order $type
                                set layer_check 1

                        }
                }

        } else {
                tk_messageBox -message "Need to define drill type. Call to MC Kim !!"
        }
        return $layer_check
}



################################################################################
## Procedure    : pBIT_CHECK_HOLE_SUB1
## ����         : Bit Check Hole ����
## Input        :
## Return       :

proc pBIT_CHECK_HOLE_SUB1 {drl_layer order type} {

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pOPPOSITE_SCALE) : $file_path/$layer_info_file_name not found!!!"
                return
        }
        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        ########################################################################


        puts "############# Bit Check Hole insert START!#############"

        # 2���� Check
        if {$type != "div_top_main" || $type != "div_btm_main" || $type != "div_top_cap" || $type != "div_btm_cap" || $type != "div_top_ivh" || $type != "div_btm_ivh" || $type != "div_forward_main" || $type != "div_reverse_main" || $type != "div_forward_cap" || $type != "div_reverse_cap"} {

                # 2������ �ƴҰ�� Type ����
                if {$type == "m" && $::wEND_ORDER == $order} {
                        set type main_drill
                } elseif {$type == "am"} {
                        set type main_drill_2nd
                } elseif {$type == "cap"} {
                        set type cap_drill
                } elseif {$type == "m" && $::wEND_ORDER != $order} {
                        set type ivh_drill
                } else {

                }
        }

        puts "$drl_layer $order $type $::wBIT_SHIFT"

        CLEAR_RESET

        # ���� Bit Check Hole ����
        WORK $drl_layer
        COM filter_reset,filter_name=popup
        COM filter_atr_logic,filter_name=popup,logic=and
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.drill_first_last,text=$drl_layer,option=last
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        # ���� Bit Check Hole ���� Copper Cut ���� ���� ����
        # $type == "main_drill" || $type == "cap_drill" || $type == "main_drill_2nd" || $type == "div_top_main" || $type == "div_btm_main" || $type == "div_top_cap" || $type == "div_btm_cap" || $type == "div_forward_main" || $type == "div_reverse_main" || $type == "div_forward_cap" || $type == "div_reverse_cap"
        if {[regexp {main|cap} $type]} {
                COM affected_layer,mode=all,affected=yes
                COM filter_reset,filter_name=popup
                COM filter_atr_logic,filter_name=popup,logic=and
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$drl_layer,option=last
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.drill_first_last,text=$drl_layer,option=last
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_delete
                }
        }

        # �ӽ� ���̾� ����
        set bit_check_tmp bit_check_tmp
        set bit_check_compare bit_check_compare

        CLEAR_RESET

        #PROFILE
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        #set gPROF_LIMITSxmin
        #set gPROF_LIMITSymin
        #set gPROF_LIMITSxmax
        #set gPROF_LIMITSymax

        #wBIT_SHIFT ���� ���� ���� ��ġ �ڵ� ����
        set t_order [expr $order - 1]

        # 535x740 -f, -r drill Shift value
        set shift_value_fr 5

        if {$type == "main_drill"} {
                set shift_x [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "main_drill_2nd"} {
                set shift_x [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "cap_drill"} {
                set shift_x [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "ivh_drill"} {
                set shift_x [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "div_top_main" || $type == "div_top_ivh"} {
                set shift_x 25
                set shift_y [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymax - $shift_y]
        } elseif {$type == "div_btm_main" || $type == "div_btm_ivh"} {
                set shift_x 25
                set shift_y [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "div_top_cap"} {
                set shift_x 25
                set shift_y [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymax - $shift_y]
        } elseif {$type == "div_btm_cap"} {
                set shift_x 25
                set shift_y [expr $::wBIT_SHIFT + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "div_forward_main" || $type == "div_forward_ivh"} {
                set shift_x [expr $::wBIT_SHIFT + $shift_value_fr + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "div_reverse_main" || $type == "div_reverse_ivh"} {
                set shift_x [expr $::wBIT_SHIFT + $shift_value_fr + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymax - $shift_y]
        } elseif {$type == "div_forward_cap"} {
                set shift_x [expr $::wBIT_SHIFT + $shift_value_fr + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "div_reverse_cap"} {
                set shift_x [expr $::wBIT_SHIFT + $shift_value_fr + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymax - $shift_y]
        } elseif {$type == "div_forward_am"} {
                set shift_x [expr $::wBIT_SHIFT + $shift_value_fr + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmin + $shift_x]
        	set start_y [expr $gPROF_LIMITSymin + $shift_y]
        } elseif {$type == "div_reverse_am"} {
                set shift_x [expr $::wBIT_SHIFT + $shift_value_fr + [subst $[subst trim_${t_order}_x]] / 2.0]
                set shift_y [expr 5 + [subst $[subst trim_${t_order}_y]] / 2.0]
        	set start_x [expr $gPROF_LIMITSxmax - $shift_x]
        	set start_y [expr $gPROF_LIMITSymax - $shift_y]
        }


        # Temp Layer Creat
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$bit_check_tmp -d EXISTS
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$bit_check_tmp
        }

        COM create_layer,layer=$bit_check_tmp,context=misc,type=signal,polarity=positive,ins_layer=

        # Compare Layer Creat
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$bit_check_compare -d EXISTS
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$bit_check_compare
        }
        COM create_layer,layer=$bit_check_compare,context=misc,type=signal,polarity=positive,ins_layer=


        # Compare Data Copy
        # New Panel Attribute Sort
        COM affected_filter,filter=(context=board)
        COM filter_reset,filter_name=popup

        # $type != "main_drill" || $type != "cap_drill" || $type != "main_drill_2nd" || $type != "div_forward_main" | $type != "div_reverse_main" || $type != "div_forward_am" | $type != "div_reverse_am" || $type != "div_forward_cap" | $type != "div_reverse_cap"
        if {[regexp {ivh} $type]} {
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=scale_*
        }

#        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_peelar
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ana_2step_coupon
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_in*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=bonding*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=coupon_line_check
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=d01*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=d001*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=direction*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_auto_drill_guide
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rbm_guide_align
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_manual_expo_guide
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=enig_lack
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=flip_*
#        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=film_setting
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=h_gold_clamp
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=inkjet_marking_align
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=laser_align
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=muraki_pin_guide*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=optec_coupon
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=pattern_clamp
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=psr_jig_align
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=r_trim
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=rbm_*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=sr_auto_expo_out_*
#        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=stackup_coupon
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=stacking*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=text*
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=xray_drill_*

        COM filter_atr_logic,filter_name=popup,logic=or

        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        #puts $::COMANS
        if {$::COMANS} {
                COM sel_copy_other,dest=layer_name,target_layer=$bit_check_compare,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
        }

        # Reset
        COM filter_reset,filter_name=popup
        COM affected_layer,mode=all,affected=no

#        # Drill Data list-up
#        DO_INFO -t layer -e $::wJOB/$::wPANEL/$drl_layer -d SYMS_HIST -o break_sr,units=mm
#
#        #puts $bit_size_list
#        set bit_size_list [lsort -dictionary [lsort -unique $gSYMS_HISTsymbol]]
#        #puts $bit_size_list

        pDRILL_SPEC_INFO_NEW $drl_layer
        set ::wBIT_CHECK_HOLE_INFO_LIST [regsub -all {;} [regsub -all {,} [DRILL_SPEC_INFO_TABLELIST get 0 end] ""] ""]

        # Compare Layer Feature resize : 4mm
        WORK $bit_check_compare

        COM filter_set,filter_name=popup,update_popup=no,polarity=negative
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM sel_polarity,polarity=positive
        COM filter_reset,filter_name=popup
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM sel_resize,size=4000,corner_ctl=no
        COM display_layer,name=$bit_check_compare,display=yes,number=1
        COM display_layer,name=$bit_check_tmp,display=yes,number=3
        COM work_layer,name=$bit_check_tmp

        set value 0
        set t_value 2
        foreach line $::wBIT_CHECK_HOLE_INFO_LIST {

                if {$line == ""} {continue}

                #puts $line
                set apply       [lindex $line 0]
                set fsh         [lindex $line 1]
                set len         [lindex $line 2]
                set p_tol       [lindex $line 3]
                set m_tol       [lindex $line 4]
                set via_type    [lindex $line 5]
                set pth_type    [lindex $line 6]
                set dhs         [lindex $line 7]
                if {$dhs == ""} {
                        tk_messageBox -message "Drill Size = 0um included, Recheck the Hole Size !!!"
                        exit 1
                } else {
                        set size        r[expr $dhs * 1000]
                }
                set drl_flag    [lindex $line 8]
                set drl_cnt     [lindex $line 9]
                set drl_ord     [lindex $line 10]

                # �Ӽ� reset �� Drill �Ӽ� ����
                COM cur_atr_reset
                COM cur_atr_set,attribute=.drill,option=$via_type
                if {$drl_flag != ""} {
                        COM cur_atr_set,attribute=.drill_flag,int=$drl_flag
                }

                if {$fsh == $len} {
                        set chk PAD
                }
                if {$fsh != $len || $dhs == "0.50038"} {
                        set chk SLOT
                }

                if {$dhs == "0.01000"} {
                        continue
                } else {

                        # PITCH 7mm �� ���� - ������ (2018.09.20)
                        if {$dhs <= 3.0} {
                                #set bit_check_pitch 4
                                set bit_check_pitch 7
                        } elseif {$dhs > 3.0 && $dhs <= 5.5} {
                                #set bit_check_pitch 6
                                set bit_check_pitch 7
                        } else {
                                #set bit_check_pitch 8
                                set bit_check_pitch 7
                        }

                        # Bit Check hole insert
                        if { $type == "main_drill" || $type == "cap_drill" || $type == "main_drill_2nd" || $type == "ivh_drill" || $type == "div_forward_main" || $type == "div_forward_am" || $type == "div_forward_cap"} {
                                if { $chk == "PAD" } {
                                        COM add_pad,attributes=yes,x=$start_x,y=[expr $start_y + $value],symbol=$size,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                } elseif { $chk == "SLOT" } {
                                        COM add_line,attributes=yes,xs=$start_x,ys=[expr $start_y + $value],xe=$start_x,ye=[expr $start_y + $value],symbol=$size,polarity=positive,bus_num_lines=0,bus_dist_by=pitch,bus_distance=0,bus_reference=left
                                }
                        } elseif { $type == "div_top_main" || $type == "div_btm_main" || $type == "div_top_ivh" || $type == "div_btm_ivh" } {
                                if { $chk == "PAD" } {
                                        COM add_pad,attributes=yes,x=[expr $start_x - $value],y=$start_y,symbol=$size,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                } elseif { $chk == "SLOT" } {
                                        COM add_line,attributes=yes,xs=[expr $start_x - $value],ys=$start_y,xe=[expr $start_x - $value],ye=$start_y,symbol=$size,polarity=positive,bus_num_lines=0,bus_dist_by=pitch,bus_distance=0,bus_reference=left
                                }
                        } elseif { $type == "div_top_cap" || $type == "div_btm_cap" } {
                                if { $chk == "PAD" } {
                                        COM add_pad,attributes=yes,x=[expr $start_x + $value],y=$start_y,symbol=$size,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                } elseif { $chk == "SLOT" } {
                                        COM add_line,attributes=yes,xs=[expr $start_x + $value],ys=$start_y,xe=[expr $start_x + $value],ye=$start_y,symbol=$size,polarity=positive,bus_num_lines=0,bus_dist_by=pitch,bus_distance=0,bus_reference=left
                                }
                        } elseif { $type == "div_reverse_main" || $type == "div_reverse_am" || $type == "div_reverse_cap" } {
                                if { $chk == "PAD" } {
                                        COM add_pad,attributes=yes,x=$start_x,y=[expr $start_y - $value],symbol=$size,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                } elseif { $chk == "SLOT" } {
                                        COM add_line,attributes=yes,xs=$start_x,ys=[expr $start_y - $value],xe=$start_x,ye=[expr $start_y - $value],symbol=$size,polarity=positive,bus_num_lines=0,bus_dist_by=pitch,bus_distance=0,bus_reference=left
                                }
                        }





                	# Touch data check - $bit_check_compare
                	# if exist touched data then shift bit_check_hole : $t_value
                	while {1} {
                		COM sel_ref_feat,layers=$bit_check_compare,use=filter,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=
                		COM get_select_count

                		if {$::COMANS} {
                	                if { $type == "main_drill" || $type == "cap_drill" || $type == "main_drill_2nd" || $type == "ivh_drill" || $type == "div_forward_main" || $type == "div_forward_am" || $type == "div_forward_cap"} {
                        			COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=0,y_offset=$t_value
                        			set value [expr $value + $t_value]
                                        } elseif { $type == "div_top_main" || $type == "div_btm_main" || $type == "div_top_ivh" || $type == "div_btm_ivh"  } {
                                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=-$t_value,y_offset=0
                        			set value [expr $value + $t_value]
                                        } elseif { $type == "div_top_cap" || $type == "div_btm_cap" } {
                                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$t_value,y_offset=0
                        			set value [expr $value + $t_value]
                                        } elseif { $type == "div_reverse_main" || $type == "div_reverse_am" || $type == "div_reverse_cap" } {
                                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=0,y_offset=-$t_value
                        			set value [expr $value + $t_value]
                                        }
                		} else {
                		        break
                		}
                	}
                	set value [expr $value + $bit_check_pitch]
                }
        }

        # �Ӽ� �ο� : attribute=.drill_first_last,option=last
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM cur_atr_reset
        COM cur_atr_set,attribute=.drill_first_last,option=last
        COM cur_atr_set,attribute=.string,text=$drl_layer,option=last
        COM sel_change_atr,mode=add

        # Copy to Drill layer
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM sel_copy_other,dest=layer_name,target_layer=$drl_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none

        # Main / CAP / AM Drill �� ��� ���� Copper Cut ����
        # $type == "main_drill" || $type == "cap_drill" || $type == "main_drill_2nd" || $type == "div_top_main" || $type == "div_btm_main" || $type == "div_top_cap" || $type == "div_btm_cap" || $type == "div_forward_main" || $type == "div_reverse_main" || $type == "div_forward_cap" || $type == "div_reverse_cap"
        if {[regexp {main|cap|am} $type]} {
                foreach layer $layer_info {
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        if {[lindex $layer 0] == $out_c && [lindex $layer 1] == "nega"} {
                                COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=top)
                                COM sel_copy_other,dest=affected_layers,target_layer=,invert=yes,dx=0,dy=0,size=1000,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        } elseif {[lindex $layer 0] == $out_c && [lindex $layer 1] == "posi"} {
                                COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=top)
                                COM sel_copy_other,dest=affected_layers,target_layer=,invert=no,dx=0,dy=0,size=1000,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        } elseif {[lindex $layer 0] == $out_s && [lindex $layer 1] == "nega"} {
                                COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=bottom)
                                COM sel_copy_other,dest=affected_layers,target_layer=,invert=yes,dx=0,dy=0,size=1000,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        } elseif {[lindex $layer 0] == $out_s && [lindex $layer 1] == "posi"} {
                                COM affected_filter,filter=(type=signal|power_ground|mixed&context=board&side=bottom)
                                COM sel_copy_other,dest=affected_layers,target_layer=,invert=no,dx=0,dy=0,size=1000,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        }
                }
        }

        # ���� ���̾ Hole + 1mm ����
        # $type == "main_drill" || $type == "cap_drill" || $type == "main_drill_2nd" || $type == "div_top_main" || $type == "div_btm_main" || $type == "div_top_cap" || $type == "div_btm_cap" || $type == "div_forward_main" || $type == "div_reverse_main" || $type == "div_forward_cap" || $type == "div_reverse_cap"
        if {[regexp {main|cap} $type]} {
                CLEAR_RESET
                WORK $bit_check_tmp
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                DO_INFO -t layer -e $::wJOB/$::wPANEL/p$::wSTART_LAYER_NO -d EXISTS
                if {$gEXISTS == "yes"} {
                        COM affected_layer,name=p$::wSTART_LAYER_NO,mode=single,affected=yes
                        COM sel_copy_other,dest=affected_layers,target_layer=,invert=no,dx=0,dy=0,size=250,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                }
                CLEAR_RESET
                WORK $bit_check_tmp
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                DO_INFO -t layer -e $::wJOB/$::wPANEL/p$::wEND_LAYER_NO -d EXISTS
                if {$gEXISTS == "yes"} {
                        COM affected_layer,name=p$::wEND_LAYER_NO,mode=single,affected=yes
                        COM sel_copy_other,dest=affected_layers,target_layer=,invert=no,dx=0,dy=0,size=250,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                }
        }

        #Bit Check Hole ���� Ȯ��
        #STEP_ON $::wJOB $::wPANEL no
        #COM display_layer,name=$drl_layer,display=yes,number=2
        #PAUSE "Check The $drl_layer Bit Check Hole Insert Area!"
        #STEP_ON $::wJOB $::wPANEL yes

        # Temp Layer Delete
        COM delete_layer,layer=$bit_check_tmp
        COM delete_layer,layer=$bit_check_compare


        CLEAR_RESET

        # Bit Check Hole PNL ��� Check
        COM affected_filter,filter=(type=drill&context=board)
        COM filter_area_strt
        COM filter_area_xy,x=0,y=0
        COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
        COM sel_reverse
        COM get_select_count
	if {$::COMANS} {
	        PAUSE "Bit Check Hole Area Verify !!!"
	}

        puts "$drl_layer Bit Check Hole insert Success!"

        return 1
}


################################################################################
## Procedure    : pSUB_DRILL_COUPON_MOVE
## ����         : Order 2 Sub Drill�� 2�� �� ��� Counpon ��ġ ����
## Input        :
## Return       :

proc pSUB_DRILL_COUPON_MOVE { layer_info_path } {
        puts "########### pSUB_DRILL_COUPON_MOVE START ########################"
        puts "########### pSUB_DRILL_COUPON_MOVE START ########################"
        puts "########### pSUB_DRILL_COUPON_MOVE START ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSUB_DRILL_COUPON_MOVE) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSUB_DRILL_COUPON_MOVE) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        ## ����� Drill Info
        #d01    01 08 3 ccl none 100.000 100.000 top m   200 no
        #d0108c 01 08 3 ccl none 100.000 100.000 top cap 200 no
        #d0104s 01 04 2 ccl none 100.000 100.000 top m   200 no
        #c0508s 05 08 2 ccl none 100.000 100.000 top m   200 no

        # Order 2 Sub Drill �� 2�� �̻��� ��� Counpon ��ġ ����
        set sub_drl_chk 0
        foreach line $drill_info {

                # Skip Drill Layer Define
                if {![regexp {^d[0-9]+s$} [lindex $line 0]]} {continue}

                if {[lindex $line 3] == 2 && [lindex $line 9] == "m"} {
                        incr sub_drl_chk

                        # Sub Drill�� 2���� ���
                        # Sub A Drill �� Continue
                        if {$sub_drl_chk == 2} {
                                CLEAR_RESET
                                set drl_lay_list ""

                                DO_INFO -t layer -e $::wJOB/$::wPANEL/[lindex $line 0],units=mm
                                # gDRL_START = l03
                                # gDRL_END = l16

                                # Drill Layer ���� ���� ����
                                set [subst [lindex $line 0]] ""

                                #set START [scan [regsub {m|s|l} $gDRL_START ""] %d]
                                #set END [scan [regsub {m|s|l} $gDRL_END ""] %d]
                                set START [scan [lindex $line 1] %d]
                                set END [scan [lindex $line 2] %d]

                                for {set check $START} {$check <= $END} {incr check} {
                                        set layer $check
                                        if {$::wNO_OF_LAYER < 100} {
                                                #Drill Layer ���� ������ �Ͽ� ���� �� Layer List ���� : d01 = l01 l02 l03 l04 l05 l06 l07 l08
                                                lappend [subst [lindex $line 0]] l[format %02d $layer]
                                                # drl_lay_list ��� ������ Drill Layer�� ������ List �� ���� : drl_lay_list = d01 d0108c d0207s
                                                lappend drl_lay_list $[subst [lindex $line 0]]

                                        } elseif {$::wNO_OF_LAYER >= 100} {
                                                #Drill Layer ���� ������ �Ͽ� ���� �� Layer List ���� : d01 = l01 l02 l03 l04 l05 l06 l07 l08
                                                lappend [subst [lindex $line 0]] l[format %03d $layer]
                                                # drl_lay_list ��� ������ Drill Layer�� ������ List �� ���� : drl_lay_list = d01 d0108c d0207s
                                                lappend drl_lay_list $[subst [lindex $line 0]]
                                        }
                                }
                                #puts "[subst [lindex $line 0]] = [subst $[lindex $line 0]]"

                                # �ߺ��� drill layer list ���� �� {,} ����
                                set drl_lay_list [lsort -uniq $drl_lay_list]
                                set drl_lay_list [regsub -all {\{|\}} $drl_lay_list ""]

                                puts $drl_lay_list
                                # puts = $d0104s
                                puts [subst [lindex $drl_lay_list 0]]
                                # puts = l01 l02 l03 l04

                                set sub_drl [regsub {\$} $drl_lay_list ""]
                                #puts "drl = $drl" : drl = d0104s

                                # Drill Layer ���� �� Image Layer Affect ����
                                WORK $sub_drl
                                foreach layer [subst [lindex $drl_lay_list 0]] {
                                        COM affected_layer,name=$layer,mode=single,affected=yes
                                }

                                # �ĵ帱 Check & Shift Value Define
                                if {$::wNO_OF_LAYER >= 100} {
                                        set layer d001-np
                                } else {
                                        set layer d01-np
                                }
                                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS
                                if {$gEXISTS == "yes"} {
                                        # Upper Left : X+4mm, Y-15mm �̵�
                                        set ul_x 4
                                        set ul_y -15
                                        # Upper Right : X-4mm, Y-15mm �̵�
                                        set ur_x -4
                                        set ur_y -15
                                        # Lower Right: X-4mm, Y+15mm �̵�
                                        set lr_x -4
                                        set lr_y 15
                                        # Lower Left : X+4mm, Y+15mm �̵�
                                        set ll_x 4
                                        set ll_y 15
                                } else {
                                        # Upper Left : X+4mm, Y-15mm �̵�
                                        set ul_x 4
                                        set ul_y -10
                                        # Upper Right : X-4mm, Y-15mm �̵�
                                        set ur_x -4
                                        set ur_y -10
                                        # Lower Right: X-4mm, Y+15mm �̵�
                                        set lr_x -4
                                        set lr_y 10
                                        # Lower Left : X+4mm, Y+15mm �̵�
                                        set ll_x 4
                                        set ll_y 10
                                }


                                # ������� �̵� X+4mm, Y-15mm �̵�
                                COM filter_reset,filter_name=popup
                                COM filter_atr_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_ivh2,option=last
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=0,y=$work_size_y
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$ul_x,y_offset=$ul_y

                                # ������� �̵� X-4mm, Y-15mm �̵�
                                COM filter_reset,filter_name=popup
                                COM filter_atr_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_ivh2,option=last
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$work_size_x,y=$work_size_y
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$ur_x,y_offset=$ur_y

                                # �����ϴ� �̵� X-4mm, Y+15mm �̵�
                                COM filter_reset,filter_name=popup
                                COM filter_atr_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_ivh2,option=last
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$work_size_x,y=0
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$lr_x,y_offset=$lr_y

                                # �����ϴ� �̵� X+4mm, Y+15mm �̵�
                                COM filter_reset,filter_name=popup
                                COM filter_atr_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_ivh2,option=last
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=0,y=0
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$ll_x,y_offset=$ll_y


                        # Sub Drill�� 3���� ���
                        } elseif {$sub_drl_chk == 3} {
                                PAUSE "ALARM : Neet to Manual Move SUB-3 Drill CNC Align Coupon!!"
                        }
                }
        }
        puts "########### pSUB_DRILL_COUPON_MOVE END ########################"
        puts "########### pSUB_DRILL_COUPON_MOVE END ########################"
        puts "########### pSUB_DRILL_COUPON_MOVE END ########################"
}


################################################################################
## Procedure    : pETC_EDIT
## ����         : Silk Layer Special Attribute ���� - .out_flag=233 �Ӽ� �߰�
## ����         : Mech. Drill - CNC Align Coupon No Optimize �Ӽ� �߰�
## ����         : Mech. Drill - Flip Drill Coupon No Optimize �Ӽ� �߰�
## ����         : Marking Layer - Flip Drill Coupon No Optimize �Ӽ� �߰�
## ����         : ���� ȸ���� ������ Coupon - POWER GROUND ���� ����, �������� Full PTN���� ���� ����
## ����         : �� Step �� CP Layer Full Copper ����
## ����         : Pattern ������ ��� Bonding Cut Data �ؼ� ����
## ����         : Pattern ������ ��� Stacking & Directing D/F Cut Data �ؼ� ����
## ����         : ���ɿ� ���� Symbol Break
## ����         : ��Ÿ Drill Layer ���� ��ǥ �߰�
## ����         : 2�� PINLESS ��ܺ� Layer Name 20mm �¿�� Shift
## ����         : X-Ray Hole Guide flag=0 �Ӽ� �߰� (Coupon ���� Guide ������ ������)
## ����         : Mask Layer Name 5mm �¿�� Shift (2020.05.18)
## ����         : X-Ray Hole Guide flag=0 �Ӽ� �߰� (Coupon ���� Guide ������ ������)
## Input        :
## Return       :

proc pETC_EDIT {layer_info_path} {
        puts "####### pETC_EDIT START #########################################"
        puts "####### pETC_EDIT START #########################################"
        puts "####### pETC_EDIT START #########################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pETC_EDIT) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pETC_EDIT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        ## ����� Drill Info
        #d0207m 02 07 2 cf btm 100.000 100.000 top m
        #c0102 01 02 3 cf top 100.000 100.000 top c
        #c0807 08 07 3 cf btm 100.000 100.000 btm c"
        #d01 01 08 3 cf both 100.000 100.000 top m


        # Mech. Drill - CNC Align Coupon No Optimize �Ӽ� �߰�
        CLEAR_RESET
        foreach line $drill_info {
                if {[regexp {^c|g$} [lindex $line 0]]} {
                        continue
                } elseif {[lindex $line 0] == ""} {
                        continue
                } else {
                        WORK [lindex $line 0]
                        COM filter_reset,filter_name=popup
                        # r450.09 -> r450.47 ���� - (2019.02.21 - by ������)
                        #COM filter_set,filter_name=popup,update_popup=no,include_syms=r450.09
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r450.47
                        COM filter_atr_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        if {$::COMANS} {
                                COM cur_atr_reset
                                COM cur_atr_set,attribute=.drill_noopt,option=last
                                COM sel_change_atr,mode=add
                        }
                }
        }

        # Mech. Drill - Flip Drill Coupon No Optimize �Ӽ� �߰�
        CLEAR_RESET
        foreach line $drill_info {
                if {[regexp {^c|g$} [lindex $line 0]]} {
                        continue
                } elseif {[lindex $line 0] == ""} {
                        continue
                } else {
                        WORK [lindex $line 0]
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r2000.02
                        COM filter_atr_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=flip_align_coupon*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        if {$::COMANS} {
                                COM cur_atr_reset
                                COM cur_atr_set,attribute=.drill_noopt,option=last
                                COM sel_change_atr,mode=add
                        }
                }
        }

        # Marking Layer - .out_flag=233 �Ӽ� �߰�
        CLEAR_RESET
        set marking_layer [list m$::wSTART_LAYER_NO m$::wEND_LAYER_NO]
        foreach line $marking_layer {
                DO_INFO -t layer -e $::wJOB/$::wPANEL/$line -d EXISTS,units=mm
                if {$gEXISTS == "yes"} {
                        WORK $line
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r0
                        COM filter_atr_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=inkjet_marking_align
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        puts $::COMANS
                        if {$::COMANS} {
                                COM cur_atr_reset
                                COM cur_atr_set,attribute=.out_flag,option=last,int=233
                                COM sel_change_atr,mode=add
                        }
                }
        }


        # ���� ȸ���� ������ Coupon - POWER GROUND ���� ����, �������� Full PTN���� ���� ����
        CLEAR_RESET
        COM affected_filter,filter=(type=signal|mixed&context=board)
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=coupon_line_check
        COM filter_set,filter_name=popup,update_popup=no,polarity=negative
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        # Pattern ���� Layer - Bonding Cut Data �ؼ� ����
        # Pattern ���� Layer - Stacking & Direct D/F Cut Data �ؼ� ����
        # ����� Layer Info
        #l01 posi no 3 0.5 cf 100.000 100.000
        #l02 nega no 2 0.3 ccl 100.000 100.000

        CLEAR_RESET
        foreach line $layer_info {
                if {[lindex $line 0] == ""} {
                        continue
                } else {
                        set layer [lindex $line 0]
                        set polarity [lindex $line 1]
                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                        if {$gEXISTS == "yes" && $polarity == "posi"} {
                                WORK $layer
                                # Pattern ���� Layer - Bonding Cut Data �ؼ� ����
                                COM filter_reset,filter_name=popup
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s14000
                                COM filter_set,filter_name=popup,update_popup=no,polarity=negative
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=bonding*_clamp

                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                                COM get_select_count
                                if {$::COMANS} {
                                        COM sel_polarity,polarity=positive
                                }
                                # Pattern ���� Layer - Stacking & Direct D/F Cut Data �ؼ� Positive�� ����
                                # Pattern ���� Layer - Stacking & Direct D/F Cut Data �ؼ� Nagative ���� - (2019.02.22 by �ֿ뼮)
#                                COM filter_reset,filter_name=popup
#                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s4850
#                                COM filter_set,filter_name=popup,update_popup=no,polarity=negative
#                                COM filter_atr_logic,filter_name=popup,logic=or
#                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=stacking*
#                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=direction*
#
#                                COM filter_area_strt
#                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
#                                COM get_select_count
#                                if {$::COMANS} {
#                                        COM sel_polarity,polarity=positive
#                                }

                                # Pattern ���� Layer - Bit Check Hole D/F Cut Data �ؼ� Positive�� ����
                                COM filter_reset,filter_name=popup
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.drill_first_last,option=last

                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                                COM get_select_count
                                if {$::COMANS} {
                                        COM sel_polarity,polarity=positive
                                }
                        }
                }
        }

        CLEAR_RESET

        # ��Ÿ Layer ���� ��ǥ �߰�
        # "-","_" �� �и��Ͽ� Regular drill layer name Ȯ��

        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {

                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                if {$context == "board" && [regexp {^d} $name] && [regexp {drill} $layer_type]} {

                        # 2div, 2nd, XRAY Drill, Sub Back/Depth Drill, Coin Guide Drill SKIP.
                        if {[regexp {\-t$|\-b$|\-np$|\-x|\-s|\-c|\-xt$|\-xb$} $name]} {continue}

                        if {[regexp {\-|\_} $name]} {

                                # layer name check
                                set layer [lindex [regsub {\-|\_} $name " "] 0]
                                #PAUSE "$name == $layer $context $side $layer_type"

                                foreach line $drill_info {
                                        if {$line == ""} {continue}
                                        if {[lindex $line 0] == $layer} {
                                                WORK [lindex $line 0]
                                                COM filter_reset,filter_name=popup
                                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r10
                                                COM filter_area_strt
                                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                                                if {$::COMANS} {
                                                        COM sel_copy_other,dest=layer_name,target_layer=$name,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                                                }
                                        }
                                }
                        } else {
                                continue
                        }
                }
        }

        CLEAR_RESET

        # 2�� PINELSS Layer Name ��/�� Shift
        # 2���� PINLESS �� ��� ������Ʈ (2020.05.15) ==> $::wPINLESS_TEXT == 1 �� ���
        if {$::wPINLESS == 2 || $::wPINLESS_TEXT == 1} {
                # Mirror = no �·� Shift
                foreach layer "$df_2_no $cp_2_no" {
                        WORK $layer

                        if {[regexp {cp} $layer]} {
                                set value -20
                        } else {
                                set value -20
                               # Text Box Copy move
                                COM filter_reset,filter_name=popup
                                COM filter_set,filter_name=popup,update_popup=no,feat_types=surface
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=text_nega_*
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                                COM get_select_count
                                if {$::COMANS} {
                                        COM sel_transform,mode=anchor,oper=,duplicate=yes,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
                                }
                        }
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                        COM filter_set,filter_name=popup,update_popup=no,text=l*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM filter_set,filter_name=popup,update_popup=no,text=cp*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        # CNC Alging Coupon text unselect (2020.02.25)
                        # Pair Layer Info text unselect �߰� (2020.11.04)
                        COM filter_reset,filter_name=popup
                        COM filter_atr_logic,filter_name=popup,logic=or
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=Cu_Thickness_and_Pair_layer_info
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        if {$::COMANS} {
                                #COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
                                COM sel_buffer_cut,x_datum=0,y_datum=0
                                COM sel_buffer_paste,x=$value,y=0
                        }
                }

                # Mirror = yes �� 20mm Shift
                foreach layer "$df_2_yes $cp_2_yes" {
                        WORK $layer
                        if {[regexp {cp} $layer]} {
                                set value 20
                        } else {
                                set value 20
                                # Text Box Copy move
                                COM filter_reset,filter_name=popup
                                COM filter_set,filter_name=popup,update_popup=no,feat_types=surface
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=text_nega_*
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                                COM get_select_count
                                if {$::COMANS} {
                                        COM sel_transform,mode=anchor,oper=,duplicate=yes,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
                                }
                        }
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                        COM filter_set,filter_name=popup,update_popup=no,text=l*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM filter_set,filter_name=popup,update_popup=no,text=cp*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        # CNC Alging Coupon text unselect (2020.02.25)
                        # Pair Layer Info text unselect �߰� (2020.11.04)
                        COM filter_reset,filter_name=popup
                        COM filter_atr_logic,filter_name=popup,logic=or
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=Cu_Thickness_and_Pair_layer_info
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_*
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        if {$::COMANS} {
                                #COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
                                COM sel_buffer_cut,x_datum=0,y_datum=0
                                COM sel_buffer_paste,x=$value,y=0
                        }
                }
        }

        # X-Ray Hole Guide flag=0 �Ӽ� �߰� (Coupon ���� Guide ������ ������)
        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                if {$context == "board" || [regexp {\-x} $name] || [regexp {drill} $layer_type] } {
                        WORK $name
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r22
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=xray_drill_hole
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM cur_atr_set,attribute=.drill_flag,option=last,int=1
                                COM sel_change_atr,mode=add
                        }
                }
        }




        CLEAR_RESET
        # Mask Layer Name 10mm �¿�� Shift (2020.05.18 - cu open �� ����)
        # Mirror = no �·� 10mm Shift
        # etch01, s-etch01, s-mask01, sr-mask01, sr-mask01-2, tent01, s-tent01, e-mask01, p-mask01, shpp01, tbs01, ana0104, ana, ana01, ana02
        foreach layer "$etch_back_c $s_etch_back_c $h_gold_dfr_c $h_gold_sr_c $h_gold_sr_2_c $tent_c $s_tent_c $enig_gold_dfr_c $p_mask_c $shpp_c $tbs_c $out_plug_c $out_plug $out_plug_1 $out_plug_2" {
                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}
                set value -10
                WORK $layer
#                # Text Box Change
#                COM filter_reset,filter_name=popup
#                COM filter_set,filter_name=popup,update_popup=no,feat_types=surface
#                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=text_posi
#                COM filter_area_strt
#                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
#                COM get_select_count
#                if {$::COMANS} {
#                        COM sel_transform,mode=anchor,oper=,duplicate=yes,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
#                }
                COM filter_reset,filter_name=popup
                COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                # mask ����
                COM filter_set,filter_name=popup,update_popup=no,text=*mask*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # tent ����
                COM filter_set,filter_name=popup,update_popup=no,text=*tent*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # etch ����
                COM filter_set,filter_name=popup,update_popup=no,text=etch*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # s-etch ����
                COM filter_set,filter_name=popup,update_popup=no,text=s-etch*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # shpp ����
                COM filter_set,filter_name=popup,update_popup=no,text=shpp*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # tbs ����
                COM filter_set,filter_name=popup,update_popup=no,text=tbs*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                COM get_select_count
                if {$::COMANS} {
                        COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
                }
        }

        # Mirror = yes �� 10mm Shift
        # etch30, s-etch30, s-mask30, sr-mask30, sr-mask30-2, tent30, s-tent30, e-mask301, p-mask30, shpp30, tbs30, ana3001
        foreach layer "$etch_back_s $s_etch_back_s $h_gold_dfr_s $h_gold_sr_s $h_gold_sr_2_s $tent_s $s_tent_s $enig_gold_dfr_s $p_mask_s $shpp_s $tbs_s $out_plug_s" {
                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}
                set value 10
                WORK $layer
#                # Text Box Change
#                COM filter_reset,filter_name=popup
#                COM filter_set,filter_name=popup,update_popup=no,feat_types=surface
#                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=text_nega_*
#                COM filter_area_strt
#                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
#                COM get_select_count
#                if {$::COMANS} {
#                        COM sel_transform,mode=anchor,oper=,duplicate=yes,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
#                }
                COM filter_reset,filter_name=popup
                COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                # mask ����
                COM filter_set,filter_name=popup,update_popup=no,text=*mask*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # tent ����
                COM filter_set,filter_name=popup,update_popup=no,text=*tent*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # etch ����
                COM filter_set,filter_name=popup,update_popup=no,text=etch*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # s-etch ����
                COM filter_set,filter_name=popup,update_popup=no,text=s-etch*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # tbs ����
                COM filter_set,filter_name=popup,update_popup=no,text=tbs*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                # shpp ����
                COM filter_set,filter_name=popup,update_popup=no,text=shpp*
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                COM get_select_count
                if {$::COMANS} {
                        COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=0,y_scale=0,x_offset=$value,y_offset=0
                }
        }







        puts "####### pETC_EDIT END ###########################################"
        puts "####### pETC_EDIT END ###########################################"
        puts "####### pETC_EDIT END ###########################################"

}

################################################################################
## Procedure    : pCU_PLATING
## ����         : Pattern ���� ȸ�� Layer ���� Cu ������ ���Ѵ�.
## Input        :
## Return       :

proc pCU_PLATING {  } {

        puts "###CU Area Calculater Start!###"
        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pCU_PLATING) : $file_path/$layer_info_file_name not found!!!"
                return
        }
        set chk_layer_list ""
        foreach line $layer_info {
                if {[lindex $line 1] == "posi"} {
                        lappend chk_layer_list $line
                } else {
                        continue
                }
        }
        if { [llength $chk_layer_list] == 0 } {
                PAUSE "Copper Area Check Skip!! Outer Layer is not Pattern Process."
                return
        }

        #PAUSE "==$chk_layer_list $out_c $out_s"

        STEP_ON $::wJOB $::wPANEL no

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000
        foreach line $chk_layer_list {
                set layer [lindex $line 0]
                set polarity [lindex $line 1]
                set mirror [lindex $line 2]
                #DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD -p polarity
                #if {$gLPDpolarity == "negative"} {continue}

                if {$mirror == "no"} {
                        #PAUSE "CHK: top $layer"
                        COM copper_area,layer1=$layer,layer2=,drills=yes,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes
                } else {
                        #PAUSE "CHK: Btm $layer"
                        COM copper_area,layer1=,layer2=$layer,drills=yes,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes
                }


                set cu_area    [lindex $::COMANS 0]

                set text "pattern,         [regsub {l} $layer ""],         [expr int($cu_area) / 10000.0]"
                lappend ::gJOB_ETC "$text\n"
        }
}


################################################################################
## Procedure    : pAU_PLATING
## ����         : ���� �ݵ��� ������ ���Ѵ�.
## Input        :
## Return       :

proc pAU_PLATING { layer_info_path } {
        # H_GOLD+ENIG �� ��� H_GOLD, ENIG�� ������ 2�� ���� ���ϱ�
        if {$::wFINISH_TYPE == "H_GOLD+ENIG"} {
                set fin "H_GOLD ENIG"
                foreach line $fin {
                        set ::wFINISH_TYPE $line
                        pAU_PLATING_SUB1 $layer_info_path
                }
                set ::wFINISH_TYPE H_GOLD+ENIG
        } else {
                pAU_PLATING_SUB1 $layer_info_path
        }
}

################################################################################
## Procedure    : pAU_PLATING_SUB1
## ����         : ���� �ݵ��� ������ ���Ѵ�.
## Input        :
## Return       :

proc pAU_PLATING_SUB1 { layer_info_path } {


        puts "###AU Area Calculater Start!###"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        set work_size_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_size_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

         # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        set trim Multi
        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                set trim 2L
        }
        ## ����� Trim Info
        #1 5 5 402 505 bonding+pin
        #2 5 5 397 500 bonding+pin
        set trim_x 0
        if { $trim != "2L"} {
                foreach line $trim_info {
                        if {$line != ""} {
                                set trim_x [expr $trim_x + ([lindex $line 1]/2.0)]
                        }
                }
        }

        #Panel Y Center �� Define with Profile
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        set trim_y [expr $gPROF_LIMITSymax / 2.0]

        set ::gAU_AREA ""

        set _step $::wPANEL

        DO_INFO -t step -e $::wJOB/$_step -d SR

        foreach line $gSRstep {
                lappend _step $line
        }

        set imsi_step ""
	foreach step $_step {
	        #PAUSE "1 $step"
                STEP_ON $::wJOB $step yes
                if {[info exists mask_layer]}  { unset mask_layer }
                set mask_layer2 ""
                #H_GOLD H_GOLD+OSP H_GOLD+ENIG H_GOLD+TIN ENIG ENEPIG HOT_SOLDER OSP SILVER TIN
                foreach out $out_all sr $sr_all tbs $tbs_all enig $enig_gold_dfr_all {
                        switch -exact -- $::wFINISH_TYPE {

                                H_GOLD -
				H_GOLD+TIN -
                                H_GOLD+OSP {
                                        lappend mask_layer $tbs
                                }

                                ENIG -
                                ENEPIG {
                                        COM copy_layer,source_job=$::wJOB,source_step=$step,source_layer=$sr,dest=layer_name,dest_layer=${sr}_imsi,mode=replace,invert=no
                                        lappend mask_layer $sr
                                }

                                OSP -
                                HOT_SOLDER -
                                SILBER -
                                TIN {
                                        return
                                }
                                default {
                                        puts "FINISH_TYPE = $::wFINISH_TYPE not define !!!"
                                        return
                                }
                        }
                }
                #PAUSE "2 $step"
	}

        # ǥ��ó���� �������̽� �ؽ�Ʈ ����
        # H_GOLD H_GOLD+OSP H_GOLD+ENIG ENIG ENEPIG HOT_SOLDER OSP SILVER TIN
        switch -exact -- $::wFINISH_TYPE {
                H_GOLD -
		H_GOLD+TIN -
	        H_GOLD+OSP {
	                set finish_type hard_gold
	                set flag H_GOLD
	        }

	        ENIG {
                        set finish_type enig
                        set flag ENIG
                }

                ENEPIG {
                        set finish_type enepig
                        set flag ENEPIG
                }
        }

        STEP_ON $::wJOB $::wPANEL no
        if {$finish_type == "enig" || $finish_type == "enepig"} {
                foreach out $out_all sr $sr_all mask $mask_layer {

                        # �̸� ���Ե� AU AREA = DM ��ǥ�� �о� �鿩�� ���� �ϴ� ������� ���� (2019.09.21)

                        #COM display_layer,name=$mask,display=yes,number=1
                        #COM work_layer,name=$mask
                        WORK $mask

                        PAUSE "CHECK: Au Area !!!"
                        COM exposed_area,layer1=$out,mask1=$mask,layer2=,mask2=,mask_mode=or,drills=yes,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes

                        set au_area    [lindex $::COMANS 0]
                        set text "$flag=[format %2.3f [expr $au_area/10000.0]] DM"

                        #AFFECT $sr
                        WORK $sr

                        # Text Insert position define
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                        COM filter_set,filter_name=popup,update_popup=no,text=X*
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        if {$::COMANS} {
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$sr -d FEATURES -o select,units=mm
                                foreach line $::data {
                                        if {[lindex $line 0] != "#T"} {
                                                continue
                                        } else {
                                                set pos_x [lindex $line 1]
                                                set pos_y [expr [lindex $line 2] + 57]
                                        }
                                }
                        }
                        COM filter_area_end,layer=,filter_name=popup,operation=unselect

                        # ���� TEXT ������ ����
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                        COM filter_set,filter_name=popup,update_popup=no,text=*DM
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        if {$::COMANS} {
                                PAUSE "sel Cnt == $::COMANS == AU Text Delete !!!"
                                COM sel_delete
                        }

                        if {$sr == $sr_c} {
                                #COM add_text,attributes=no,type=string,x=[expr $trim_x + $add_c],y=[expr $trim_y + $add_rc],text=$text,x_size=1.0,y_size=1.5,w_factor=0.656167984,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                COM add_text,attributes=no,type=string,x=$pos_x,y=$pos_y,text=$text,x_size=1.0,y_size=1.5,w_factor=0.492125988,polarity=negative,angle=270,mirror=no,fontname=standard,ver=1
                                PAUSE "AU Area Text Verify !!!"
                        } else {
                                #COM add_text,attributes=no,type=string,x=[expr $trim_x + $add_s],y=[expr $trim_y + $add_rs],text=$text,x_size=1.0,y_size=1.5,w_factor=0.656167984,polarity=negative,angle=270,mirror=yes,fontname=standard,ver=1
                                COM add_text,attributes=no,type=string,x=$pos_x,y=$pos_y,text=$text,x_size=1.0,y_size=1.5,w_factor=0.492125988,polarity=negative,angle=270,mirror=yes,fontname=standard,ver=1
                                PAUSE "AU Area Text Verify !!!"
                        }
                        COM affected_layer,name=,mode=all,affected=no

                        #DEL_LAYER $mask

                        lappend ::gAU_AREA "$out $text"

                        set text "$finish_type,         [regsub {l} $out ""],         [format %2.3f [expr $au_area/10000.0]]"
                        lappend ::gJOB_ETC "$text\n"
                }
        } elseif {$finish_type == "hard_gold"} {
                foreach out $out_all sr $sr_all tbs $tbs_all mask $mask_layer {

                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$tbs -d EXISTS,units=mm
                        if {$gEXISTS == "no"} {
                                PAUSE "$tbs layer does not exist. Check !!!"
                                exit 1
                        }

                        # �̸� ���Ե� AU AREA = DM ��ǥ�� �о� �鿩�� ���� �ϴ� ������� ���� (2019.09.21)

                        #COM display_layer,name=$mask,display=yes,number=1
                        #COM work_layer,name=$mask
                        WORK $mask

                        PAUSE "CHECK: Au Area !!!"
                        COM exposed_area,layer1=$out,mask1=$mask,layer2=,mask2=,mask_mode=or,drills=yes,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes

                        set au_area    [lindex $::COMANS 0]
                        set text "$flag=[format %2.3f [expr $au_area/10000.0]] DM"

                        #AFFECT $tbs
                        WORK $sr

                        # Text Insert position define
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                        COM filter_set,filter_name=popup,update_popup=no,text=X*
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        if {$::COMANS} {
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$sr -d FEATURES -o select,units=mm
                                foreach line $::data {
                                        if {[lindex $line 0] != "#T"} {
                                                continue
                                        } else {
                                                set pos_x [lindex $line 1]
                                                set pos_y [expr [lindex $line 2] + 57]
                                        }
                                }
                        }
                        COM filter_area_end,layer=,filter_name=popup,operation=unselect

                        WORK $tbs

                        # ���� TEXT ������ ����
                        COM filter_reset,filter_name=popup
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
                        COM filter_set,filter_name=popup,update_popup=no,text=*DM
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        if {$::COMANS} {
                                PAUSE "sel Cnt == $::COMANS == AU Text Delete !!!"
                                COM sel_delete
                        }

                        if {$tbs == $tbs_c} {
                                #COM add_text,attributes=no,type=string,x=[expr $trim_x + $add_c],y=[expr $trim_y + $add_rc],text=$text,x_size=1.0,y_size=1.5,w_factor=0.656167984,polarity=positive,angle=270,mirror=no,fontname=standard,ver=1
                                COM add_text,attributes=no,type=string,x=$pos_x,y=$pos_y,text=$text,x_size=1.0,y_size=1.5,w_factor=0.492125988,polarity=positive,angle=270,mirror=no,fontname=standard,ver=1
                                PAUSE "AU Area Text Verify !!!"
                        } else {
                                #COM add_text,attributes=no,type=string,x=[expr $trim_x + $add_s],y=[expr $trim_y + $add_rs],text=$text,x_size=1.0,y_size=1.5,w_factor=0.656167984,polarity=positive,angle=270,mirror=yes,fontname=standard,ver=1
                                COM add_text,attributes=no,type=string,x=$pos_x,y=$pos_y,text=$text,x_size=1.0,y_size=1.5,w_factor=0.492125988,polarity=positive,angle=270,mirror=yes,fontname=standard,ver=1
                                PAUSE "AU Area Text Verify !!!"
                        }
                        COM affected_layer,name=,mode=all,affected=no

                        #DEL_LAYER $mask

                        lappend ::gAU_AREA "$out $text"

                        set text "$finish_type,         [regsub {l} $out ""],         [format %2.3f [expr $au_area/10000.0]]"
                        lappend ::gJOB_ETC "$text\n"
                }
        }

}



################################################################################
## Procedure    : pPNL_PLATING
## ����         : PNL ���� �� Layer Cu ������ ���Ѵ�.
## Input        :
## Return       :

proc pPNL_PLATING {  } {

        puts "####### pPNL_PLATING START #################################"
        puts "####### pPNL_PLATING START #################################"
        puts "####### pPNL_PLATING START #################################"

        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pPNL_PLATING) : $file_path/$layer_info_file_name not found!!!"
                return
        }
        set chk_layer_list ""

        STEP_ON $::wJOB $::wPANEL no

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000

        foreach line $layer_info {
                if {$line == ""} {continue}
                set layer [lindex $line 0]

#                COM copper_area,layer1=$layer,layer2=,drills=no,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes
#                set cu_area    [lindex $::COMANS 0]
#                set text "curate,         [regsub {l} $layer ""],         [expr int($cu_area) / 10000.0]"

                # Percentage
                COM copper_area,layer1=$layer,layer2=,drills=no,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes
                set result $::COMANS
                set area        [format %.1f [lindex $result 0]]
                set percent     [format %.1f [lindex $result 1]]

                set text "curate,         [regsub {l} $layer ""],         $percent"

                lappend ::gJOB_ETC "$text\n"
        }

        puts "####### pPNL_PLATING END #################################"
        puts "####### pPNL_PLATING END #################################"
        puts "####### pPNL_PLATING END #################################"
}



################################################################################
## Procedure    : pAOI_SIMPLY_DATA_CREATE
## ����         : AOI ����ȭ DATA ���� (GIGAVIS �Ⱑ��)
## Input        :
## Return       :

proc pAOI_SIMPLY_DATA_CREATE { } {
        puts "####### pAOI_SIMPLY_DATA_CREATE START #################################"
        puts "####### pAOI_SIMPLY_DATA_CREATE START #################################"
        puts "####### pAOI_SIMPLY_DATA_CREATE START #################################"


       # AOI-MASK Layer ����
        DO_INFO -t layer -e $::wJOB/$::wPANEL/aoi-mask -d EXISTS,units=mm

        if {$gEXISTS == "yes"} {
                COM affected_layer,mode=all,affected=no
                WORK aoi-mask
                COM filter_reset,filter_name=popup
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM sel_delete
        } elseif {$gEXISTS == "no"} {
                COM create_layer,layer=aoi-mask,context=board,type=document,polarity=positive,ins_layer=
        }

        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB] } {
                        puts "It is not Regular Tool! \nDon't create Toolno.warkarea File!"
                        return
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}p$} $::wJOB] } {
                        puts "It is not Regular Tool! \nDon't create Toolno.warkarea File!"
                        return
                }
                set ::iJOB [string range $::wJOB 0 10]
        # DDPI
        } elseif {$::wSITE == 3} {
                puts "DDPI need not pAOI_SIMPLY_DATA_CREATE Process!"
                return
        }

        set time [clock format [clock scan now] -format %y%m%d%H%M%S]
        set date [clock format [clock scan now] -format %Y%m%d.%H%M%S]

        if { $::wSITE == 1} {
                if {$::wINCAM == 1} {
                        set aoi_fpath "$::env(JOB_USER_DIR)/$::wJOB.workarea"
                        set file_path $::env(JOB_USER_DIR)
                        set aoi_list [glob -nocomplain -tail -directory $::env(JOB_USER_DIR) *.workarea]
                } else {
                        set aoi_fpath "$::gGENESIS_JOB_DB_PATH/user/$::wJOB.workarea"
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                        set aoi_list [glob -nocomplain -tail -directory $::gGENESIS_JOB_DB_PATH/user *.workarea]
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if {$::wINCAM == 1} {
                        set aoi_fpath "$::env(JOB_USER_DIR)/$::iJOB.workarea"
                        set file_path $::env(JOB_USER_DIR)
                        set aoi_list [glob -nocomplain -tail -directory $::env(JOB_USER_DIR) *.workarea]
                } else {
                        set aoi_fpath "$::gGENESIS_JOB_DB_PATH/user/$::iJOB.workarea"
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                        set aoi_list [glob -nocomplain -tail -directory $::gGENESIS_JOB_DB_PATH/user *.workarea]
                }
        }

        # File Back-Up
        if {[file exists $aoi_fpath]} {
                file copy -force $aoi_fpath ${aoi_fpath}.$time
        }

        # workarea file delete - ���� Rev. ���� ����
        foreach line $aoi_list {
                if {$line == ""} {continue}
                #PAUSE ${file_path}/$line
                file delete -force ${file_path}/$line
        }


        STEP_ON $::wJOB $::wPANEL no

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pAOI_SIMPLY_DATA_CREATE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pAOI_SIMPLY_DATA_CREATE) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        ## ����� Drill Info
        #d01   01 08 3 cf both 100.000 100.000 top m 200 yes
        #d0207 02 07 2 cf btm  100.000 100.000 top m 190 yes
        #c0102 01 02 3 cf top  100.000 100.000 top c     no
        #c0807 08 07 3 cf btm  100.000 100.000 btm c     no


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pAOI_SIMPLY_DATA_CREATE) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000


        CLEAR_RESET
        WORK aoi-mask

        set sr_margin_x 0
        set sr_margin_y 0
        set step_margin_x 0
        set step_margin_y 0

        # AOI Mask Layer Fill ����
        COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
        # Nest_sr ���� (yes -> no) - 20200903
        #COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=no,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
        COM fill_params,type=solid,origin_type=datum,solid_type=surface

        # Dummy Attribute ����
        COM cur_atr_reset
        COM cur_atr_set,attribute=.string,text=dummy
        COM sel_change_atr,mode=replace

        # START
        CLEAR_RESET
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm

        # PNL Center ��ǥ�� ����
        set center_x [expr $gPROF_LIMITSxmax / 2.0]
        set center_y [expr $gPROF_LIMITSymax / 2.0]

        # [Origin] Info Verify
        set ::gAOI_WORKAREA ""
        lappend ::gAOI_WORKAREA "\[Origin]\n"
        puts "$::wJOB $::wPANEL"
        foreach line $layer_info {
                if {[lindex $line 0] != ""} {
                        set layer [lindex $line 0]
                        WORK $layer

                        # ���� �� ��� - MAIN or CAP D/F Guide ��ǥ�� ����
                        # Guide Design Change �� ���� �߰� ������Ʈ (�ּ� Nega Pad ���� ����) - (2020.04.02)
                        if { $layer == "l$::wSTART_LAYER_NO" || $layer == "l$::wEND_LAYER_NO" } {
                                # UPPER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                #COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ul_pos $::data

                                # UPPER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                #COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ur_pos $::data

                                # LOWER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                #COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set lr_pos $::data

                                # LOWER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                #COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ll_pos $::data

                        # ���� �� ��� - 4�� T-Drill Guide ��ǥ�� ����
                        } else {
                                # UPPER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ul_pos $::data

                                # UPPER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ur_pos $::data

                                # LOWER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set lr_pos $::data

                                # LOWER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ll_pos $::data
                        }

                        # Mirror = no
                        if {[lindex $line 2] == "no"} {
                                set side TOP
                                # Lower Left Position
                                set x_pos [lindex [lindex $ll_pos 1] 1]
                                set y_pos [lindex [lindex $ll_pos 1] 2]
                        # Mirror = yes
                        } elseif {[lindex $line 2] == "yes"} {
                                set side BOT
                                # Lower Right Position
                                set x_pos [lindex [lindex $lr_pos 1] 1]
                                set y_pos [lindex [lindex $lr_pos 1] 2]
                        }

                        set text "Origin.[lindex $line 0]=$x_pos,$y_pos"
                        lappend ::gAOI_WORKAREA "$text\n"

                } else {

                }
        }
        CLEAR_RESET

        # [Work Area] Info Verify
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm

        lappend ::gAOI_WORKAREA "\[Work Area]\n"
        set cnt 0
        foreach step $gREPEATstep {
                if {$step == "pcb"} {
                        incr cnt
                }
        }
        set text "AreaNumber=$cnt"
        lappend ::gAOI_WORKAREA "$text\n"

        set cnt 1
        foreach step $gREPEATstep xmin $gREPEATxmin ymin $gREPEATymin xmax $gREPEATxmax ymax $gREPEATymax {
                if {$step == "pcb"} {
                        set text "Area${cnt}=$xmin,$ymin,$xmax,$ymax"
                        lappend ::gAOI_WORKAREA "$text\n"
                        incr cnt
                }
        }

        # [Line Spec] Info Verify - SAP INTERFACE TABLE_INFO 1180 ���
        # set sTABLE_LIST "1100 1102 1103 ....."
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_LIST
        } elseif {$::wSITE == 2} {
                pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_LIST
        } else {
                return
        }

        # Line ȸ���� Spec Ȯ��
        if {[lsearch $sTABLE_LIST 1180] != -1} {
                if { $::wSITE == 1} {
                        pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1180
                # IPGEN : mse00123-01p
                } elseif {$::wSITE == 2} {
                        pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1180
                } elseif {$::wSITE == 3} {
                        # continue
                } else {
                        # continue
                }

                lappend ::gAOI_WORKAREA "\[Line Spec]\n"
                foreach layer $layer_info {
                        if {[lindex $layer 0] != ""} {
                                # sLAYERPROC = ������ ����  - Layer Matching�� ���
                                # sLINEWID   = LINE WIDTH   - SpecMinLineWidth
                                # sWIDMN     = WIDTH MIN    - None
                                # sWIDMX     = WIDTH MAX    - None
                                # sLINESPACE = LINE SPACE   - MinLineSpace

                                # l,0 �� �����ϰ� ������ ������ ���� - SAP ������ �������� �� ����
                                set layer_cnt [scan [regsub {l} $layer ""] %d]

                                foreach LAYERPROC $sLAYERPROC LINEWID $sLINEWID LINESPACE $sLINESPACE {
                                        if {$layer_cnt == $LAYERPROC} {
                                                # Line Spec ���� um ���� (�Ⱑ�� Ȯ��)
                                                lappend ::gAOI_WORKAREA "SpecMinLineWidth.[lindex $layer 0]=[expr $LINEWID * 1000]\n"
                                                lappend ::gAOI_WORKAREA "MinLineSpace.[lindex $layer 0]=[expr $LINESPACE * 1000]\n"
                                                lappend ::gAOI_WORKAREA "DesignMinLineWidth.[lindex $layer 0]=[expr $LINEWID * 1000]\n"
                                        }
                                }
                        } else {

                        }
                }
        } else {
                PAUSE "ERROR (pAOI_SIMPLY_DATA_CREATE) : SAP Pattern Tab Trace Info create need.. Call to SPEC !!!"
                return
        }

        # ������ Ȯ�� : ���� �̹��� (R0640) ���� Drill �����ڵ� Ȯ��
        if {[lsearch $sTABLE_LIST 1140] != -1} {
                if { $::wSITE == 1} {
                        pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1140
                # IPGEN : mse00123-01p
                } elseif {$::wSITE == 2} {
                        pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1140
                } elseif {$::wSITE == 3} {
                        # continue
                } else {
                        # continue
                }

                # DF�뱤 ���� ���� Ȯ��
                foreach PROCCD $sPROCCD PROCSEQ $sPROCSEQ {
                        if {$PROCCD == "R0640"} {
                                set DF_SEQ $PROCSEQ
                        }
                }
        } else {
                PAUSE "ERROR (pAOI_SIMPLY_DATA_CREATE) : PROCESS Table not Defined. Call to SPEC !!!"
                return
        }


        CLEAR_RESET

        # [Align Point] Info Verify
        lappend ::gAOI_WORKAREA "\[Align Point]\n"
        foreach line $layer_info {
                if {[lindex $line 0] != ""} {

                        set layer [lindex $line 0]
                        WORK $layer

                        # ���� �� ��� - MAIN or CAP D/F Guide ��ǥ�� ����
                        if { $layer == "l$::wSTART_LAYER_NO" || $layer == "l$::wEND_LAYER_NO" } {
                                # UPPER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ul_pos $::data

                                # UPPER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ur_pos $::data

                                # LOWER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set lr_pos $::data

                                # LOWER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_expo_out_*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=s3000\;r3000\;r1000
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ll_pos $::data

                        # ���� �� ��� - 4�� T-Drill Guide ��ǥ�� ����
                        } else {
                                # UPPER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ul_pos $::data

                                # UPPER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ur_pos $::data

                                # LOWER RIGHT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set lr_pos $::data

                                # LOWER LEFT ��ǥ
                                COM filter_reset,filter_name=popup
                                COM filter_area_strt
                                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=target_4*
                                COM filter_set,filter_name=popup,update_popup=no,include_syms=r2500
                                COM filter_area_strt
                                COM filter_area_xy,x=$center_x,y=$center_y
                                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymin
                                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select,units=mm
                                set ll_pos $::data
                        }

                        # Mirror = no
                        if {[lindex $line 2] == "no"} {

                                # 2PT1 - Upper Left Position
                                set 2pt1_x_pos [lindex [lindex $ul_pos 1] 1]
                                set 2pt1_y_pos [lindex [lindex $ul_pos 1] 2]

                                # 2PT2 - Lower Left Position
                                set 2pt2_x_pos [lindex [lindex $ll_pos 1] 1]
                                set 2pt2_y_pos [lindex [lindex $ll_pos 1] 2]

                                # VRS1 - Upper Left Position
                                set vrs1_x_pos [lindex [lindex $ul_pos 1] 1]
                                set vrs1_y_pos [lindex [lindex $ul_pos 1] 2]

                                # VRS2 - Lower Rigth Position
                                set vrs2_x_pos [lindex [lindex $lr_pos 1] 1]
                                set vrs2_y_pos [lindex [lindex $lr_pos 1] 2]

                        # Mirror = yes
                        } elseif {[lindex $line 2] == "yes"} {

                                # 2PT1 - Upper Rigth Position
                                set 2pt1_x_pos [lindex [lindex $ur_pos 1] 1]
                                set 2pt1_y_pos [lindex [lindex $ur_pos 1] 2]

                                # 2PT2 - Lower Right Position
                                set 2pt2_x_pos [lindex [lindex $lr_pos 1] 1]
                                set 2pt2_y_pos [lindex [lindex $lr_pos 1] 2]

                                # VRS1 - Upper Right Position
                                set vrs1_x_pos [lindex [lindex $ur_pos 1] 1]
                                set vrs1_y_pos [lindex [lindex $ur_pos 1] 2]

                                # VRS2 - Lower Left Position
                                set vrs2_x_pos [lindex [lindex $ll_pos 1] 1]
                                set vrs2_y_pos [lindex [lindex $ll_pos 1] 2]
                        }
                        set text2pt1 "2PT1.[lindex $line 0]=$2pt1_x_pos,$2pt1_y_pos"
                        set text2pt2 "2PT2.[lindex $line 0]=$2pt2_x_pos,$2pt2_y_pos"
                        set textvrs1 "VRS1.[lindex $line 0]=$vrs1_x_pos,$vrs1_y_pos"
                        set textvrs2 "VRS2.[lindex $line 0]=$vrs2_x_pos,$vrs2_y_pos"
                        puts "$text2pt1 \n$text2pt2 \n$textvrs1 \n$textvrs2"
                        lappend ::gAOI_WORKAREA "$text2pt1\n"
                        lappend ::gAOI_WORKAREA "$text2pt2\n"
                        lappend ::gAOI_WORKAREA "$textvrs1\n"
                        lappend ::gAOI_WORKAREA "$textvrs2\n"
                } else {

                }
        }
        CLEAR_RESET

        # [Drill Property] Info Verify
        # Drill Layer�� ���� Layer List ����
        lappend ::gAOI_WORKAREA "\[Drill Property]\n"

        set drl_lay_list ""
        foreach line $drill_info {
                if {[lindex $line 0] != ""} {
                        DO_INFO -t layer -e $::wJOB/$::wPANEL/[lindex $line 0],units=mm
                        # gDRL_START = l03
                        # gDRL_END = l16

                        # Drill Layer ���� ���� ����
                        set [subst [lindex $line 0]] ""

                        set START [scan [regsub {m|s|l|p} $gDRL_START ""] %d]
                        set END [scan [regsub {m|s|l|p} $gDRL_END ""] %d]

                        puts "= [subst [lindex $line 0]] start : $START , end : $END = "

                        for {set check $START} {$check <= $END} {incr check} {
                                set layer $check
                                if {$::wNO_OF_LAYER < 100} {
                                        #Drill Layer ���� ������ �Ͽ� ���� �� Layer List ���� : d01 = l01 l02 l03 l04 l05 l06 l07 l08
                                        #lappend [subst [lindex $line 0]] l[format %02d $layer]
                                        #PAUSE "[subst [lindex $line 0]] l[format %02d [scan $layer %d]]"
                                        lappend [subst [lindex $line 0]] l[format %02d [scan $layer %d]]

                                        # drl_lay_list ��� ������ Drill Layer�� ������ List �� ���� : drl_lay_list = d01 d0108c d0207s
                                        lappend drl_lay_list $[lindex $line 0]

                                } elseif {$::wNO_OF_LAYER >= 100} {
                                        #Drill Layer ���� ������ �Ͽ� ���� �� Layer List ���� : d01 = l01 l02 l03 l04 l05 l06 l07 l08
                                        #lappend [subst [lindex $line 0]] l[format %03d $layer]
                                        lappend [subst [lindex $line 0]] l[format %03d [scan $layer %d]]

                                        # drl_lay_list ��� ������ Drill Layer�� ������ List �� ���� : drl_lay_list = d01 d0108c d0207s
                                        lappend drl_lay_list $[lindex $line 0]
                                }
                        }
                }
        }

        # �ߺ��� drill layer list ���� �� {,} ����
        set drl_lay_list [lsort -uniq $drl_lay_list]
        set drl_lay_list [regsub -all {\{|\}} $drl_lay_list ""]
        set drl_lay_list [regsub -all {\$} $drl_lay_list ""]

        puts $drl_lay_list
        # puts = c0102c c0203c d01 d0108c d0225g-c

        #puts [subst [lindex $drl_lay_list 0]]
        # puts = l01 l02

        if {[lsearch $sTABLE_LIST 1160] != -1} {
                if { $::wSITE == 1} {
                        pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1160
                # IPGEN : mse00123-01p
                } elseif {$::wSITE == 2} {
                        pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1160
                } elseif {$::wSITE == 3} {
                        # continue
                } else {
                        # continue
                }
        } else {
                PAUSE "ERROR (pAOI_SIMPLY_DATA_CREATE) : SAP DRILL Tab Table Info create need.. Call to SPEC !!!"
                return
        }

        # Layer�� Drill List ����
        foreach line $layer_info {
                if {[lindex $line 0] != ""} {
                        # l01=d01,d0108c,c0102c ����
                        set drl_list ""

                        foreach drl $drl_lay_list {

                                #puts "A==[subst $\{[subst $drl]\}], [lindex $line 0], $drl=="
                                #puts "B==[lsearch [subst $\{[subst $drl]\}] [lindex $line 0]]=="
                                if {[lsearch [subst $\{[subst $drl]\}] [lindex $line 0]] != -1} {
                                        puts "C==[subst $\{[subst $drl]\}] == [lindex $line 0]=="
                                        lappend drl_list ,$drl
                                        puts $drl_list
                                }
                        }
                        set drl_list [regsub {,} $drl_list ""]
                        set drl_list [regsub -all { } $drl_list ""]

                        lappend ::gAOI_WORKAREA "[lindex $line 0]=$drl_list\n"

                        # l01.c0102p=VIA ����
                        set drl_list ""
                        foreach list $drl_lay_list {

                                #puts "D==$list"
                                #puts "E==[subst $list]"
                                set drl [regsub {\$} $list ""]
                                #puts "F==drl = $drl"
                                #puts "G==[lsearch [subst $list] [lindex $line 0]]"

                                # VD (Virtual Drill ����)
                                # M Drill Tabl ���� �����ڵ� ���� ������ �� �������� Ȯ��
                                set flag 0

                                # �̹��� �� DRILL ����
                                # R0240 DRILL
                                # R0265 ����DRILL
                                # R0590 CAP DRILL
                                set main_chk d${::wSTART_LAYER_NO}
                                set cap_chk d${::wSTART_LAYER_NO}${::wEND_LAYER_NO}c
                                set am_chk d${::wSTART_LAYER_NO}-np
                                set xray_chk d${::wSTART_LAYER_NO}-x

                                if {$drl == $main_chk || $drl == $cap_chk} {
                                        set flag 0

                                # �̹��� �� DRILL ����
                                # R0235 X-RAY DRILL
                                # R0241 DRILL(��)
                                } elseif {$drl == $am_chk || $drl == $xray_chk} {
                                        set flag 1

                                # LAYER �� SKIP
                                } elseif {[regexp {^c|^y} $drl]} {

                                # �̹��� ��/�� DRILL ����
                                # R0335 X-RAY Depth DRILL
                                # R0575 X-RAY Back DRILL
                                # R0340 DEPTH DRILL
                                # R0580 BACK DRILL
                                # R0581 STEP DRILL
                                } else {
                                        foreach PROCSEQ $sPROCSEQ PROCCD $sPROCCD PRLAYERFR $sPRLAYERFR PRLAYERTO $sPRLAYERTO {
                                                if {[regexp {R0335|R0575|R0340|R0580|R0581} $PROCCD]} {
                                                        # R0335 X-RAY Depth DRILL
                                                        if {$PROCCD == "R0335"} {
                                                                set tail d-x

                                                        # R0575 X-RAY Back DRILL
                                                        } elseif {$PROCCD == "R0575"} {
                                                                set tail b-x

                                                        # R0340 DEPTH DRILL
                                                        } elseif {$PROCCD == "R0340"} {
                                                                set tail d

                                                        # R0580 BACK DRILL
                                                        } elseif {$PROCCD == "R0580"} {
                                                                set tail b

                                                        # R0581 STEP DRILL
                                                        } elseif {$PROCCD == "R0581"} {
                                                                set tail t
                                                        }
                                                        # �������� CHK
                                                        set SAP_SEQ $PROCSEQ

                                                        # LAYER �̸� CHK
                                                        set sap_drl d[format %02d $PRLAYERFR][format %02d $PRLAYERTO]${tail}
                                                        #puts ==$drl==$sap_drl==

                                                        # Drill Layer Name �� ��ġ�� ��� SAP ���������� ��
                                                        # X-Ray Back/Depth Drill �� ������ ���� ����, Back/Depth Drill �������� �� �ؾ� ��.
                                                        if {$drl == $sap_drl || [regsub {\-x} $drl ""] == $sap_drl} {
                                                                puts "== DF SEQ : $DF_SEQ  &&  $drl == $sap_drl = SAP SEQ : $SAP_SEQ =="
                                                                if {$DF_SEQ > $SAP_SEQ} {
                                                                        set flag 0
                                                                } elseif {$DF_SEQ < $SAP_SEQ} {
                                                                        set flag 1
                                                                }
                                                        }
                                                }
                                        }

                                }


                                if {[lsearch [subst $list] [lindex $line 0]] == -1} {

                                        # VIA : Laser Drill
                                        if { [regexp {^c|^y} $drl] } {
                                                lappend ::gAOI_WORKAREA "[lindex $line 0].$drl=VIA\n"

                                        # PTH : Through Hole
                                        } elseif { [regexp {^d} $drl] && $flag == 0} {
                                                lappend ::gAOI_WORKAREA "[lindex $line 0].$drl=PTH\n"

                                        # VD : Virtual Drill - (2020.04.03 ������Ʈ)
                                        # VD -> VIRTUAL ���� - (2020.04.17 ������Ʈ)
                                        } elseif { [regexp {^d} $drl] && $flag == 1} {
                                                lappend ::gAOI_WORKAREA "[lindex $line 0].$drl=VIRTUAL\n"
                                        }
                                }
                        }
                } else {

                }
        }
        CLEAR_RESET

        # [TOP BOT] Info Verify
        lappend ::gAOI_WORKAREA "\[TOP BOT]\n"
        foreach line $layer_info {
                if {[lindex $line 0] != ""} {
                        if {[lindex $line 2] == "no"} {
                                set side TOP
                        } elseif {[lindex $line 2] == "yes"} {
                                set side BOT
                        }
                        set text "[lindex $line 0]=$side"
                        lappend ::gAOI_WORKAREA "$text\n"
                } else {

                }
        }

        if { $::wSITE == 1} {
                set job $::wJOB
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                set job $::iJOB
        }

        # JOB ETC ���� ����
        set ::gAOI_WORKAREA [regsub -all {\} \{} $::gAOI_WORKAREA ""]
        set ::gAOI_WORKAREA [regsub -all {\{|\}} $::gAOI_WORKAREA ""]


        # File Create : ToolNo.workarea
        set aoi_fileID [open $aoi_fpath w]

        # Head File
        puts $aoi_fileID "\[Job Info\]"
        puts $aoi_fileID "JobName=$job"
        puts $aoi_fileID "DATE=$date"
        puts $aoi_fileID "NumOfLayer=$::wNO_OF_LAYER"
        puts $aoi_fileID "Unit=mm"

        # MAIN
        puts $aoi_fileID $::gAOI_WORKAREA

        close $aoi_fileID

        puts "########## CREATE $::wJOB.workarea File Success! ##########"
        puts "########## CREATE $::wJOB.workarea File Success! ##########"
        puts "########## CREATE $::wJOB.workarea File Success! ##########"
        puts "########## CREATE $::wJOB.workarea File Success! ##########"

        if { $::wETC_DATA_CREATE == 1 } {
                PAUSE "########## CREATE $job.workarea File Success! ##########"
        }

        # END

}




################################################################################
## Procedure    : pPSR_AUTOMATIC_CHECK_DATA_CREATE
## ����         : TRIVIS PSR AOI : PSR �ڵ��˻� ��� �ڵ�ȭ Data ���� (�β����� ���� ����)
## Input        :
## Return       : tool_no.psrinfo file ����

proc pPSR_AUTOMATIC_CHECK_DATA_CREATE { } {
        puts "####### pPSR_AUTOMATIC_CHECK_DATA_CREATE #################################"

        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB] } {
                        puts "It is not Regular Tool! \nDon't create $::wJOB.psrinfo File!"
                        return
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}p$} $::wJOB] } {
                        puts "It is not Regular Tool! \nDon't create $::wJOB.psrinfo File!"
                        return
                }
                set ::iJOB [string range $::wJOB 0 10]
        # DDPI
        } elseif {$::wSITE == 3} {
                puts "DDPI need not pPSR_AUTOMATIC_CHECK_DATA_CREATE Process!"
                return
        }


        set date [clock format [clock scan now] -format %Y%m%d.%H%M%S]
        set work_size_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_size_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]


        if { $::wSITE == 1} {
                if {$::wINCAM == 1} {
                        set psr_fpath "$::env(JOB_USER_DIR)/$::wJOB.psrinfo"
                } else {
                        set psr_fpath "$::gGENESIS_JOB_DB_PATH/user/$::wJOB.psrinfo"
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if {$::wINCAM == 1} {
                        set psr_fpath "$::env(JOB_USER_DIR)/$::iJOB.psrinfo"
                } else {
                        set psr_fpath "$::gGENESIS_JOB_DB_PATH/user/$::iJOB.psrinfo"
                }
        }

        set ::gPRODUCT_PSRINFO ""

        # [Thickness] Info Verify - SAP INTERFACE TABLE_INFO 1100 ���
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        # set sTABLE_LIST "1100 1102 1103 ....."
        if { $::wSITE == 1} {
                pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_LIST
        } elseif {$::wSITE == 2} {
                pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_LIST
        } else {
                return
        }

        if {[lsearch $sTABLE_LIST 1100] != -1} {
                if { $::wSITE == 1} {
                        pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1100
                # IPGEN : mse00123-01p
                } elseif {$::wSITE == 2} {
                        pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1100
                } elseif {$::wSITE == 3} {
                        # continue
                } else {
                        # continue
                }
        } else {
                PAUSE "ERROR (pPSR_AUTOMATIC_CHECK_DATA_CREATE) : SAP Interface Thickness info check... Call to SPEC !!!"
                return
        }

        lappend ::gPRODUCT_PSRINFO "ProductThickness=[lindex $sTIK 0]\n"

        # [Work Size] Info Verify - SAP INTERFACE TABLE_INFO 1110 ���
        lappend ::gPRODUCT_PSRINFO "WorkSizeX=$work_size_x\n"
        lappend ::gPRODUCT_PSRINFO "WorkSizeY=$work_size_y\n"

        # [Trim Size] Info Verify - SAP INTERFACE TABLE_INFO 1130 ���
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01

        if {[lsearch $sTABLE_LIST 1130] != -1} {
                if { $::wSITE == 1} {
                        pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1130
                # IPGEN : mse00123-01p
                } elseif {$::wSITE == 2} {
                        pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1130
                } elseif {$::wSITE == 3} {
                        # continue
                } else {
                        # continue
                }
        } else {
                PAUSE "ERROR (pPSR_AUTOMATIC_CHECK_DATA_CREATE) : SAP Interface Trim info check... Call to SPEC !!!"
                return
        }
        lappend ::gPRODUCT_PSRINFO "TrimSizeX=[lindex $sTRIMSIZEX end]\n"
        lappend ::gPRODUCT_PSRINFO "TrimSizeY=[lindex $sTRIMSIZEY end]\n"

        # JOB PSRINFO ���� ����
        set ::gPRODUCT_PSRINFO [regsub -all {\} \{} $::gPRODUCT_PSRINFO ""]
        set ::gPRODUCT_PSRINFO [regsub -all {\{|\}} $::gPRODUCT_PSRINFO ""]

        if { $::wSITE == 1} {
                set job $::wJOB
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                set job $::iJOB
        }

        # File Create : ToolNo.psrinfo
        set psr_fileID [open $psr_fpath w]

        # Head File
        puts $psr_fileID "\[Job Info\]"
        puts $psr_fileID "JobName=$job"
        puts $psr_fileID "DATE=$date"
        puts $psr_fileID "NumOfLayer=$::wNO_OF_LAYER"
        puts $psr_fileID "Unit=mm"

        # MAIN
        puts $psr_fileID $::gPRODUCT_PSRINFO

        # CLOSE
        close $psr_fileID

        puts "########## CREATE $job.psrinfo File Success! ##########"
        puts "########## CREATE $job.psrinfo File Success! ##########"
        puts "########## CREATE $job.psrinfo File Success! ##########"
        puts "########## CREATE $job.psrinfo File Success! ##########"

        if { $::wETC_DATA_CREATE == 1 } {
                PAUSE "########## CREATE $job.psrinfo File Success! ##########"
        }

        # END
}



################################################################################
## Procedure    : pSCREEN_LDI_DATA_AUTO_CONVERSION
## ����         : SCREEN LDI Data��ȯ �ڵ�ȭ ���� ���� ����
## Input        : $layer_info_path
## Return       : Job/User/toolno.scrnldi ���� ����

proc pSCREEN_LDI_DATA_AUTO_CONVERSION {layer_info_path} {

        # TEST TOOL : MWO00451-01 - CCL
        # TEST TOOL : MHR00047-11 - CP Layer

        puts "####### pSCREEN_LDI_DATA_AUTO_CONVERSION #################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel ���� ���� Ȯ��
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB] } {
                        puts "It is not Regular Tool! \nDon't create Toolno.scrnldi File!"
                        return
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}p$} $::wJOB] } {
                        puts "It is not Regular Tool! \nDon't create Toolno.scrnldi File!"
                        return
                }
                set ::iJOB [string range $::wJOB 0 10]
        # DDPI
        } elseif {$::wSITE == 3} {
                puts "DDPI need not pSCREEN_LDI_DATA_AUTO_CONVERSION Process!"
                return
        }

        set time [clock format [clock scan now] -format %y%m%d%H%M%S]
        set date [clock format [clock scan now] -format %Y%m%d.%H%M%S]

        if {$::wINCAM == 1} {
                set ::gINCAM_JOB_DB_PATH [exec $::env(INCAM_PRODUCT)/bin/dbutil path jobs $::wJOB]
        } else {
                set ::gGENESIS_JOB_DB_PATH [DBUTIL path jobs $::wJOB]
        }

        if { $::wSITE == 1} {
                if {$::wINCAM == 1} {
                        set screen_ldi_fpath "$::env(JOB_USER_DIR)/$::wJOB.scrnldi"
                        set scrnldi_path $::env(JOB_USER_DIR)
                        set scrnldi_list [glob -nocomplain -tail -directory $::env(JOB_USER_DIR) *.scrnldi*]
                } else {
                        set screen_ldi_fpath "$::gGENESIS_JOB_DB_PATH/user/$::wJOB.scrnldi"
                        set scrnldi_path "$::gGENESIS_JOB_DB_PATH/user"
                        set scrnldi_list [glob -nocomplain -tail -directory $::gGENESIS_JOB_DB_PATH/user *.scrnldi*]
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if {$::wINCAM == 1} {
                        set screen_ldi_fpath "$::env(JOB_USER_DIR)/$::iJOB.scrnldi"
                        set scrnldi_path $::env(JOB_USER_DIR)
                        set scrnldi_list [glob -nocomplain -tail -directory $::env(JOB_USER_DIR) *.scrnldi*]
                } else {
                        set screen_ldi_fpath "$::gGENESIS_JOB_DB_PATH/user/$::iJOB.scrnldi"
                        set scrnldi_path "$::gGENESIS_JOB_DB_PATH/user"
                        set scrnldi_list [glob -nocomplain -tail -directory $::gGENESIS_JOB_DB_PATH/user *.scrnldi*]
                }
        }

        # Scrnldi file delete - ���� Rev. ���� ����� �ڵ���ȯ�� ���� Rev.scrnldi ���� ���� �� (���� - 2019.06.17)
        foreach line $scrnldi_list {
                if {$line == ""} {continue}
                if {$line == "$::wJOB.scrnldi"} {continue}
                if {$::wSITE == 2} {
                        if {$line == "$::iJOB.scrnldi"} {continue}
                }
                #PAUSE ${scrnldi_path}/$line
                file delete -force ${scrnldi_path}/$line
        }

        if {[file exists $screen_ldi_fpath]} {
                file copy -force $screen_ldi_fpath ${screen_ldi_fpath}.$time
        }


        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSCREEN_LDI_DATA_AUTO_CONVERSION) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSCREEN_LDI_DATA_AUTO_CONVERSION) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        ## ����� Drill Info
        #d01   01 08 3 cf both 100.000 100.000 top m 200 yes
        #d0207 02 07 2 cf btm  100.000 100.000 top m 190 yes
        #c0102 01 02 3 cf top  100.000 100.000 top c     no
        #c0807 08 07 3 cf btm  100.000 100.000 btm c     no


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSCREEN_LDI_DATA_AUTO_CONVERSION) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000
        #l05 nega yes 1 0.05over ccl 100.000 100.000
        #l06 nega no 1 0.05over ccl 100.000 100.000
        #l07 nega yes 2 0.05over cf 100.000 100.000
        #l08 nega yes 3 0.05over cf 100.000 100.000


        STEP_ON $::wJOB $::wPANEL no

        # START
        CLEAR_RESET
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm

        # [Origin] Info Verify
        set ::gSCREEN_LDI ""


        # [BOM] Info Verify - SAP INTERFACE TABLE_INFO 1120 ���
        # set sTABLE_LIST "1100 1102 1103 ....."
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_LIST
        } elseif {$::wSITE == 2} {
                pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_LIST
        } else {
                return
        }

        if {[lsearch $sTABLE_LIST 1120] != -1} {
                if { $::wSITE == 1} {
                pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1120
                # IPGEN : mse00123-01p
                } elseif {$::wSITE == 2} {
                        pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1120
                } elseif {$::wSITE == 3} {
                        # continue
                } else {
                        # continue
                }
        } else {
                PAUSE "ERROR (pSCREEN_LDI_DATA_AUTO_CONVERSION) : SAP Interface BOM info check... Call to SPEC !!!"
                return
        }


        # 1��IMAGE (Order 1) �� ���� �ϸ� ��
        # sBOMNR      = BOM����[1 2 3 4 5 6 7 8 9 10 11]
        # sLAYER      = LAYER  [000 000 001 000 002 000 004 000 006 000 000]
        # sLAYER2     = LAYER2 [000 000 000 000 003 000 005 000 000 000 000]
        # sMATNRTIK   = ����β� [0.000 0.000. 0.012 0.200 0.300 0.200 0.300 0.200 0.012 0.000 0.000]
        # sCOPPERTIK  = ���ڵβ� [0.000 0.000 12.000 0.000 .....]
        # sCOPPERTIK2 = ���ڵβ�2 [0.000 0.000 12.000 0.000 .....]
        # sMATNRTIKT = �����̷еβ� [10.000 20.000 0.000 210.000 300.000 210.000 300.000 210.000 0.000 20.000 10.000]

        set layer_cnt 0
        foreach BOMNR $sBOMNR LAYER $sLAYER LAYER2 $sLAYER2 MATNRTIK $sMATNRTIK COPPERTIK $sCOPPERTIK COPPERTIK2 $sCOPPERTIK2 MATNRTIKT $sMATNRTIKT {

                # CCL �� ��� - ���� 1�� Order Define
                if {$LAYER != "0" && $LAYER2 != "0"} {

                        #PAUSE "$BOMNR $LAYER $LAYER2 $MATNRTIK $COPPERTIK $COPPERTIK2 $MATNRTIKT"

                        if {$LAYER > $::wNO_OF_LAYER || $LAYER2 > $::wNO_OF_LAYER} {
                                PAUSE "Need to Check SAP BOM Layer Information. Call to Spec !!!"
                        }

                        # �β��� ���� ���� ���� + Dry Film �β� 80um �߰� �Ͽ� ����
                        # Dry Film �β� 80um --> 100um ���� (2019.05.23)
                        # �����̷� �β� --> ����β��� ���� ��û (2019.05.27) �ֿ뼮å�� Ȯ��
                        #set thick [format %.3f [expr ($COPPERTIK + $COPPERTIK2 + $MATNRTIKT + 80) / 1000.0]]
                        #set thick [format %.3f [expr ($COPPERTIK + $COPPERTIK2 + $MATNRTIKT + 100) / 1000.0]]
                        set thick [format %.3f [expr ($COPPERTIK + $COPPERTIK2 + ($MATNRTIK * 1000) + 100) / 1000.0]]

                        foreach layer $layer_info {
                                #l01 nega no 3 0.05over cf 100.000 100.000
                                #l02 nega no 2 0.05below ccl 100.000 100.000
                                if {$layer == ""} {continue}

                                # Top Layer
                                if {[format %03d [scan [regsub {^l} [lindex $layer 0] ""] %d]] == [format %03d $LAYER]} {
                                        set layer_top [lindex $layer 0]
                                        set layer_top_order [lindex $layer 3]
                                        set scale_x1 [format %.6f [expr [lindex $layer 6] / 100.0]]
                                        set scale_y1 [format %.6f [expr [lindex $layer 7] / 100.0]]

                                        # �ؼ� : Pattern = N, Tenting = P
                                        if {[lindex $layer 1] == "posi"} {
                                                set polarity1 N
                                        } else {
                                                set polarity1 P
                                        }
                                }

                                # Btm Layer
                                if {[format %03d [scan [regsub {^l} [lindex $layer 0] ""] %d]] == [format %03d $LAYER2]} {
                                        set layer_btm [lindex $layer 0]
                                        set layer_btm_order [lindex $layer 3]
                                        set scale_x2 [format %.6f [expr [lindex $layer 6] / 100.0]]
                                        set scale_y2 [format %.6f [expr [lindex $layer 7] / 100.0]]

                                        # �ؼ� : Pattern = N, Tenting = P
                                        if {[lindex $layer 1] == "posi"} {
                                                set polarity2 N
                                        } else {
                                                set polarity2 P
                                        }
                                }
                        }

                        # CP Layer Define = pOPPOSITE_SCALE �Լ��� Logic ����
                        # Core���� ���� CP 1���� ����
                        foreach cplayer "$cp_1_no $cp_1_yes" {
                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$cplayer -d EXISTS
                                if {$gEXISTS == "no"} {continue}

                                # CP Layer�� Matching �Ǵ� ���� Layer �̸� ����
                                set _layer [lindex [regsub {\-} [regsub {cp} $cplayer "l"] " "] 0]
                                # CP Layer Order ����
                                set cp_order [lindex [regsub {\-} [regsub {cp} $cplayer "l"] " "] 1]
                                set app_layer ""
                                foreach line $layer_info {
                                        # CP Layer �� ���� ���� Layer List ����
                                        if {$cp_order == [lindex $line 3]} {
                                                lappend app_layer [lindex $line 0]
                                        }
                                }
                                puts "cp_order=$cp_order $app_layer"
                                #cp_order=3 l13 l14

                                # CP Layer�� ���� Layer Name Mirror ���� Ȯ��
                                if {[lindex [lsearch -inline $layer_info *$_layer*] 2] == "no"} {
                                        # Mirror=no �� ��� �������� ����, CP Layer ���� ū ���� ���� Layer Scale ����
                                        set mirror no
                                        set polarity negative
                                        set app_layer [lsort -dict -increasing $app_layer]
                                        puts "$layer INCR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
                                        # cp02-3 INCR=no l13 l14
                                        foreach line2 $app_layer {
                                                if {[regsub {l} $line2 ""] > [regsub {l} $_layer ""]} {
                                                        set s_layer $line2
                                                        puts $s_layer
                                                        set scale_x [lindex [lsearch -inline $layer_info *$s_layer*] 6]
                                                        set scale_y [lindex [lsearch -inline $layer_info *$s_layer*] 7]

                                                        puts "CP=$s_layer $scale_x $scale_y"
                                                        # CP=l13 100.2 100.1
                                                        break
                                                } else {
                                                        continue
                                                }
                                        }

                                } else {
                                        # Mirror=yes �� ��� �������� ����, CP Layer ���� ���� ���� ū Layer Scale ����
                                        set mirror yes
                                        set polarity negative
                                        set app_layer [lsort -dict -decreasing $app_layer]
                                        puts "$layer DECR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
                                        # cp25-3 DECR=yes l14 l13
                                        foreach line2 $app_layer {
                                                if {[regsub {l} $line2 ""] < [regsub {l} $_layer ""]} {
                                                        set s_layer $line2
                                                        puts $s_layer
                                                        set scale_x [lindex [lsearch -inline $layer_info *$s_layer*] 6]
                                                        set scale_y [lindex [lsearch -inline $layer_info *$s_layer*] 7]
                                                        puts "CP=$s_layer $scale_x $scale_y"
                                                        # CP=l13 100.2 100.1
                                                        break
                                                } else {
                                                        continue
                                                }
                                        }

                                }

                                puts "CP $cplayer == Matching $s_layer $scale_x $scale_y"

                                if {$s_layer == $layer_btm} {
                                        set layer_top $cplayer
                                        set scale_x1 [format %.6f [expr $scale_x / 100.0]]
                                        set scale_y1 [format %.6f [expr $scale_y / 100.0]]
                                        set polarity1 P
                                } elseif {$s_layer == $layer_top} {
                                        set layer_btm $cplayer
                                        set scale_x2 [format %.6f [expr $scale_x / 100.0]]
                                        set scale_y2 [format %.6f [expr $scale_y / 100.0]]
                                        set polarity2 P
                                }
                        }
                        puts "$layer_top = order $layer_top_order == $layer_btm = order $layer_btm_order"

                        # Size Define - TRIM5 ���Ĵ� ��ũ�� Ȯ�� �� �߰�
                        if {$layer_top_order == $layer_btm_order} {
                                if {$layer_top_order == 1} {
                                        set size TW
                                } elseif {$layer_top_order == $::wEND_ORDER} {
                                        set size TF
                                } elseif {$layer_top_order == 2} {
                                        set size T1
                                } elseif {$layer_top_order == 3} {
                                        set size T2
                                } elseif {$layer_top_order == 4} {
                                        set size T3
                                } elseif {$layer_top_order == 5} {
                                        set size T4
                                } elseif {$layer_top_order == 6} {
                                        set size T5
                                }
                        } elseif {$layer_top_order > $layer_btm_order} {
                                if {$layer_btm_order == 1} {
                                        set size TW
                                } elseif {$layer_btm_order == $::wEND_ORDER} {
                                        set size TF
                                } elseif {$layer_btm_order == 2} {
                                        set size T1
                                } elseif {$layer_btm_order == 3} {
                                        set size T2
                                } elseif {$layer_btm_order == 4} {
                                        set size T3
                                } elseif {$layer_btm_order == 5} {
                                        set size T4
                                } elseif {$layer_btm_order == 6} {
                                        set size T5
                                }
                        } elseif {$layer_top_order < $layer_btm_order} {
                                if {$layer_top_order == 1} {
                                        set size TW
                                } elseif {$layer_top_order == $::wEND_ORDER} {
                                        set size TF
                                } elseif {$layer_top_order == 2} {
                                        set size T1
                                } elseif {$layer_top_order == 3} {
                                        set size T2
                                } elseif {$layer_top_order == 4} {
                                        set size T3
                                } elseif {$layer_top_order == 5} {
                                        set size T4
                                } elseif {$layer_top_order == 6} {
                                        set size T5
                                }
                        }
                        puts "$layer_top = order $layer_top_order == $layer_btm = order $layer_btm_order"

                        # Info Define
                        set text "$layer_top\/$layer_btm $scale_x1 $scale_y1\/$scale_x2 $scale_y2 $thick $polarity1\/$polarity2 $size"

                        # 1�� �̹����� ���ؼ��� ����
                        if {$layer_top_order == 1 || $layer_btm_order == 1} {
                                lappend ::gSCREEN_LDI "$text\n"
                                incr layer_cnt
                        }

                        #PAUSE CNT=$layer_cnt
                }

                # CCL �� �ƴ� ��� - 1�� �̻� Order Define �ʿ� - LDI Data ��ȯ �ڵ�ȭ 3�ܰ� ITEM


                ##################################################################################

        }

        set layer_cnt [expr $layer_cnt * 2]
        #PAUSE CNT2=$layer_cnt

        CLEAR_RESET

        # JOB ETC ���� ����
        set ::gSCREEN_LDI [regsub -all {\} \{} $::gSCREEN_LDI ""]
        set ::gSCREEN_LDI [regsub -all {\{|\}} $::gSCREEN_LDI ""]




        if { $::wSITE == 1} {
                set job $::wJOB
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                set job $::iJOB
        }

        # File Create : ToolNo.workarea
        set screen_ldi_fileID [open $screen_ldi_fpath w]

        # Final Trim ���Ĵ� Trim �� ��� 0 0 ǥ��
        if {$trim_size_1_x == $trim_size_99_x && $trim_size_1_y == $trim_size_99_y} {
                set trim_size_1_x 0
                set trim_size_1_y 0
                set trim_size_2_x 0
                set trim_size_2_y 0
                set trim_size_3_x 0
                set trim_size_3_y 0
                set trim_size_4_x 0
                set trim_size_4_y 0
                set trim_size_5_x 0
                set trim_size_5_y 0
        } elseif {$trim_size_2_x == $trim_size_99_x && $trim_size_2_y == $trim_size_99_y} {
                set trim_size_2_x 0
                set trim_size_2_y 0
                set trim_size_3_x 0
                set trim_size_3_y 0
                set trim_size_4_x 0
                set trim_size_4_y 0
                set trim_size_5_x 0
                set trim_size_5_y 0
        } elseif {$trim_size_3_x == $trim_size_99_x && $trim_size_3_y == $trim_size_99_y} {
                set trim_size_3_x 0
                set trim_size_3_y 0
                set trim_size_4_x 0
                set trim_size_4_y 0
                set trim_size_5_x 0
                set trim_size_5_y 0
        } elseif {$trim_size_4_x == $trim_size_99_x && $trim_size_4_y == $trim_size_99_y} {
                set trim_size_4_x 0
                set trim_size_4_y 0
                set trim_size_5_x 0
                set trim_size_5_y 0
        } elseif {$trim_size_5_x == $trim_size_99_x && $trim_size_5_y == $trim_size_99_y} {
                set trim_size_5_x 0
                set trim_size_5_y 0
        }


        # Head File
        puts $screen_ldi_fileID "# TOOL-NO  : $job"
        puts $screen_ldi_fileID "# LAYER    : $layer_cnt"
        puts $screen_ldi_fileID "# WORKSIZE : $work_x $work_y"
        puts $screen_ldi_fileID "# TRIMF    : $trim_size_99_x $trim_size_99_y"
        puts $screen_ldi_fileID "# TRIM1    : $trim_size_1_x $trim_size_1_y"
        puts $screen_ldi_fileID "# TRIM2    : $trim_size_2_x $trim_size_2_y"
        puts $screen_ldi_fileID "# TRIM3    : $trim_size_3_x $trim_size_3_y"
        puts $screen_ldi_fileID "# TRIM4    : $trim_size_4_x $trim_size_4_y"
        puts $screen_ldi_fileID "# TRIM5    : $trim_size_5_x $trim_size_5_y"


        # MAIN
        puts $screen_ldi_fileID $::gSCREEN_LDI
        close $screen_ldi_fileID

        puts "########## CREATE $job.scrnldi File Success! ##########"
        puts "########## CREATE $job.scrnldi File Success! ##########"
        puts "########## CREATE $job.scrnldi File Success! ##########"
        puts "########## CREATE $job.scrnldi File Success! ##########"

        if { $::wETC_DATA_CREATE == 1 } {
                PAUSE "########## CREATE $job.scrnldi File Success! ##########"
        }

        # END
}


################################################################################
## Procedure    : pROGERS
## ����         : ROGERS ������ ��� �����ʷ� �̻���, PSR 8�� GUIDE ���� Full Copper ����
## Input        :
## Return       :

proc pROGERS { } {
        puts "####### pROGERS ##################################################"

        # Rogers �� �ƴҰ�� Return
        if {$::wROGERS != 1 || $::wNO_OF_LAYER == 2} {
                puts "Rogers = $::wROGERS Layer = $::wNO_OF_LAYER"
                return
        }

        DO_INFO -t matrix -e $::wJOB/matrix,units=mm

        CLEAR_RESET

        # Layer Affect
        foreach name $gROWname context $gROWcontext side $gROWside {
                puts "$name $context $side"
                if {$context == "board" && $side == "inner"} {
                        COM affected_layer,name=$name,mode=single,affected=yes
                }

        }

        # Auto Peelar ����
        COM filter_reset,filter_name=popup
        COM filter_atr_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=auto_peelar
        COM filter_area_end,layer=,filter_name=popup,operation=select
        COM get_select_count
        set sel_cnt $::COMANS
        if {$sel_cnt != 0} {
               COM sel_delete
        }

        # PSR 8�� Guide ���� Dummy Cut Positive ����
        COM filter_reset,filter_name=popup
        COM filter_atr_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=sr_auto_expo_out*
        COM filter_area_end,layer=,filter_name=popup,operation=select
        COM get_select_count
        set sel_cnt $::COMANS
        if {$sel_cnt != 0} {
               COM sel_polarity,polarity=positive
        }

}


################################################################################
## Procedure    : pARRAY_COPPER_AREA
## ����         : Array Copper Area ���
## Input        :
## Return       :
##

proc pARRAY_COPPER_AREA {} {

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        set ::gMASTER_CU_VALUE ""

        set folder_path /daeduck/samba/common/Array_copper_area
        if { [file exists $folder_path] == 0 } {
                file mkdir $folder_path
        }
        set Date        [clock format [clock scan now] -format %y/%m/%d]
        set Time        [clock format [clock scan now] -format %H:%M:%S]
        set time        [clock format [clock scan now] -format %y%m%d%H%M%S]
        set fpath       "/daeduck/samba/common/Array_copper_area/$::wJOB.array_cu"
        if {[file exists $fpath]} {
                file copy -force $fpath ${fpath}.$time
        }


        # Panel ���� ���� Check
        DO_INFO -t step -e $::wJOB/$::wPANEL -d exists
        if {$gEXISTS == "yes"} {
                PAUSE "Panel $::wPANEL is already exist, Would you check !!!"
                return
        }


        # Panel ����
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        set active_area_x $::wTRIM_TO_ACTIVE_X
        set active_area_y $::wTRIM_TO_ACTIVE_Y

        COM create_entity,job=$::wJOB,type=step,name=$::wPANEL

	STEP_ON $::wJOB $::wPANEL no
	COM units,type=mm

	COM profile_rect,x1=0,y1=0,x2=$work_x,y2=$work_y
	COM zoom_home

        if {$::wORIENTATION == "manual"} {
                PAUSE "Step&Repeat Manual !!!"
        } else {
                COM sr_auto,step=$::wSR_STEP,num_mode=multiple,xmin=0,ymin=0,width=$work_x,height=$work_y,panel_margin=0,step_margin=0,gold_plate=no,orientation=$::wORIENTATION,evaluate=no,active_margins=yes,top_active=$active_area_y,bottom_active=$active_area_y,left_active=$active_area_x,right_active=$active_area_x,step_xy_margin=yes,step_margin_x=$::wARRAY_DX,step_margin_y=$::wARRAY_DY
        }

        ########################################################################
        set answer [tk_messageBox -type yesno -message "Panel Array Check !!! Continue ??"]
        if {$answer == "no"} {
                # ���� ���� PNL ���� �� Return
                DO_INFO -t step -e $::wJOB/$::wPANEL -d exists
                if {$gEXISTS == "yes"} {
                        COM delete_entity,job=$::wJOB,type=step,name=$::wPANEL
                }
                return
        }



        # Dummy ����
        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        #set gROWrow             = ('1'           '2'           '3'        '4'            '5'            '6'            '7'            '8'            '9'            '10'           '11'           '12'           '13'           '14'           '15'           '16'           '17'           '18'           '19'           '20'           '21'           '22'           '23'           '24'           '25'           '26'           '27'           '28'           '29'           '30'           '31'           '32'           '33'          '34'          '35'       '36'       '37'       '38'       '39'       '40'          '41'       '42'       '43'       '44'       '45'       '46'       '47'       '48'         '49'         '50'          '51'    '52'       '53'       '54'       '55'       '56'       '57'       '58'       '59'       '60'    '61'       '62'       '63'    '64'       '65'       '66'       '67'       '68'       '69'       '70'       '71'       '72'       '73'       '74'       '75'       '76'       '77'       '78'       '79'       '80'       '81'       '82'       '83'       '84'       '85'       '86'       '87'       '88'       '89'       '90'       '91'       '92'       '93'       '94'       '95'       '96'       '97'       '98'       '99'        '100'       '101'         '102'         '103'      '104'      '105'      '106'      '107'      '108'      '109'       '110'       '111'       '112'       '113'       '114'       '115'       '116'       '117'       '118'       '119'       '120'       '121'       '122'       '123'       '124'       '125'       '126'       '127'       '128'       '129'       '130'       '131'       '132'       '133'       '134'       '135'       '136'       '137'       '138'      )
        #set gROWtype            = ('layer'       'layer'       'layer'    'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'       'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'      'layer'      'layer'       'empty' 'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'empty' 'layer'    'layer'    'empty' 'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'     'layer'     'layer'       'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'    )
        #set gROWname            = ('m01'         's01'         'l01'      'l02'          'l03'          'l04'          'l05'          'l06'          'l07'          'l08'          'l09'          'l10'          'l11'          'l12'          'l13'          'l14'          'l15'          'l16'          'l17'          'l18'          'l19'          'l20'          'l21'          'l22'          'l23'          'l24'          'l25'          'l26'          'l27'          'l28'          'l29'          'l30'          's30'         'm30'         'rbm'      'c01'      'd01'      'd01-x'    'd01-np'   'd01-milling' 'd0125b'   'd0125d'   'd0130c'   'd0229m'   'd0328m'   'd0427m'   'd06g'   'd0526g-ppg' 'd0526g-ccl' 'd0526g-film' ''      'c0102c'   'c0203c'   'c0304c'   'c0405c'   'c3029c'   'c2928c'   'c2827c'   'c2726c'   ''      'c0102p'   'c3029p'   ''      'cu0102'   'cu0203'   'cu0304'   'cu0405'   'cu3029'   'cu2928'   'cu2827'   'cu2726'   'ana'      'ana01'    'ana02'    'tent01'   'tent30'   'p01'      'p30'      'cp01-5'   'cp02-4'   'cp03-3'   'cp04-2'   'cp05-1'   'cp26-1'   'cp27-2'   'cp28-3'   'cp29-4'   'cp30-5'   'l01-1'    'l30-1'    'l01-2'    'l30-2'    'etch01'   'etch30'   's-etch01' 's-etch30' 's-mask01' 's-mask30' 'sr-mask01' 'sr-mask30' 'sr-mask01-2' 'sr-mask30-2' 's-tent01' 's-tent30' 'e-mask01' 'e-mask30' 'p-mask01' 'p-mask30' 'touch_l01' 'touch_l30' 'touch_l05' 'touch_l07' 'touch_l09' 'touch_l11' 'touch_l13' 'touch_l15' 'touch_l17' 'touch_l19' 'touch_l21' 'touch_l23' 'touch_l25' 'touch_l04' 'touch_l03' 'touch_l02' 'touch_l06' 'touch_l08' 'touch_l10' 'touch_l12' 'touch_l14' 'touch_l16' 'touch_l18' 'touch_l20' 'touch_l22' 'touch_l24' 'touch_l26' 'touch_l27' 'touch_l28' 'touch_l29')
        #set gROWcontext         = ('board'       'board'       'board'    'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'       'board'       'board'    'board'    'board'    'board'    'board'    'board'       'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'      'board'      'board'       ''      'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    ''      'board'    'board'    ''      'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'     'board'     'board'       'board'       'board'    'board'    'board'    'board'    'board'    'board'    'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'     )
        #set gROWlayer_type      = ('silk_screen' 'solder_mask' 'signal'   'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'solder_mask' 'silk_screen' 'document' 'document' 'drill'    'drill'    'drill'    'drill'       'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'      'drill'      'drill'       ''      'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    ''      'drill'    'drill'    ''      'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document'  'document'  'document'    'document'    'document' 'document' 'document' 'document' 'document' 'document' 'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'   )
        #set gROWlayer_base_type = ('silk_screen' 'solder_mask' 'signal'   'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'solder_mask' 'silk_screen' 'document' 'document' 'drill'    'drill'    'drill'    'drill'       'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'      'drill'      'drill'       ''      'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    ''      'drill'    'drill'    ''      'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document'  'document'  'document'    'document'    'document' 'document' 'document' 'document' 'document' 'document' 'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'   )
        #set gROWpolarity        = ('positive'    'positive'    'positive' 'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'    'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'   'positive'   'positive'    ''      'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' ''      'positive' 'positive' ''      'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'  'positive'  'positive'    'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive' )
        #set gROWside            = ('top'         'top'         'top'      'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'bottom'       'bottom'      'bottom'      'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )
        #set gROWdrl_startl01'      'l01'      'l01'      'l01'         'l01'      'l01'      'l01'      'l02'      'l03'      'l04'      'l05'      'l01'        'l01'        'l01'         ''      'l01'      'l02'      'l03'      'l04'      'l29'      'l28'      'l27'      'l26'      ''      'l01'      'l
        #set gROWdrl_endl30'      'l30'      'l30'      'l30'         'l25'      'l25'      'l30'      'l29'      'l28'      'l27'      'l26'      'l30'        'l30'        'l30'         ''      'l02'      'l03'      'l04'      'l05'      'l30'      'l29'      'l28'      'l27'      ''      'l02'      'l
        #set gROWfoil_side       = ('none'        'none'        'top'      'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'bottom'       'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )
        #set gROWsheet_side      = ('none'        'none'        'top'      'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )

        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type context $gROWcontext {
                if {$context != "board" || [regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]} {continue}
                AFFECT $name
                COM fill_params,type=solid,origin_type=datum,solid_type=surface

                DO_INFO -t step -e $::wJOB/$::wPANEL -d SR_LIMITS , units=mm
                # Gap 2.2mm �ʰ��� ��� 0.75mm Cut(����), Gap 2.2mm ������ ��� 1.1mm Cut(�߰�) (2019.01.07 Dummy Cut ���� ������Ʈ)
                if {$::wARRAY_DX <= 2.2 || $::wARRAY_DY <= 2.2} {
                        set sr_margin_x 1.1
                        set sr_margin_y 1.1
                } else {
                        set sr_margin_x 0.75
                        set sr_margin_y 0.75
                }

                set step_margin_x 0
                set step_margin_y 0

                # ����
                if {[regexp {top|bottom} $side]} {
                        COM fill_params,type=solid,origin_type=datum,solid_type=surface,std_type=line,min_brush=50.8,use_arcs=yes,symbol=,dx=2.54,dy=2.54,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=no,outline_draw=no,outline_width=0,outline_invert=no
                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                        COM fill_params,type=solid,origin_type=datum,solid_type=surface
                } elseif {[regexp {inner} $side]} {
                        # ����
                        set dx [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
                        set dy [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

                        set d_symbol dd.pnl.mlb_dummy_in_t_${dx}x$dy
                        set d_symbol dd.pnl.mlb_dummy_in_b_${dx}x$dy

                        # cut_prims=no �� ������ �ð� ���� �߻� �� PAD ������ ������ ��� ���� �ʿ�
                        set cut_prims no

                        COM fill_params,type=pattern,origin_type=datum,solid_type=surface,std_type=line,min_brush=25.4,use_arcs=yes,symbol=$d_symbol,dx=$dx,dy=$dy,std_angle=45,std_line_width=254,std_step_dist=1270,std_indent=odd,break_partial=yes,cut_prims=$cut_prims,outline_draw=no,outline_width=0,outline_invert=no
                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=$::wSR_STEP,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no
                        COM fill_params,type=solid,origin_type=datum,solid_type=surface
                }


                # Panel Resolution Define : 25.4
                if { [regexp {panel} $::wPANEL]} {
                        set res_value 25.4
                } else {
                        set res_value 25.4
                }

                set layer $name
                COM copper_area,layer1=$layer,layer2=,drills=yes,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes
                set result $::COMANS
                set area($layer)        [format %.1f [lindex $result 0]]
                set percent($layer)     [format %.1f [lindex $result 1]]
                set text "[string toupper $layer]     [format %6.1f $area($layer)] sq/mm    $percent($layer) %"
                lappend ::gMASTER_CU_VALUE "$text\n"
        }

        # ::gMASTER_CU_VALUE ���� ����
        set ::gMASTER_CU_VALUE [regsub -all {\} \{} $::gMASTER_CU_VALUE ""]
        set ::gMASTER_CU_VALUE [regsub -all {\{|\}} $::gMASTER_CU_VALUE ""]

        set fileID [open $fpath w]

        puts $fileID "TOOL_NO   : $::wJOB"
        puts $fileID "STEP      : $::wPANEL"
        puts $fileID "WORK_SIZE : $work_x x $work_y"
        puts $fileID "DATE      : $Date $Time"
        puts $fileID "OUTPUT    : $::wUSER_ID"
        puts $fileID " "

        puts $fileID "RESOLUTION : $res_value um"
        puts $fileID "===================================="
        puts $fileID "LAYER   Cu_Area           Percentage"
        puts $fileID $::gMASTER_CU_VALUE
        puts $fileID "===================================="

        close $fileID

        exec gedit $fpath
}




################################################################################
## Procedure    : pXACT_I2X_CREATE
## ����         : Optec ���� ��ǥ ���� ���� (i2x File)
## Input        : ::wJOB ::wNO_OF_LAYER ::wPANEL
## Return       :

proc pXACT_I2X_CREATE { } {

        puts "####### pXACT_I2X_CREATE START #################################"
        puts "####### pXACT_I2X_CREATE START #################################"
        puts "####### pXACT_I2X_CREATE START #################################"

        if {$::wNO_OF_LAYER == 2} {
                return
        }

        if {$::wSITE != 1 || ![regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB]} {
                puts "It is not Regular Tool or KOREA Site!!"
                return
        }

        if {$::wINCAM == 1} {
                set sap_path $::env(INCAM_SERVER)/site_data/sap_info_down
        } else {
                set sap_path /genesis/share/sap_info_down
        }

        # ������ Scale ����
        pSAP_DATA_DOWN $::wJOB $sap_path TABLE_INFO 1130

        lappend sLAYERFR 1
        lappend sLAYERTO $::wNO_OF_LAYER

        set sub_a 0
        set sub_b 0

        foreach SUB $sSUB LAYERFR $sLAYERFR LAYERTO $sLAYERTO {

                if {$SUB == "A"} {
                    if {$sub_a == 0} {
                        set sub_a 1
                    } else {
                        continue
                    }
                } elseif {$SUB == "B"} {
                    if {$sub_b == 0} {
                        set sub_b 1
                    } else {
                        continue
                    }
                }

                set f_start $LAYERFR
                set f_end   $LAYERTO

                # FTP Define
                set FTP_IP 192.168.6.244
                set FTP_ID CAM_root
                set FTP_PW daeduck151root
                set FTP_PATH CAM/CAMDATA10/TRIM
                set LOCAL_PATH /daeduck/samba/common/optec_coupon_position/

                # inch -> mm Change
                COM open_entity,job=$::wJOB,type=step,name=$::wPANEL,iconic=no
                COM units,type=mm

                # PNL X/Y Center
                DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS, units=mm
                set xPNL_center [expr $gPROF_LIMITSxmax / 2.0]
                set yPNL_center [expr $gPROF_LIMITSymax / 2.0]

                # Board Layer Optec_coupon PAD  COPY
                for { } {$f_start <= $f_end} {incr f_start} {
                    if {$::wNO_OF_LAYER >= 100} {
                        if {$f_start >= 100 } {
                            COM affected_layer,name=l$f_start,mode=single,affected=yes
                        } elseif {$f_start >= 10} {
                            COM affected_layer,name=l0$f_start,mode=single,affected=yes
                        } else {
                            COM affected_layer,name=l00$f_start,mode=single,affected=yes
                        }
                    } else {
                        if {$f_start >= 10 } {
                                COM affected_layer,name=l$f_start,mode=single,affected=yes
                        } else {
                                COM affected_layer,name=l0$f_start,mode=single,affected=yes
                        }
                    }
                }

                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=optec_coupon
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r1000\;r1200\;r1500
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM sel_copy_other,dest=layer_name,target_layer=imsi_optec,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                COM affected_layer,mode=all,affected=no
                COM display_layer,name=imsi_optec,display=yes,number=1
                COM work_layer,name=imsi_optec

                # NFT Removal (Duplicate PAD remove)
                COM chklist_single,action=valor_dfm_nfpr,show=yes
                COM chklist_cupd,chklist=valor_dfm_nfpr,nact=1,params=((pp_layer=.affected)(pp_delete=Duplicate)(pp_work=Features)(pp_drill=)(pp_non_drilled=No)(pp_in_selected=All)(pp_remove_mark=Remove)),mode=regular
                COM chklist_run,chklist=valor_dfm_nfpr,nact=1,area=global
                COM chklist_close,chklist=valor_dfm_nfpr,mode=hide
                COM disp_on
                COM origin_on

                # OP11 Copy
                COM filter_area_strt
                COM filter_area_xy,x=$xPNL_center,y=$yPNL_center
                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymax
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM sel_copy_other,dest=layer_name,target_layer=imsi_optec1,invert=no,dx=0,dy=0,size=0,x_anchor=$xPNL_center,y_anchor=$yPNL_center,rotation=270,mirror=none

                # OP12 Copy
                COM filter_area_strt
                COM filter_area_xy,x=$xPNL_center,y=$yPNL_center
                COM filter_area_xy,x=$gPROF_LIMITSxmax,y=$gPROF_LIMITSymin
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM sel_copy_other,dest=layer_name,target_layer=imsi_optec2,invert=no,dx=0,dy=0,size=0,x_anchor=$xPNL_center,y_anchor=$yPNL_center,rotation=270,mirror=none

                # OP21 Copy
                COM filter_area_strt
                COM filter_area_xy,x=$xPNL_center,y=$yPNL_center
                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymax
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM sel_copy_other,dest=layer_name,target_layer=imsi_optec3,invert=no,dx=0,dy=0,size=0,x_anchor=$xPNL_center,y_anchor=$yPNL_center,rotation=270,mirror=none

                # OP22 Copy
                COM filter_area_strt
                COM filter_area_xy,x=$xPNL_center,y=$yPNL_center
                COM filter_area_xy,x=$gPROF_LIMITSxmin,y=$gPROF_LIMITSymin
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM sel_copy_other,dest=layer_name,target_layer=imsi_optec4,invert=no,dx=0,dy=0,size=0,x_anchor=$xPNL_center,y_anchor=$yPNL_center,rotation=270,mirror=none

                # imsi Layer Delete
                COM delete_layer,layer=imsi_optec
                COM delete_layer,layer=imsi_optec+++


                # Trim Info Load ######################################################################################
                set trim_info_file_name "dde_mlb_panel_trim.info"

                if {$::wINCAM == 1} {
                    if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                    }
                } else {
                    if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                    }
                }

                if {[info exists file_path]} {
                        set f [open $file_path/$trim_info_file_name r]
                        set trim_info [split [read $f] "\n"]
                        close $f
                } else {
                        # 2L
                        puts "2L need not create $::wJOB.i2x File!!!"
                        return
                }

                set trim_x [lindex [lindex $trim_info 0] 3]
                set trim_y [lindex [lindex $trim_info 0] 4]


                # i2x File Create
                if { $LAYERFR == "1" && $LAYERTO == $::wNO_OF_LAYER } {
                        set f [open /daeduck/samba/common/optec_coupon_position/${::wJOB}_ALL.i2x w]
                        set file_name ${::wJOB}_ALL.i2x
                } else {
                        set f [open /daeduck/samba/common/optec_coupon_position/${::wJOB}_$LAYERFR-$LAYERTO.i2x w]
                        set file_name ${::wJOB}_$LAYERFR-$LAYERTO.i2x
                }

                # KVOLT 90 -> 80 ���� (2019.04.10 ���ر� ��û)

                puts $f "// File Name     : $::wJOB.I2X\r"
                puts $f "// Creation Date : [clock format [clock scan now] -format %m/%d/%Y]\r"
                puts $f "// Program Generated With PPWizard\r"
                puts $f "\r"
                puts $f "// SECTION HEADER\r"
                puts $f "\r"
                puts $f "// X-Rays\r"
                puts $f "KVOLT 80\r"
                puts $f "\r"
                puts $f "// Vision\r"
                puts $f "CONTR 240\r"
                puts $f "BRIGH 40\r"
                puts $f "CCDFR 1\r"
                puts $f "INTFR 8\r"
                puts $f "\r"
                puts $f "//Pads\r"
                puts $f "SHAPE    CIRC\r"
                puts $f "SIZE     1.000\r"
                puts $f "SMODE    2\r"
                puts $f "PTPTOL   0.800\r"
                puts $f "DISTOL   0.300\r"
                puts $f "GLBTOL   0.800\r"
                puts $f "PANELSIZE $trim_y.,$trim_x.\r"
                puts $f "\r"
                puts $f "//END SECTION HEADER\r"
                puts $f "\r"
                puts $f "// PROGRAM\r"

                # OF11/OF12/OF21/OF22 Loop
                for { set loop 1 } { $loop < 5 } { incr loop } {

                        # op count define
                        if { $loop == "1" } {
                                set of_count of11
                        } elseif { $loop == "2" } {
                                set of_count of12
                        } elseif { $loop == "3" } {
                                set of_count of21
                        } elseif { $loop == "4" } {
                                set of_count of22
                        }

                        # OF and SF X/Y Coordinates
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/imsi_optec$loop -d FEATURES, units=mm
                        foreach line $::data {
                                if { [lindex $line 0] == "###" } {continue}
                                if { [lindex $line 3] == "r1200" || [lindex $line 3] == "r1500" } {
                                        set ${of_count}_x [lindex $line 1]
                                        set ${of_count}_y [lindex $line 2]
                                        if { [lindex $line 3] == "r1200" } {
                                                set ${of_count}_size 1.2
                                        } elseif { [lindex $line 3] == "r1500" } {
                                                set ${of_count}_size 1.5
                                        }
                                } elseif { [lindex $line 3] == "r1000" } {
                                        lappend ${of_count}_x_sf [lindex $line 1]
                                        lappend ${of_count}_y_sf [lindex $line 2]
                                }
                        }
                        puts $f "\r"
                        puts $f "[string toupper $of_count] X [format %.3f [expr [subst $[subst ${of_count}_x]] - $xPNL_center]] Y [format %.3f [expr [subst $[subst ${of_count}_y]] - $yPNL_center]] SIZE [subst $[subst ${of_count}_size]]"


                        set count 1
                        foreach line1 [subst $[subst ${of_count}_x_sf]] line2 [subst $[subst ${of_count}_y_sf]] {
                                set line1 [expr $line1 - [subst $[subst ${of_count}_x]]]
                                set line2 [expr $line2 - [subst $[subst ${of_count}_y]]]


                                if {$count > 1} {
                                        if {$chk_x == [format %.3f $line1] && $chk_y == [format %.3f $line2]} {
                                                continue
                                        }
                                }
                                set chk_x [format %.3f $line1]
                                set chk_y [format %.3f $line2]

                                puts $f "SF$count DX [format %.3f $line1] DY [format %.3f $line2]"
                                incr count
                        }
                }
                close $f

                # imsi Layer Delete
                COM delete_layer,layer=imsi_optec1
                COM delete_layer,layer=imsi_optec2
                COM delete_layer,layer=imsi_optec3
                COM delete_layer,layer=imsi_optec4
                unset of11_x_sf
                unset of11_y_sf
                unset of12_x_sf
                unset of12_y_sf
                unset of21_x_sf
                unset of21_y_sf
                unset of22_x_sf
                unset of22_y_sf

                # FTP UPLOAD
                pFTP_INTERFACE $FTP_IP $FTP_ID $FTP_PW $FTP_PATH $LOCAL_PATH $file_name


                CLEAR_RESET
                puts "####### pXACT_I2X_CREATE END #################################"
                puts "####### pXACT_I2X_CREATE END #################################"
                puts "####### pXACT_I2X_CREATE END #################################"

                if { $::wETC_DATA_CREATE == 1 } {
                        PAUSE "########## CREATE $file_name File Success! ##########"
                }
        }


}



#############################################################################
## Procedure    :  pXACT_CSV_CREATE
## ����         : XACT *.cvs ���� ���� Script
## Input        : ::wJOB ::wPANEL
## Return       :

proc pXACT_CSV_CREATE {} {

        puts "####### pXACT_CSV_CREATE START #################################"
        puts "####### pXACT_CSV_CREATE START #################################"
        puts "####### pXACT_CSV_CREATE START #################################"

        if {$::wSITE != 1 || ![regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB]} {
                puts "It is not Regular Tool or KOREA Site!!"
                return
        }

        if {$::wINCAM == 1} {
                set sap_path $::env(INCAM_SERVER)/site_data/sap_info_down
        } else {
                set sap_path /genesis/share/sap_info_down
        }

        proc pCAM_DATA {top bot} {

                if {$top == 0 || $bot == 0} { return }

                if {$::wNO_OF_LAYER >= 100} {
                    set top l[format %03d [scan $top %d] ]
                    set bot l[format %03d [scan $bot %d] ]
                } else {
                    set top l[format %02d [scan $top %d] ]
                    set bot l[format %02d [scan $bot %d] ]
                }

                foreach layer "$top $bot"  {
                        COM copper_area,layer1=$layer,layer2=,drills=no,consider_rout=no,ignore_pth_no_pad=no,drills_source=matrix,thickness=0,resolution_value=25.4,x_boxes=3,y_boxes=3,area=no,dist_map=yes
                        set result $::COMANS
                        set percent($layer)     [format %.1f [lindex $result 1]]
                }

                #genesis image params
                foreach layer "$top $bot" {
                        #ScaleX
                        DO_INFO -t layer -e $::wJOB/panel/$layer -d LPD -p xstretch, units=mm
                        set ScaleX($layer) $gLPDxstretch

                        #ScaleY
                        DO_INFO -t layer -e $::wJOB/panel/$layer -d LPD -p ystretch, units=mm
                        set ScaleY($layer) $gLPDystretch
                }
                return "$percent($top) $ScaleX($top) $ScaleY($top) $percent($bot) $ScaleX($bot) $ScaleY($bot)"
        }

        # SAP Interface Error ó�� Logic ������Ʈ - (2020.06.04)
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                pSAP_DATA_DOWN $::wJOB $sap_path TABLE_LIST
        } else {
                return
        }

        # SAP Drill TAble �� ���� ��� Return
        if {[lsearch $sTABLE_LIST 1160] != -1} {

        } else {
                PAUSE "ERROR (pXACT_CSV_CREATE) : SAP DRILL Tab Table Info create need.. Call to SPEC !!!"
                return
        }


        #create csv file
        set file_path /daeduck/samba/common/xact/$::wJOB.csv
        set f [open $file_path w]

        #1.PanelCode
        puts $f "PanelCode"

        #2.Tool NO Info
        puts $f "PanelName,$::wJOB"

        #3.PanelID
        puts $f "PanelID"

        #4.WorkSize/Warp Info
        pSAP_DATA_DOWN $::wJOB $sap_path TABLE_INFO 1110
        set WorkSizeX [lindex $sWORKSIZEX 0]
        set WorkSizeY [lindex $sWORKSIZEY 0]
        set Warp [lindex $sWORKSIZEX 0]
        set LAYER_NO [lindex $sLAYERNR 0]
        puts $f "Size,$WorkSizeX,$WorkSizeY"
        puts $f "Warp,$Warp"

        #5.DRILL MinPTH/MinLand Info
        pSAP_DATA_DOWN $::wJOB $sap_path TABLE_INFO 1160
        set PROCNM $sPROCNM
        set LAYERFR $sLAYERFR
        set LAYERTO $sLAYERTO
        set MinPTH 10000

        foreach layerfr $LAYERFR layerto $LAYERTO svh $sSVH {
                if { "$layerfr" == "1" && "$layerto" == "$LAYER_NO" } {
                        if { $MinPTH >= $svh } { set MinPTH $svh }
                }
        }

        set MinPTH [expr $MinPTH * 1000]
        set Clearance [lindex [lsort -real $sCLEARANCE] 0]
        set Clearance [expr $Clearance * 1000]

        puts $f "MinPTH,$MinPTH"
        puts $f "MinLand,100"
        puts $f "MinDTC,$Clearance"
        puts $f "MinARRem,25"

        #6.SolderMask
        puts $f "SolderMask"

        #7.FinalPressCycle
        pSAP_DATA_DOWN $::wJOB $sap_path TABLE_INFO 1120
        set meterial ""
        foreach RAWGR $sRAWGR MAKTX $sMAKTX {
                if { $RAWGR == "CCL" } { lappend meterial "$MAKTX" }
        }
        set meterial [lsort -unique $meterial]
        if { [llength $meterial] > 1 } {
                set imsi [lindex $meterial 0]
                foreach line [lrange $meterial 1 end] {
                        set imsi "$imsi/$line"
                }
                set meterial $imsi
        }
        puts $f "FinalPressCycle,$meterial"

        #8.RefDrillScaling,LargeMeasurement,SmallMeasureUnit,ScaleUnit,DrillScaleUnit
        puts $f "RefDrillScaling"
        puts $f "LargeMeasurement,mm"
        puts $f "SmallMeasureUnit,micron"
        puts $f "ScaleUnit,apc"
        puts $f "DrillScaleUnit,apc"

        pSAP_DATA_DOWN $::wJOB $sap_path TABLE_INFO 1120
        COM open_job,job=$::wJOB
        STEP_ON $::wJOB panel yes
        foreach LAYER $sLAYER LAYER2 $sLAYER2 RAWGR $sRAWGR MAKER $sMAKER MAKTX $sMAKTX SPEC $sSPEC MATNRTIK $sMATNRTIK COPPERTIK $sCOPPERTIK COPPERTIK2 $sCOPPERTIK2 {
                if { [regexp {CCL} $RAWGR] == 1 } {
                        set RAWGR [regsub "CCL" $RAWGR "Core"]
                } elseif { [regexp {PPG} $RAWGR] == 1 } {
                        set RAWGR [regsub "PPG" $RAWGR "Prepreg"]
                } elseif { [regexp {C\/F} $RAWGR] == 1 } {
                        set RAWGR [regsub "C\/F" $RAWGR "CopperFoil"]
                }

                if { [regexp {SILK|PSR} $RAWGR] == 1 } { continue }

                if { $RAWGR == "CopperFoil" } {
                        set cMAKER [format %.f $COPPERTIK]um
                        set cMAKTX $COPPERTIK
                        set cSPEC ""
                        set cMATNRTIK ""
                        set cWarp ""
                        set cCOPPERTIK ""
                        set cCOPPERTIK2 ""
                        set value [pCAM_DATA $LAYER $LAYER]
                }

                if { $RAWGR == "Prepreg" } {
                        set pSPEC [regsub -all {\#} [lindex $SPEC 0] ""]
                        set pMATNRTIK [lindex $SPEC 1]
                }

                if { $RAWGR == "Core"} {
                        set oSPEC [regsub -all {\#} [lindex $SPEC 0] ""]
                        set oCOPPERTIK [format %.f $COPPERTIK]um
                        set oCOPPERTIK2 [format %.f $COPPERTIK2]um
                        set oMATNRTIK [expr $MATNRTIK * 1000]
                        set value [pCAM_DATA $LAYER $LAYER2]
                        puts $f "$RAWGR,$MAKER,$MAKTX,$oSPEC,$oMATNRTIK,$Warp,$oCOPPERTIK,$COPPERTIK,,,[lindex $value 0],[lindex $value 1],[lindex $value 2],$oCOPPERTIK2,$COPPERTIK2,,,[lindex $value 3],[lindex $value 4],[lindex $value 5]"
                } elseif { $RAWGR == "Prepreg" } {
                        puts $f "$RAWGR,$MAKER,$MAKTX,$pSPEC,$pMATNRTIK,$Warp"
                } elseif { $RAWGR == "CopperFoil" } {
                        puts $f "$RAWGR,$cMAKER,$cMAKTX,$cSPEC,$cMATNRTIK,$cWarp,$cCOPPERTIK,$cCOPPERTIK2,,,[lindex $value 0],[lindex $value 1],[lindex $value 2]"
                } else {
                        continue
                }
        }
        COM editor_page_close

        #10.DRILL
        foreach procnm $PROCNM layerfr $LAYERFR layerto $LAYERTO {
                puts $f "$procnm,$layerfr,$layerto"
        }

        ##sub drill tap
        foreach procnm $PROCNM layerfr $LAYERFR layerto $LAYERTO {
                set sDRILL "$layerfr $layerto"
                set bom_no ""

                foreach no $sDRILL {
                        foreach BOMNR $sBOMNR LAYER $sLAYER LAYER2 $sLAYER2 {
                                if { $no == $LAYER } {
                                        lappend bom_no $BOMNR
                                } elseif { $no == $LAYER2 } {
                                        lappend bom_no $BOMNR
                                }
                        }
                }

                set list ""
                for { set i [lindex $bom_no 0] } { $i <= [lindex $bom_no 1] } { incr i } {
                        set list "$list $i"
                }
                set maktx ""

                foreach line $list {
                        foreach BOMNR $sBOMNR LAYER $sLAYER LAYER2 $sLAYER2 rawgr $sRAWGR MAKTX $sMAKTX {
                                if { $line == $BOMNR && $rawgr == "CCL" } {
                                        set maktx "$maktx $MAKTX"
                                }
                        }
                }
                set maktx [lsort -unique $maktx]
                if { [llength $maktx] > 1 } {
                        set imsi [lindex $maktx 0]
                        foreach line [lrange $maktx 1 end] {
                                set imsi "$imsi/$line"
                        }
                        set maktx $imsi
                }
                puts $f "sub,$layerfr,$layerto,$maktx"
        }

        #11.Scale
        pSAP_DATA_DOWN $::wJOB $sap_path TABLE_INFO 1110
        set WorkSizeX [lindex $sWORKSIZEX 0]
        set WorkSizeY [lindex $sWORKSIZEY 0]
        set offsetx [format %03.3f [expr (($WorkSizeX + 0.05) / $WorkSizeX) * 100]]
        set offsety [format %03.3f [expr (($WorkSizeY + 0.05) / $WorkSizeY) * 100]]

        puts $f "OffsetScaling,$offsetx,$offsety"
        close $f

        puts "####### pXACT_CSV_CREATE END #################################"
        puts "####### pXACT_CSV_CREATE END #################################"
        puts "####### pXACT_CSV_CREATE END #################################"


}


################################################################################
## Procedure    : pJOB_LAYER_SCALE_LOAD
## ����         : Scale Excel File Info Load
## Input        : mod = 0 - Layer Info. Tab / mod = 1 - Scale Change Tab
## Return       :

proc pJOB_LAYER_SCALE_LOAD {{mod 0}} {

        puts "############ LAYER SCALE LOAD START !!! ############"
        puts "############ LAYER SCALE LOAD START !!! ############"
        puts "############ LAYER SCALE LOAD START !!! ############"

        if {$mod == 1} {
                set check [SCALE_TABLELIST get 0 end]
                if {$check == ""} {
                        PAUSE "ERROR (pJOB_LAYER_SCALE_LOAD) : Need CURRENT SCALE Info. LOAD!!!"
                        return
                }
        }

        set job_layer_scale $::wJOB.xlsx
        set set_dir   /daeduck/samba/common/scale
        set temp_path /daeduck/scripts/temp
        set typelist {
            {"xlsx File" {".xlsx"}}
        }
        set fileName [tk_getOpenFile -filetypes $typelist -initialdir $set_dir]
        set fileName_xlsx [lindex [regsub -all "/" $fileName " "] end]
        set fileName_csv [regsub ".xlsx" $fileName_xlsx ".csv"]

        puts "$fileName $fileName_xlsx $fileName_csv"
        if {![regexp [string toupper $::wJOB] $fileName_xlsx]} {
                if { [tk_messageBox -type yesno -message "\[$fileName_xlsx\] File name is correct??"] == "no" } {
                        return
                }
        }


        # Temp ������ ���� Copy �� csv�� ��ȯ
        file copy -force $fileName $temp_path/$fileName_xlsx
        set chk [exec /usr/bin/ssconvert $temp_path/$fileName_xlsx $temp_path/$fileName_csv &]
        if {$chk == ""} {
            tk_messageBox -message "File Converting ERROR!!!"
            return
        } else {

        }

        cd $temp_path
        # file ��ȯ �ð� ����
        for {set i 1} {$i < 1000} {incr i} {
                if {[file exist $fileName_csv]} {
                        break
                }
                after 100
        }

        # SCALE LOAD
        set f [open $temp_path/$fileName_csv r]
        set data [split [read $f] "\n"]
        close $f

        # Scale File Loading �� csv ���� ����
        #file delete -force $temp_path/$fileName_csv

        #LAYER CCL TURN SIG/GND �ܵ��� 510(W) 610(F)
        #L02 L03 0.10 H/H 1 GND/SIG 80%/80% 0.0009 0.0007
        #L04 L05 0.10 H/H 1 GND/SIG 80%/80% 0.0009 0.0007
        #L06 L07 0.18 2/2 1 GND/GND 80%/80% 0.0009 0.0007
        #L08 L09 0.10 H/H 1 SIG/GND 80%/80% 0.0009 0.0007
        #L10 L11 0.10 H/H 1 SIG/GND 80%/80% 0.0009 0.0007

        # ��/�� ���� Ȯ��
        foreach line $data {
                set check [regsub -all {,} $line " "]
                puts $check
                if {[lindex $check 0] != "LAYER"} {continue}
                if {[lindex $check 0] == "LAYER"} {
                        #set tmp_x [regsub {\)} [regsub {\(} [regsub -all " " [regsub {[A-Z]} [lindex $check 5] ""] ""] ""] ""]
                        #set tmp_y [regsub {\)} [regsub {\(} [regsub -all " " [regsub {[A-Z]} [lindex $check 6] ""] ""] ""] ""]

                        set tmp_x [lindex [split [regsub -all " " [lindex $check 5] ""] "\("] 0]
                        set tmp_y [lindex [split [regsub -all " " [lindex $check 6] ""] "\("] 0]

                        puts "x=$tmp_x= y=$tmp_y="
                        if {![regexp {^[0-9]*$} $tmp_x] || ![regexp {^[0-9]*$} $tmp_y]} {
                                tk_messageBox -message "Excel File Recheck : W/S X=$tmp_x, W/S Y=$tmp_y"
                                return
                        }

                        # �ܹ����� ��
                        if {$tmp_x < $tmp_y} {
                                set scale_check 1
                                puts "SCALE CHECK = $scale_check"
                        # ������� ��
                        } else {
                                set scale_check 2
                                puts "SCALE CHECK = $scale_check"
                        }
                        break
                }
        }

        # Table ���� Ȯ��
        set table_length [llength [LAYER_TABLELIST get 0 end]]

        for {set i 0} {$i < [expr $table_length -1]} {incr i} {
                set layer [LAYER_TABLELIST getcells $i,0]
                set layer [string toupper $layer]

                set scale_x ""
                set scale_y ""

                # Scacle �� Ȯ�� �� skip = 0 ����
                set skip 1

                foreach line $data {
                        set check [regsub -all {,} $line " "]
                        puts "[llength $check] == $check"
                        # LAYER�� Scale �� Ȯ��
                        if {[lindex $check 0] == "$layer"} {
                                # csv ��ȯ�� %�� �ݿ��Ǿ� /100.0 ���� �Ǿ��� --> *100 ���� �ʿ�
                                # Format ���� �Ҽ��� ���� 3�ڸ� ����
                                # �ܹ����� ��
                                if {$scale_check == 1} {
                                        # Excel File�� Scale���� ���������� �Է� �Ǿ� ������ ����Ʈ ���̰��� 16
                                        if {[llength $check] == 8 || [llength $check] == 12 || [llength $check] == 16} {
                                                set scale_x [format %3.3f [expr 100 + [lindex $check 6]*100.0]]
                                                set scale_y [format %3.3f [expr 100 + [lindex $check 7]*100.0]]
                                                puts "layer=$layer i=$i skip=$skip x=$scale_x y=$scale_y"
                                                set skip 0
                                                break
                                        } else {
                                                set skip 1
                                                tk_messageBox -message "ERROR : Scale Excel File Check !!!"
                                                break
                                        }
                                # ������� ��
                                } elseif {$scale_check == 2} {
                                        # Excel File�� Scale���� ���������� �Է� �Ǿ� ������ ����Ʈ ���̰��� 16
                                        if {[llength $check] == 8 || [llength $check] == 12 || [llength $check] == 16} {
                                                set scale_x [format %3.3f [expr 100 + [lindex $check 7]*100.0]]
                                                set scale_y [format %3.3f [expr 100 + [lindex $check 6]*100.0]]
                                                puts "layer=$layer i=$i skip=$skip x=$scale_x y=$scale_y"
                                                set skip 0
                                                break
                                        } else {
                                                set skip 1
                                                tk_messageBox -message "ERROR : Scale Excel File Check !!!"
                                                break
                                        }
                                } else {
                                        set skip 1
                                        break
                                }
                        } elseif {[lindex $check 1] == "$layer"} {
                                # csv ��ȯ�� %�� �ݿ��Ǿ� /100.0 ���� �Ǿ��� --> *100 ���� �ʿ�
                                # Format ���� �Ҽ��� ���� 3�ڸ� ����
                                # �ܹ����� ��
                                if {$scale_check == 1} {
                                        # Excel File�� Scale���� ���������� �Է� �Ǿ� ������ ����Ʈ ���̰��� 16
                                        if {[llength $check] == 8 || [llength $check] == 12 || [llength $check] == 16} {
                                                set scale_x [format %3.3f [expr 100 + [lindex $check 6]*100.0]]
                                                set scale_y [format %3.3f [expr 100 + [lindex $check 7]*100.0]]
                                                puts "layer=$layer i=$i skip=$skip x=$scale_x y=$scale_y"
                                                set skip 0
                                                break
                                        } else {
                                                set skip 1
                                                tk_messageBox -message "ERROR : Scale Excel File Check !!!"
                                                break
                                        }
                                # ������� ��
                                } elseif {$scale_check == 2} {
                                        # Excel File�� Scale���� ���������� �Է� �Ǿ� ������ ����Ʈ ���̰��� 16
                                        if {[llength $check] == 8 || [llength $check] == 12 || [llength $check] == 16} {
                                                set scale_x [format %3.3f [expr 100 + [lindex $check 7]*100.0]]
                                                set scale_y [format %3.3f [expr 100 + [lindex $check 6]*100.0]]
                                                puts "layer=$layer i=$i skip=$skip x=$scale_x y=$scale_y"
                                                set skip 0
                                                break
                                        } else {
                                                set skip 1
                                                tk_messageBox -message "ERROR : Scale Excel File Check !!!"
                                                break
                                        }
                                } else {
                                        set skip 1
                                        break
                                }
                        } else {
                                # None
                        }
                }
                # SCALE �� ����
                if {$skip == 0} {
                        # mod = 0 - Layer Info. Tab / mod = 1 - Scale Change Tab
                        if {$mod == 1} {
                                SCALE_TABLELIST cellconfigure $i,4 -text $scale_x
                                SCALE_TABLELIST cellconfigure $i,5 -text $scale_y
                                puts "$layer $scale_x $scale_y"
                                update
                        } else {
                                LAYER_TABLELIST cellconfigure $i,6 -text $scale_x
                                LAYER_TABLELIST cellconfigure $i,7 -text $scale_y
                                puts "$layer $scale_x $scale_y"
                                update
                        }
                }
        }

        puts "############ LAYER SCALE LOAD END !!! ############"
        puts "############ LAYER SCALE LOAD END !!! ############"
        puts "############ LAYER SCALE LOAD END !!! ############"
        return
}



################################################################################
## Procedure    : pJOB_LAYER_XACT_SCALE_LOAD
## ����         : XACT Scale Measurement value File Load
## Input        : mod = 0 - Layer Info. Tab / mod = 1 - Scale Change Tab
## Return       :

proc pJOB_LAYER_XACT_SCALE_LOAD {{mod 0}} {

        puts "############ pJOB_LAYER_XACT_SCALE_LOAD START !!! ############"
        puts "############ pJOB_LAYER_XACT_SCALE_LOAD START !!! ############"
        puts "############ pJOB_LAYER_XACT_SCALE_LOAD START !!! ############"

        if {$mod == 1} {
                set check [SCALE_TABLELIST get 0 end]
                if {$check == ""} {
                        PAUSE "ERROR (pJOB_LAYER_SCALE_LOAD) : Need CURRENT SCALE Info. LOAD!!!"
                        return
                }
        }

        set job_layer_scale $::wJOB.xlsx
        set set_dir   /daeduck/samba/common/scale_xact
        set temp_path /daeduck/scripts/temp
        set typelist {
            {"csv File" {".csv"}}
        }
        set fileName [tk_getOpenFile -filetypes $typelist -initialdir $set_dir]
        set fileName_csv [lindex [regsub -all "/" $fileName " "] end]
        #set fileName_csv [regsub ".xlsx" $fileName_xlsx ".csv"]

        #puts "$fileName $fileName_xlsx $fileName_csv"
        puts "$fileName $fileName_csv"
        if {![regexp [string toupper $::wJOB] $fileName_csv]} {
                if { [tk_messageBox -type yesno -message "\[$fileName\] File name is correct??"] == "no" } {
                        return
                }
        }


        # Temp ������ ���� Copy �� csv�� ��ȯ
        file copy -force $fileName $temp_path/$fileName_csv

#        set chk [exec /usr/bin/ssconvert $temp_path/$fileName_xlsx $temp_path/$fileName_csv &]
#        if {$chk == ""} {
#            tk_messageBox -message "File Converting ERROR!!!"
#            return
#        } else {
#
#        }
#
#        cd $temp_path
#        # file ��ȯ �ð� ����
#        for {set i 1} {$i < 1000} {incr i} {
#                if {[file exist $fileName_csv]} {
#                        break
#                }
#                after 100
#        }

        # XACT SCALE LOAD
        set f [open $temp_path/$fileName_csv r]
        set data [split [read $f] "\n"]
        close $f

        # Scale File Loading �� csv ���� ����
        file delete -force $temp_path/$fileName_csv

        #LAYER CCL TURN SIG/GND �ܵ��� 510(W) 610(F)
        #L02 L03 0.10 H/H 1 GND/SIG 80%/80% 0.0009 0.0007
        #L04 L05 0.10 H/H 1 GND/SIG 80%/80% 0.0009 0.0007
        #L06 L07 0.18 2/2 1 GND/GND 80%/80% 0.0009 0.0007
        #L08 L09 0.10 H/H 1 SIG/GND 80%/80% 0.0009 0.0007
        #L10 L11 0.10 H/H 1 SIG/GND 80%/80% 0.0009 0.0007

        # Table ���� Ȯ��
        set table_length [llength [LAYER_TABLELIST get 0 end]]

        for {set i 0} {$i < [expr $table_length -1]} {incr i} {
                set layer [LAYER_TABLELIST getcells $i,0]
                set layer [string toupper $layer]

                set scale_x ""
                set scale_y ""

                # Scacle �� Ȯ�� �� skip = 0 ����
                set skip 1

                foreach line $data {
                        set check [regsub -all {,} $line " "]
                        puts "[llength $check] == $check"
                        if {![regexp {^[0-9]+$} [lindex $check 1]]} {continue}

                        # XACT File Layer ����
                        if {$::wNO_OF_LAYER >= 100} {
                                set xact_layer L[format %03d [lindex $check 1]]
                        } else {
                                set xact_layer L[format %02d [lindex $check 1]]
                        }

                        # LAYER�� Scale �� Ȯ��
                        if {$xact_layer == $layer} {
                                set scale_x [format %3.3f [lindex $check 2]]
                                set scale_y [format %3.3f [lindex $check 3]]
                                puts "layer=$layer i=$i skip=$skip x=$scale_x y=$scale_y"
                                set skip 0
                                break
                        } else {
                                # None
                        }
                }
                # SCALE �� ����
                if {$skip == 0} {
                        # mod = 0 - Layer Info. Tab / mod = 1 - Scale Change Tab
                        if {$mod == 1} {
                                SCALE_TABLELIST cellconfigure $i,4 -text $scale_x
                                SCALE_TABLELIST cellconfigure $i,5 -text $scale_y
                                puts "$layer $scale_x $scale_y"
                                update
                        } else {
                                LAYER_TABLELIST cellconfigure $i,6 -text $scale_x
                                LAYER_TABLELIST cellconfigure $i,7 -text $scale_y
                                puts "$layer $scale_x $scale_y"
                                update
                        }
                }
        }

        puts "############ pJOB_LAYER_XACT_SCALE_LOAD END !!! ############"
        puts "############ pJOB_LAYER_XACT_SCALE_LOAD END !!! ############"
        puts "############ pJOB_LAYER_XACT_SCALE_LOAD END !!! ############"
        return
}





################################################################################
## Procedure    : pTOOL_SCALE_COPY
## ����         : Reference Tool Scale Copy
## Input        :
## Return       :

proc pTOOL_SCALE_COPY { } {

        puts "############ pTOOL_SCALE_COPY START !!! ############"
        puts "############ pTOOL_SCALE_COPY START !!! ############"
        puts "############ pTOOL_SCALE_COPY START !!! ############"

        # Job Exist Check
        if {$::wTOOL_COPY != ""} {
                set ::wTOOL_COPY [string tolower $::wTOOL_COPY]
        }

        if {$::wTOOL_COPY == ""} {
                PAUSE "TOOL NO CHECK!!!"
                return
        } elseif {![regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wTOOL_COPY]} {
                PAUSE "$::wTOOL_COPY is not regular tool no!!!"
                return
        }

        # Job Path Veriry
        while { 1 } {
                if [ catch {
                        if {$::wINCAM == 1} {
                                set COPY_JOB_DB_PATH [DBUTIL path jobs $::wTOOL_COPY]
                                set flag 1
                        } else {
                                set COPY_JOB_DB_PATH [DBUTIL path jobs $::wTOOL_COPY]
                                set flag 1
                        }
                } Error ] {
                        set flag 0
                        PAUSE "VERIFY (pTOOL_SCALE_COPY) : $::wTOOL_COPY does not exist!!!"
                        return
                }
                if { $flag } { break }
        }

        # JOB Check In/Out verify
        set check_inout_result [COM check_inout,mode=test,type=job,job=$::wTOOL_COPY]
        # no / yes e102025
        puts ===$check_inout_result===
        if { [lindex $check_inout_result 0] == "yes"} {

                # Currently Job Scale Load is Check-Out verify Skip !!! (2019.07.12 - By Ms.Kang)
                if {$::wTOOL_COPY == $::wJOB} {
                        # Keep Going
                } else {
                        PAUSE "VERIFY (pTOOL_SCALE_COPY) : $::wTOOL_COPY is Check-Out!!!"
                        return
                }
        }

        # JOB SCALE PATH ####################################
        set file_path "$COPY_JOB_DB_PATH/steps/panel/layers"
        if {[info exists file_path]} {
                cd $file_path
        } else {
                PAUSE "PANEL STEPS does not Exist!!!"
                return
        }

        # Regular Layer List Define
        set layer_list [glob -nocomplain *]
        set scale_layer_list ""
        foreach line $layer_list {
                if {[regexp {^l[0-9]*$} $line]} {
                        lappend scale_layer_list $line
                }
        }

        # Layer Scale Check
        set scale_layer ""
        foreach layer $scale_layer_list {
                set scale_path $file_path/$layer/lpd
                if {[info exists scale_path]} {
                        set f [open $scale_path r]
                        set scale_value [split [read $f] "\n"]
                        close $f
                }
                foreach line $scale_value {
                        if {[regexp {^XSTRETCH=} $line]} {
                                set scale_x [format %3.3f [lindex [regsub {=} $line " "] 1]]
                        }
                        if {[regexp {^YSTRETCH=} $line]} {
                                set scale_y [format %3.3f [lindex [regsub {=} $line " "] 1]]
                        }
                }
                lappend scale_layer "$layer $scale_x $scale_y"
        }
        #puts $scale_layer


        # Table ���� Ȯ��
        set table_length [llength [LAYER_TABLELIST get 0 end]]
        set copy_scale_length [llength $scale_layer]
        if {$table_length != $copy_scale_length} {
                PAUSE "This Tool ${table_length}L == Copy Tool ${copy_scale_length}L : Layer Count does'not match!!!"
                return
        }

        # Scale Change Tab.Table ���� Ȯ��
        set change_table_length [llength [SCALE_TABLELIST get 0 end]]
        set value_2 NG
        for {set i 0} {$i < [expr $table_length -1]} {incr i} {
                set layer [LAYER_TABLELIST getcells $i,0]
                set scale_x 100.000
                set scale_y 100.000

                # Scacle �� Ȯ�� �� skip = 0 ����
                set skip 1

                foreach line $scale_layer {

                        # LAYER�� Scale �� Ȯ��
                        if {$layer == [lindex $line 0]} {
                                set scale_x [lindex $line 1]
                                set scale_y [lindex $line 2]
                                set skip 0
                                puts "layer=$layer i=$i skip=$skip x=$scale_x y=$scale_y"
                                break
                        }
                }
                # SCALE �� ����
                if {$skip == 0} {

                        # Layer Info. Reference Tool Scale Copy
                        if {$::wCOPY_FLAG == 1} {
                                LAYER_TABLELIST cellconfigure $i,6 -text $scale_x
                                LAYER_TABLELIST cellconfigure $i,7 -text $scale_y
                                set value_1 OK
                        # SCALE Change Reference Tool Scale Copy
                        } elseif {$::wCOPY_FLAG == 2} {
                                if {$change_table_length == 0} {
                                        continue
                                        set value_2 NG
                                } else {
                                        SCALE_TABLELIST cellconfigure $i,4 -text $scale_x
                                        SCALE_TABLELIST cellconfigure $i,5 -text $scale_y
                                        set value_2 OK
                                }
                        }
                        update
                }
        }

        puts "############ pTOOL_SCALE_COPY END !!! ############"
        puts "############ pTOOL_SCALE_COPY END !!! ############"
        puts "############ pTOOL_SCALE_COPY END !!! ############"
        if {$::wCOPY_FLAG == 1} {
                return $value_1
        } elseif {$::wCOPY_FLAG == 2} {
                return $value_2
        }
}



################################################################################
## Procedure    : pJOB_TYPE_CHECK
## ����         : JOB Type Info. Check
## Input        :
## Return       :

proc pJOB_TYPE_CHECK {{mod 0}} {

        puts "############ pJOB_TYPE_CHECK START !!! ############"
        puts "############ pJOB_TYPE_CHECK START !!! ############"
        puts "############ pJOB_TYPE_CHECK START !!! ############"


        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if {[regexp {^m[a-z]{2}[0-9]{5}\-[0-9]{2}$} $::wJOB]} {
                if {$::wSITE != 1} {
                        PAUSE "ALARM : KOREA SITE Check !!!"
                        exit 1
                }
        # IPGEN : mse00123-01p
        } elseif {[regexp {^m[a-z]{2}[0-9]{5}\-[0-9]{2}p$} $::wJOB]} {
                if {$::wSITE != 2} {
                        PAUSE "ALARM : IPGEN SITE Check !!!"
                        exit 1
                }
        # DDPI
        } else {

        }

        STEP_ON $::wJOB $::wSR_STEP yes

        set ::wJOB_TYPE_CHECK 0
        set ::wRBM_CHECK      0
        set ::wGUIDE_DRL      0
        set ::wPINLESS        0

        DO_INFO -t step -e $::wJOB/$::wSR_STEP -d EXISTS, units=mm
        if {$gEXISTS == "no"} {
            PAUSE "ERROR proc pJOB_TYPE_CHK : S&R STEP Recheck !!!"
            return
        }
        # PNL Info Check
        if {$::wCUSTOMER == ""} {
            tk_messageBox -message "Customer Code check!!"
            return
        } elseif {$::wTYPE == ""} {
            tk_messageBox -message "TYPE Check!!"
            return
        } elseif {$::wNO_OF_LAYER == ""} {
            tk_messageBox -message "No of Layer Check.!!"
            return
        } elseif {$::wWORK_SIZE == ""} {
            tk_messageBox -message "Work Size Check!!"
            return
        } elseif {$::wARRAY_DX == "" || $::wARRAY_DY == ""} {
            tk_messageBox -message "Gap X & Y Check.!!"
            return
        } elseif {$::wFINISH_TYPE == ""} {
            tk_messageBox -message "FINISH_TYPE check!!"
            return
        } elseif {$::wNO_OF_LAYER == 2 && $::wEND_ORDER != 1} {
            tk_messageBox -message "2L END Order is only \[1\]. \nRecheck the Order !!!"
            return
        } elseif {$::wPSR == ""} {
            tk_messageBox -message "PSR Check : Select Spray or Screen !!!"
            return
        } elseif {$::wITS == "" || $::wITS == 0 || $::wITS == 1} {
            tk_messageBox -message "Need to ITS Check !!!"
            return
        }

        if {$mod} {return tool_copy_chk}

        pSTRUCTURE_CONVERT 1
        puts ===================================================================

        pLAYER_INFO $::gLAYER_INFO_PATH 1
        puts ===================================================================

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$drill_info_file_name not found!!!"
                return
        }

         if {$::wNO_OF_LAYER > 2} {

                # Trim Info Load ######################################################################################
                set trim_info_file_name "dde_mlb_panel_trim.info"

                if {$::wINCAM == 1} {
                        if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                                set file_path $::env(JOB_USER_DIR)
                        }
                } else {
                        if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                                set file_path "$::gGENESIS_JOB_DB_PATH/user"
                        }
                }

                if {[info exists file_path]} {
                        set f [open $file_path/$trim_info_file_name r]
                        set trim_info [split [read $f] "\n"]
                        close $f
                } else {
                        tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$trim_info_file_name not found!!!"
                        return
                }
        }


        #  PLUG COUNT Check ####################################################
        set ::wPLUG_COUNT 0
        set ::wIN_PLUG_CHK no

        # ana layer check
        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$out_plug -d EXISTS
        if {$gEXISTS == "yes"} { set ::wPLUG_COUNT 1 }

        # ana02 layer check
        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$out_plug_2 -d EXISTS
        if {$gEXISTS == "yes"} { set ::wPLUG_COUNT 2 }

        # In Plug 2ȸ layer check - (2020.02.29)
        if { [llength $in_plug_all_2] >= 1} { set ::wIN_PLUG_CHK yes }
        ########################################################################


        #  X-Ray Drill Check ####################################################
        if {$::wXRAY_DRILL_MARK == 1 || $::wXRAY_DRILL_HOLE == 1} {
                # DDPI ���� W/S ����
                if {[regexp {351X531|412X518|412X538|462X618|462X624|541X621|518X538} $::wWORK_SIZE]} {
                        PAUSE "DDPI : $::wWORK_SIZE can not apply X-Ray Drill !!!"
                        return
#                # ���� W/S ����
#                 elseif {[regexp {518X618|538X618} $::wWORK_SIZE]}
#                        PAUSE "Automobile : $::wWORK_SIZE can not apply X-Ray Drill !!!"
#                        return
#
                }
        }
        ########################################################################

        #  610x810 & 610x830 Top / Btm Div Drill Layer Check ####################################################
        set tail_list [list t b]
        foreach line $drill_info {
                if {$line == ""} {continue}
                # Guide, Coin, Laser �� �ƴҰ��
                if {![regexp {^c$|y|mp} [lindex $line 9]] && [lindex $line 3] == $::wEND_ORDER} {

                        foreach tail $tail_list {
                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/[lindex $line 0]-${tail} -d EXISTS
                                if {$gEXISTS == "no"} {
                                        if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                COM create_layer,layer=[lindex $line 0]-${tail},context=board,type=drill,polarity=positive,ins_layer=[lindex $line 0]
                                        }
                                } elseif {$gEXISTS == "yes"} {
                                        if {![regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                COM delete_layer,layer=[lindex $line 0]-${tail}
                                        }

                                }
                        }
                }
        }
        ########################################################################


        #  X-Ray Drill Mark Check ####################################################
        set xray_mark_check 0

        if {$::wXRAY_DRILL_MARK == 1} {
                if {$::wNO_OF_LAYER < 100} {

                        set xray_drl_layer d01-x

                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$xray_drl_layer -d EXISTS
                        if {$gEXISTS == "no"} {
                                PAUSE "$xray_drl_layer need to create. DRILL Info. Check !!!"
                                exit 1
                        }
                } elseif {$::wNO_OF_LAYER >= 100} {

                        set xray_drl_layer d001-x

                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$xray_drl_layer -d EXISTS
                        if {$gEXISTS == "no"} {
                                PAUSE "$xray_drl_layer need to create. DRILL Info. Check !!!"
                                exit 1
                        }
                }
        } elseif {$::wXRAY_DRILL_MARK == 0} {
                if {$::wNO_OF_LAYER < 100} {

                        set xray_drl_layer d01-x

                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$xray_drl_layer -d EXISTS
                        if {$gEXISTS == "yes"} {
                                #PAUSE "X-Ray Mark Check : $xray_drl_layer need to delete. DRILL Info. Check !!!"
                                set answer [tk_messageBox -type yesno -message "X-Ray Mark Check : $xray_drl_layer need to delete!! Continue ?"]
                                if {$answer == "no"} {
                                        exit 1
                                }
                        }
                } elseif {$::wNO_OF_LAYER >= 100} {
                        set xray_drl_layer d001-x

                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$xray_drl_layer -d EXISTS
                        if {$gEXISTS == "yes"} {
                                #PAUSE "X-Ray Mark Check : $xray_drl_layer need to delete. DRILL Info. Check !!!"
                                set answer [tk_messageBox -type yesno -message "X-Ray Mark Check : $xray_drl_layer need to delete! Continue ?"]
                                if {$answer == "no"} {
                                        exit 1
                                }
                        }
                }
        }
        ########################################################################

        #  X-Ray Drill Hole Check ####################################################
        set xray_hole_check 0

        if {$::wXRAY_DRILL_HOLE == 1} {

                set tail_list [list t b]

                foreach line $drill_info {
                        if {$line == ""} {continue}

                        # Sub X-Ray ���� �����ϵ��� ������Ʈ (2020.04.29)

                        if {[lindex $line 9] == "back" && [lindex $line 3] == $::wEND_ORDER} {
                                set xray_hole_check 1

                                foreach tail $tail_list {

                                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/[lindex $line 0]-${tail} -d EXISTS

                                        if {$gEXISTS == "no"} {
                                                # 610x810, 610x830 �� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM create_layer,layer=[lindex $line 0]-${tail},context=board,type=drill,polarity=positive,ins_layer=[lindex $line 0]
                                                }
                                        } elseif {$gEXISTS == "yes"} {
                                                 # 610x810, 610x830 �ƴ� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {![regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM delete_layer,layer=[lindex $line 0]-${tail}
                                                }
                                        }
                                }
                        }
                        if {[lindex $line 9] == "depth" && [lindex $line 3] == $::wEND_ORDER} {
                                set xray_hole_check 1

                                foreach tail $tail_list {

                                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/[lindex $line 0]-${tail} -d EXISTS

                                        if {$gEXISTS == "no"} {
                                                # 610x810, 610x830 �� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM create_layer,layer=[lindex $line 0]-${tail},context=board,type=drill,polarity=positive,ins_layer=[lindex $line 0]
                                                }
                                        } elseif {$gEXISTS == "yes"} {
                                                 # 610x810, 610x830 �ƴ� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {![regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM delete_layer,layer=[lindex $line 0]-${tail}
                                                }
                                        }
                                }
                        }

                        if {[lindex $line 9] == "backxray" && [lindex $line 3] == $::wEND_ORDER} {
                                set xray_hole_check 1

                                foreach tail $tail_list {

                                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/[lindex $line 0]${tail} -d EXISTS

                                        if {$gEXISTS == "no"} {
                                                # 610x810, 610x830 �� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM create_layer,layer=[lindex $line 0]${tail},context=board,type=drill,polarity=positive,ins_layer=[lindex $line 0]
                                                }
                                        } elseif {$gEXISTS == "yes"} {
                                                # 610x810, 610x830 �ƴ� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {![regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM delete_layer,layer=[lindex $line 0]${tail}
                                                }
                                        }
                                }
                        }
                        if {[lindex $line 9] == "depthxray" && [lindex $line 3] == $::wEND_ORDER} {
                                set xray_hole_check 1

                                foreach tail $tail_list {

                                        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/[lindex $line 0]${tail} -d EXISTS

                                        if {$gEXISTS == "no"} {
                                                # 610x810, 610x830 �� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM create_layer,layer=[lindex $line 0]${tail},context=board,type=drill,polarity=positive,ins_layer=[lindex $line 0]
                                                }
                                        } elseif {$gEXISTS == "yes"} {
                                                # 610x810, 610x830 �ƴ� ��� 2���ҿ� Back/Depth Drill layer �ڵ� ����
                                                if {![regexp {610X810|610X830} $::wWORK_SIZE]} {
                                                        COM delete_layer,layer=[lindex $line 0]${tail}
                                                }
                                        }
                                }
                        }
                }
                if {$xray_hole_check == 0} {
                        PAUSE "X-Ray Hole Check : Back / Depth X-Ray Drill need to create. DRILL Info. Check !!!"
                        exit 1
                }
        }
        ########################################################################

        #  535x740 Top / Btm Div Drill Layer Check ####################################################
        set tail_list [list f r]
        foreach line $drill_info {
                if {$line == ""} {continue}
                # Guide, Coin, Laser �� �ƴҰ��
                if {![regexp {^g$|^gc$|^c$|y|mp} [lindex $line 9]] && [lindex $line 3] == $::wEND_ORDER} {

                        foreach tail $tail_list {
                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/[lindex $line 0]-${tail} -d EXISTS
                                if {$gEXISTS == "no"} {
                                        if {[regexp {535X740} $::wWORK_SIZE]} {
                                                COM create_layer,layer=[lindex $line 0]-${tail},context=board,type=drill,polarity=positive,ins_layer=[lindex $line 0]
                                        }
                                } elseif {$gEXISTS == "yes"} {
                                        if {![regexp {535X740} $::wWORK_SIZE]} {
                                                COM delete_layer,layer=[lindex $line 0]-${tail}
                                        }

                                }
                        }
                }
        }
        ########################################################################



        # SPRAY Type ��� Screen Layer �⺻ ���� Alarm #########################
        if {$::wPSR == "SPRAY"} {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_c -d EXISTS
                if {$gEXISTS == "no"} {
                        set answer [tk_messageBox -type yesno -message "$screen_c Layer need to create!\nContinue ?"]
                        if {$answer == "no"} {
                                return
                        }
                }
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_s -d EXISTS
                if {$gEXISTS == "no"} {
                        set answer [tk_messageBox -type yesno -message "$screen_s Layer need to create!\nContinue ?"]
                        if {$answer == "no"} {
                                return
                        }
                }
        } elseif {$::wPSR == "SCREEN"} {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_c -d EXISTS
                if {$gEXISTS == "no"} {
                        set answer [tk_messageBox -type yesno -message "$screen_c Layer is not exist.\nContinue ?"]
                        if {$answer == "no"} {
                                return
                        }
                }
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_s -d EXISTS
                if {$gEXISTS == "no"} {
                        set answer [tk_messageBox -type yesno -message "$screen_s Layer is not exist.\nContinue ?"]
                        if {$answer == "no"} {
                                return
                        }
                }
        }
        ########################################################################


        # SCREEN Check ########################################################
        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_c -d EXISTS
        # ���� ���� ���
        if {$gEXISTS == "yes"} {
            DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_s -d EXISTS
            # �ܸ� ���� ���� ����
            if {$gEXISTS == "yes"} {
                set ::wSCREEN_CHECK 1
            # ��� ���� = Top�� ����
            } else {
                set ::wSCREEN_CHECK 2
            }

        } else {
            DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$screen_s -d EXISTS
            # ��� ���� = Btm�� ����
            if {$gEXISTS == "yes"} {
                set ::wSCREEN_CHECK 2
            } else {
                # ���� ���� ���
                set ::wSCREEN_CHECK 0
            }
        }
        ########################################################################

        #  �� �帱 Layer Name Check ##################################################
        # d01-s --> d01-np �� ���� �ʿ�
        if {$::wNO_OF_LAYER >= 100} {
                set am_layer d001-s
        } else {
                set am_layer d01-s
        }
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$am_layer -d EXISTS
        if {$gEXISTS == "yes"} {
                PAUSE "ERROR (proc pJOB_TYPE_CHECK) : Need to change 2nd Drill \[$am_layer\] name rule!!!"
                return
        }
        ########################################################################


        #  SR End Order Check ##################################################
        DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$sr_c_1 -d EXISTS
        if {$gEXISTS == "no"} {
                set ::wSR_END_ORDER 1
        } else {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$sr_c_2 -d EXISTS
                if {$gEXISTS == "no"} {
                        set ::wSR_END_ORDER 2
                } else {
                        set ::wSR_END_ORDER 3
                }
        }

        if {[info exists ::wSR_END_ORDER] == 0} {
                PAUSE "ERROR (proc pJOB_TYPE_CHECK) : SR END ORDER CHECK !!!"
                return
        }
        ########################################################################

        #  Bit Check Hole Shift value Check (2020.03.09) ###########
        #  610x810, 610x830 W/S Drill Bit Check Hole Shift value Check
        if {[regexp {610X810|610X830} $::wWORK_SIZE]} {
                if {$::wBIT_SHIFT <= 9} {
                        set ::wBIT_SHIFT 10
                        PAUSE "\[$::wWORK_SIZE] Bit check Hole Shift value changed : 10mm"
                }
        }
        #  2���� Drill Bit Check Hole Shift value Check
        foreach line $drill_info {
                set drill [lindex $line 0]
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/${drill}-t -d EXISTS
                if {$gEXISTS == "yes"} {
                        if {$::wBIT_SHIFT <= 9} {
                                set ::wBIT_SHIFT 10
                                PAUSE "\[${drill}-t\] Bit check Hole Shift value changed : 10mm"
                        }
                }
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/${drill}-b -d EXISTS
                if {$gEXISTS == "yes"} {
                        if {$::wBIT_SHIFT <= 9} {
                                set ::wBIT_SHIFT 10
                                PAUSE "\[${drill}-t\] Bit check Hole Shift value changed : 10mm"
                        }
                }
        }
        ########################################################################

        #  ITS Layer Check #####################################################
        if {$::wITS == "top"} {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/l${::wSTART_LAYER_NO}-nits -d EXISTS
                if {$gEXISTS == "no"} {
                        COM create_layer,layer=l${::wSTART_LAYER_NO}-nits,context=board,type=document,polarity=positive,ins_layer=
                }
        } elseif {$::wITS == "btm"} {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/l${::wEND_LAYER_NO}-nits -d EXISTS
                if {$gEXISTS == "no"} {
                        COM create_layer,layer=l${::wEND_LAYER_NO}-nits,context=board,type=document,polarity=positive,ins_layer=
                }
        } elseif {$::wITS == "both"} {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/l${::wSTART_LAYER_NO}-nits -d EXISTS
                if {$gEXISTS == "no"} {
                        COM create_layer,layer=l${::wSTART_LAYER_NO}-nits,context=board,type=document,polarity=positive,ins_layer=
                }
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/l${::wEND_LAYER_NO}-nits -d EXISTS
                if {$gEXISTS == "no"} {
                        COM create_layer,layer=l${::wEND_LAYER_NO}-nits,context=board,type=document,polarity=positive,ins_layer=
                }
        } elseif {$::wITS == "none"} {
                # skip
        }


        ########################################################################

        # JOB Type Info Check ##################################################

        #  CAP Drill & Flip ���� ��/�� Check ###################################
        set ::wCAP_FLIP_CHECK no
        set ::wCAP_DRL_CHECK no
        set cap_flip_check [DRILL_TABLELIST get 0 end]
        set ::wDRILL_CNT [llength $cap_flip_check]
        foreach line $cap_flip_check {
                if {[lindex $line 9] == "cap"} {
                        set ::wCAP_DRL_CHECK yes
                }
                if {[lindex $line 9] == "cap" && [lindex $line 11] == "yes"} {
                        set ::wCAP_FLIP_CHECK yes
                }
        }
        ########################################################################

        # MSAP(Pattern) Process Check & DF Order Check : IDF Order 1 Check
        set df_order_check 0
        foreach line $layer_info {
                if {$line == ""} {continue}
                if {[lindex $line 0] == "l$::wSTART_LAYER_NO"} {
                        if {[lindex $line 1] == "posi"} {
                                set ::wMSAP_CHECK 1
                        } else {
                                set ::wMSAP_CHECK 0
                        }
                }
                if {[lindex $line 0] == "l$::wEND_LAYER_NO"} {
                        if {$::wMSAP_CHECK == 1} {
                                if {[lindex $line 1] != "posi"} {
                                        PAUSE "ERROR (proc pJOB_TYPE_CHECK) : l$::wEND_LAYER_NO Layer Polarity Check !!!"
                                }
                        } elseif {$::wMSAP_CHECK != 1} {
                                if {[lindex $line 1] == "posi"} {
                                        PAUSE "ERROR (proc pJOB_TYPE_CHECK) : l$::wEND_LAYER_NO Layer Polarity Check !!!"
                                }
                        }
                }

                if {[lindex $line 3] == 1} {
                        set df_order_check 1
                }
        }
        if {$df_order_check == 0} {
                PAUSE "ERROR (proc pJOB_TYPE_CHECK) : DF Layer Order 1 CHECK !!!"
                return
        }

        # DDPI ���� W/S Check - 1������ & 30L ���ϸ� ����
        # 462x618 Multi Build-up ���� ������Ʈ ���� (2020.02.03)
        if {[regexp {351X531|411X618|412X518|412X538|462X624|465X618|518X538|541X621} $::wWORK_SIZE]} {

                if {$::wEND_ORDER > 2} {
                        PAUSE "ERROR (proc pJOB_TYPE_CHECK) : DDPI $::wWORK_SIZE only run under END Order 2 !!!"
                        return
                }

                if {$::wNO_OF_LAYER > 30} {
                        PAUSE "ERROR (proc pJOB_TYPE_CHECK) : DDPI $::wWORK_SIZE only run under 30L !!!"
                        return
                }
        }

        # Special Margin Check
        # ���� + DDPI�� Special ����
        if {$::wS_MARGIN == 1} {
                if {![regexp {518X618|538X618|340X518|412X518|351X531|308X538|408X538|412X538|518X538|463X615|466X617|340X618|358X618|409X618|411X618|462X618|465X618|541X621|462X624} $::wWORK_SIZE]} {
                        tk_messageBox -message "The Special Margin is not available : $::wWORK_SIZE !!!"
                        return
                }
        }

        # 2L �ϰ�� ����
        set ::wPINLESS_TEXT 0

        if {$::wNO_OF_LAYER > 2} {

                # Guide Drill Scale Define : Guide Drill (type - g) or Coin Guide Drill (type - gc)
                foreach line $drill_info {
                        if {[lindex $line 0] == ""} {continue}
                        if {[lindex $line 9] == "g" || [lindex $line 9] == "gc"} {
                                set ::wGUIDE_DRL 1
                        }
                }

                # Pinless Check
                set bonding_cnt 0
                foreach line $trim_info {
                        if {$line == ""} {continue}
                        if {[regexp {bonding} [lindex $line 5]]} {
                                incr bonding_cnt
                        }
                        # 2�� ������ Pinless �� ���
                        if {[lindex $line 0] == 2 && [regexp {bonding} [lindex $line 5]]} {
                                set ::wPINLESS_TEXT 1
                        }
                }
                set ::wPINLESS $bonding_cnt

                # 2nd Pinless Check
                if {$::wPINLESS == 2} {
                        if {![regexp {407X510|407X534|457X610|510X518|510X610|518X618|534X610|538X618} $::wWORK_SIZE]} {
                                tk_messageBox -message "$::wWORK_SIZE does not support 2nd PINLESS!!!"
                                set ::wPINLESS 1
                                return
                        }
                }

                # RBM Check
                foreach line $trim_info {
                        if {$line == ""} {continue}

                        # 1�� ������ RBM �� ���
                        if {[lindex $line 0] == 1 && [lindex $line 5] == "rbm"} {

                                set ::wRBM_CHECK 1

                                foreach line $trim_info {
                                        # 1�� ������ PASS
                                        if {[lindex $line 0] == "" || [lindex $line 0] == 1} {continue}

                                        # 2�� ���� ������ Build �� �ƴ� ��� ALARM
                                        if {[lindex $line 5] != "build"} {
                                                tk_messageBox -message "The RBM method is only available in \[LAYUP \- build\] at Order \[2\] over!!!"
                                                return
                                        }
                                }
                                ## ����� Drill Info
                                #d01   01 08 3 cf both 100.000 100.000 top m 200 yes
                                #d0207 02 07 2 cf btm  100.000 100.000 top m 190 yes
                                #c0102 01 02 3 cf top  100.000 100.000 top c     no
                                #c0807 08 07 3 cf btm  100.000 100.000 btm c     no

                                # RBM�� FLIP Drill ������
                                foreach line $drill_info {
                                        if {[lindex $line 0] == ""} {continue}
                                        if {[lindex $line 11] == "yes"} {
                                                tk_messageBox -message "The RBM method is not available FLIP Coupon option !!!"
                                                return
                                        }
                                }

                        } else {
                                #set ::wRBM_CHECK 0
                        }

                        # RBM�� ���� 1���� ���� Check
                        if {[lindex $line 0] != 1 && [lindex $line 5] == "rbm"} {
                                tk_messageBox -message "The RBM method is only available in TRIM Info. Order 1 !!!"
                                return
                        }
                }

                # RBM ���� ���� W/S Check
                # 407x457, 407x510, 407x534, 457x610, 510x610, 534x610, 535X740, 610x660, 610x810, 610x830 RBM ����Ұ�
                if {[regexp {407X457|407X510|407X534|457X610|510X610|534X610|535X740|610X660|610X810|610X830} $::wWORK_SIZE]} {
                         # RBM Check
                         if {$::wRBM_CHECK == 1} {
                                 PAUSE "ERROR (proc pJOB_TYPE_CHECK) : This W/S \[$::wWORK_SIZE\] is not support RBM !!!"
                                 return
                        }
                }

                # PIN �� ���� ���� W/S Check
                # 407X457, 407X510, 407X534, 457X610, 510X610, 534X610, 610X660, 610X810, 610X830 �� �� pin�� ���� �Ұ�
                # DDPI ���� �Ұ�
                if {![regexp {407X457|407X510|407X534|457X610|510X610|534X610|610X660|610X810|610X830} $::wWORK_SIZE]} {
                         foreach line $trim_info {
                                if {$line == ""} {continue}
                                if {[regexp {pin} [lindex $line 5]]} {
                                        tk_messageBox -message "This W/S \[$::wWORK_SIZE\] is not support PIN Process !!!"
                                        return
                                }
                        }
                }
                # 2�� PIN�� ���� �Ұ� W/S Check
                if {[regexp {407X457|610X830} $::wWORK_SIZE]} {
                        foreach line $trim_info {
                                if {$line == ""} {continue}
                                if {[lindex $line 0] == 2 && [regexp {pin} [lindex $line 5]]} {
                                        PAUSE "\[$::wWORK_SIZE\] is not support 2nd PIN Process !!"
                                                return
                                }
                        }
                }

                # 1�� �̹��� Count �� ���� Trim Info "Build" Check Logic �߰� - (2020.03.02)
                if {![regexp {BVH} $::wTYPE]} {
                        set build_chk 0
                        set build_cnt 0
                        set build_type not_build
                        # Layer Info. Order 1 count check
                        foreach line $layer_info {
                                if {$line == ""} {continue}
                                if {[lindex $line 3] == 1} {
                                        incr build_cnt
                                }
                                if {$build_cnt >= 4} {
                                        set build_chk 1
                                }
                        }
                        # Trim Info. LAYUP check
                        foreach line $trim_info {
                                if {$line == ""} {continue}
                                if {[lindex $line 0] == 1 && [lindex $line 5] == "build"} {
                                        set build_type build
                                }
                        }
                        if {$build_chk == 1 & $build_type == "build"} {
                                #tk_messageBox -message "ALARM : Need to Trim Info. - LAYUP : LAYER Order 1 count is $build_cnt !!!"
                                PAUSE "ALARM : \[$::wTYPE\] Need to Trim Info. - LAYUP \[$build_type\] && LAYER Order 1 count is \[$build_cnt\] !!!"
                                return
                        }
                }
        }


        # RBM �� ��� X-Ray Drill Skip
        if {$::wXRAY_DRILL_MARK == 1} {
                if {$::wRBM_CHECK == 1} {
                         PAUSE "ERROR (proc pJOB_TYPE_CHECK) : RBM Process is not support X-Ray Mark Align !!!"
                         return
                }
        }
        if {$::wXRAY_DRILL_HOLE == 1} {
                if {$::wRBM_CHECK == 1} {
                         PAUSE "ERROR (proc pJOB_TYPE_CHECK) : RBM Process is not support X-Ray or Schmoll Hole Align!!!"
                         return
                }
        }

        # ���� + DDPI�� Flip Drill ������
        if {$::wRBM_CHECK == 1} {
                foreach line $drill_info {
                        if {[lindex $line 0] == ""} {continue}
                        if {[lindex $line 11] == "yes"} {
                                tk_messageBox -message "$::wWORK_SIZE is not support Filp Drill !!"
                                return
                        }
                }
        }

        # DDPI W/S �� Pattern (MSAP) Process �Ұ�
        if {$::wMSAP_CHECK == 1} {
                if {[regexp {340X518|412X518|351X531|308X538|408X538|412X538|518X538|463X615|466X617|340X618|358X618|409X618|411X618|462X618|465X618|541X621|462X624} $::wWORK_SIZE]} {
                        tk_messageBox -message "$::wWORK_SIZE is not support Pattern Process !!"
                        return
                }
        }

        # ���� W/S ��ǰ + DDPI 462X618 6�� ���� �̻� üũ
        if {[regexp {518X618|538X618|462X618} $::wWORK_SIZE]} {
                if {$::wEND_ORDER > 6} {
                        tk_messageBox -message "$::wWORK_SIZE is not support 6th Build-up Process !!"
                        return
                }
        }


        ########################################################################

        puts #########################################
        puts "set ::wS_MARGIN     $::wS_MARGIN"
        puts "set ::wPLUG_COUNT   $::wPLUG_COUNT "
        puts "set ::wIN_PLUG_CHK  $::wIN_PLUG_CHK"
        puts "set ::wSCREEN_CHECK $::wSCREEN_CHECK"
        puts "set ::wRBM_CHECK    $::wRBM_CHECK"
        puts "set ::wGUIDE_DRL    $::wGUIDE_DRL"
        puts "set ::wMSAP_CHECK   $::wMSAP_CHECK"
        puts "set ::wPINLESS      $::wPINLESS"
        puts "set ::wPINLESS_TEXT $::wPINLESS_TEXT"
        puts "set ::wITS          $::wITS"
        puts #########################################

        # Lock ó�� ���� ��û - �ֿ뼮 å�� (2018.12.07)
        # Trim Size Check - Limit 5mm
        #foreach line $trim_info {
        #        if {[lindex $line 1] > 5 || [lindex $line 2] > 5} {
        #                tk_messageBox -message "Trim Size limit : 5mm !!!"
        #                return
        #        }
        #}

        set ::wJOB_TYPE_CHECK 1
        update

        puts "############ pJOB_TYPE_CHECK END !!! ############"
        puts "############ pJOB_TYPE_CHECK END !!! ############"
        puts "############ pJOB_TYPE_CHECK END !!! ############"
        return OK
}




################################################################################
## Procedure    : pDRILL_SPEC_INFO_NEW
## ����         : Drill Info Define - NEW BUTTON
## Input        :
## Return       :

proc pDRILL_SPEC_INFO_NEW {drl_layer} {

        puts "############ pDRILL_SPEC_INFO_NEW START !!! ############"
        puts "############ pDRILL_SPEC_INFO_NEW START !!! ############"
        puts "############ pDRILL_SPEC_INFO_NEW START !!! ############"

        DO_INFO -t step -e $::wJOB/$::wPANEL -d EXISTS
        if {$gEXISTS == "no"} {
            tk_messageBox -message "$::wPANEL STEP no EXISTS !!!"
        }

#        if {$::wPANEL != "panel"} {
#                set answer [tk_messageBox -type yesno -message "ALARM : (pDRILL_SPEC_INFO_NEW) : PNL STEP name is not \[panel]!!!\nContinue ?"]
#                if {$answer == "no"} {
#                        return
#                }
#        }

        DRILL_SPEC_INFO_TABLELIST delete 0 end

        ### Layer - d features data ###
        #P 67.0621475 30 r2540 P 2 0 N
        #P 77.21456 30.0895375 r3175 P 3 0 N
        #P 84.4527425 17.831325 r2032 P 6 0 N;.drill_flag=2
        #P 99.863065 26.12021 r5080 P 4 0 N
        #P 112.47151 17.364345 r12700 P 5 0 N
        #P 68.463085 21.82786 r2540 P 2 0 N;.drill_flag=1
        #P 96.010485 40.47983 r2032 P 6 0 N;.drill_flag=1
        #P 90.40673 34.4090975 r2159 P 1 0 N;.drill_flag=1
        #P 87.9550875 25.4197425 r2159 P 1 0 N;.drill_flag=2
        #P 152.82486 26.2711875 r777 P 0 0 N;.drill_flag=444
        #L 126.101695 44.60452 156.24454 44.60452 r888 P 0
        #L 154.37853 9.80226 163.64863 9.80226 r888 P 0
        #P 206.397155 205.37857 r2540 P 2 0 N
        #P 216.5495675 205.4681075 r3175 P 3 0 N
        #P 223.78775 193.209895 r2032 P 6 0 N;.drill_flag=2
        #P 239.1980725 201.49878 r5080 P 4 0 N
        #P 251.8065175 192.742915 r12700 P 5 0 N
        #P 207.7980925 197.20643 r2540 P 2 0 N;.drill_flag=1
        #P 235.3454925 215.8584 r2032 P 6 0 N;.drill_flag=1
        #P 229.7417375 209.7876675 r2159 P 1 0 N;.drill_flag=1
        #P 227.290095 200.7983125 r2159 P 1 0 N;.drill_flag=2
        #P 168.7803075 375.691675 r2740 P 2 0 N
        #P 178.93272 375.7812125 r3375 P 3 0 N
        #P 186.1709025 363.523 r2232 P 1 0 N
        #P 201.581225 371.811885 r5280 P 4 0 N;.drill=plated,.drill_flag=222
        #P 214.18967 363.056 r12900 P 5 0 N
        #P 380.22306 307.054 r777 P 6 0 N
        #L 361.0642025 461.4518325 402.76289 384.816405 r777 P 6 ;.drill_flag=333
        #L 327.254455 272.117245 408.39785 256.3393625 r777 P 6 ;.drill=plated,.drill_flag=333

        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$drl_layer -d FEATURES -o break_sr,units=mm

        regsub -all {,} $::data " " ::data
        regsub -all {;} $::data " " ::data

        set drill_list ""
        set slot_list ""
        set info_list ""

        foreach line $::data {
                set apply no
                set finished_drill 0
                set length 0
                set plus_tol 0
                set minus_tol 0
                set pth 2
                set dhs 0
                set drill_flag 0
                set count 0

                #PTH ����
                #1. NPTH
                #2. PTH
                #3. Guide
                #4. NPTH Slot
                #5. PTH Slot
                #6. PTH ������
                #7. NPTH ������
                #������ mm / �Ҽ��� 5�ڸ�����

                if {[lindex $line 0] == "#P"} {
                        #puts $line
                        if {[regexp {.drill=[a-z]+|.drill=[a-z]+_[a-z]+} $line type]} {
                                set type [regsub -all {.drill=} $type ""]
                        } else {
                                set type plated
                        }
                        if {$type == "plated" || $type == "via"} {
                                set pth 2
                        } elseif {$type == "non_plated"} {
                                set pth 1
                        } else {
                                set pth 2
                        }
                        if {[regexp {r[0-9]*|r[0-9]*.[0-9]*} [lindex $line 3] size]} {
                                set dhs [format %.5f [expr [regsub {r} $size ""]/1000.0]]
#                                if {$::wINCAM == 1} {
#                                        set dhs [format %.6f [expr [regsub {r} $size ""]/1000.0]]
#                                        #set dhs [expr {round(pow(10,5)*($dhs+0.000000001))/pow(10,5)}]
#                                        #puts ==DHS==$dhs
#                                } else {
#                                        set dhs [format %.5f [expr [regsub {r} $size ""]/1000.0]]
#                                }
                        }
                        if {[regexp {.drill_flag=[0-9]+} $line flag]} {
                                set drill_flag [regsub -all {.drill_flag=} $flag ""]
                        } else {
                                set drill_flag 0
                        }

                        # Bit Check Hole Ȯ��
#                        if {[regexp {.drill_first_last=last} $line bit_check_hole]} {
#                                set bit_check [regsub -all {.drill_first_last=last} $bit_check_hole 1]
#                        } else {
#                                set bit_check 0
#                        }

                        set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count"

                        # Bit Check Hole �� ��� Count ���ܸ� ���� Logic
#                        if {$bit_check == 1} {
#
#                        } else {
#                                lappend drill_list $drill_info
#                                lappend info_list $drill_info
#                        }

                        lappend drill_list $drill_info
                        lappend info_list $drill_info

        	} elseif {[lindex $line 0] == "#L"} {
        		if {[regexp {.drill=[a-z]+|.drill=[a-z]+_[a-z]+} $line type]} {
                                set type [regsub -all {.drill=} $type ""]
                        } else {
                                set type plated
                        }
                        if {$type == "plated" | $type == "via"} {
                                set pth 5
                        } elseif {$type == "non_plated"} {
                                set pth 4
                        } else {
                                set pth 5
                        }
                        if {[regexp {r[0-9]*|r[0-9]*.[0-9]*} [lindex $line 5] size]} {
                                set dhs [format %.5f [expr [regsub {r} $size ""]/1000.0]]
#                                if {$::wINCAM == 1} {
#                                        #set dhs [expr {round(pow(10,5)*($dhs+0.000000001))/pow(10,5)}]
#                                        set dhs [format %.6f [expr [regsub {r} $size ""]/1000.0]]
#                                } else {
#                                        set dhs [format %.5f [expr [regsub {r} $size ""]/1000.0]]
#                                }
                                set length [expr hypot(abs([lindex $line 3]-[lindex $line 1]),abs([lindex $line 4]-[lindex $line 2]))]
                        }
                        if {[regexp {.drill_flag=[0-9]+} $line flag]} {
                                set drill_flag [regsub -all {.drill_flag=} $flag ""]
                        } else {
                                set drill_flag 0
                        }

                        set length [format %.3f [expr $length + [string range $size 1 end]/1000.0]]

                        # Bit Check Hole Ȯ��
                        if {[regexp {.drill_first_last=last} $line bit_check_hole]} {
                                set bit_check [regsub -all {.drill_first_last=last} $bit_check_hole 1]
                        } else {
                                set bit_check 0
                        }

                        set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count"

                        # Bit Check Hole �� ��� Count ���ܸ� ���� Logic
                        # DTM LOAD ���� �߰� �ʿ�
                        if {$bit_check != 0} {

                        } else {
                                lappend drill_list $drill_info
                                lappend info_list $drill_info
                        }


         	} elseif {[lindex $line 0] == "#T"} {
        		if {[regexp {.drill=[a-z]+|.drill=[a-z]+_[a-z]+} $line type]} {
                                set type [regsub -all {.drill=} $type ""]
                        } else {
                                set type plate
                        }
                        if {$type == "plated" | $type == "via"} {
                                set pth 2
                        } elseif {$type == "non_plated"} {
                                set pth 1
                        } else {
                                set pth 2
                        }
                        if {[regexp {.canned_text} $line]} {
                                set dhs [format %.5f [expr [lindex $line 9] * 25.4 * 12 / 1000.0]]
                        }
                        if {[regexp {.drill_flag=[0-9]+} $line flag]} {
                                set drill_flag [regsub -all {.drill_flag=} $flag ""]
                        } else {
                                set drill_flag 0
                        }

                        # SLOT Bit Check Hole Ȯ��
                        if {[regexp {.drill_first_last=last} $line bit_check_hole]} {
                                set bit_check [regsub -all {.drill_first_last=last} $bit_check_hole 1]
                        } else {
                                set bit_check 0
                        }

                        set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count"

                        # SLOT Bit Check Hole �� ��� Count ���ܸ� ���� Logic
                        if {$bit_check != 0} {

                        } else {
                                lappend drill_list $drill_info
                                lappend info_list $drill_info
                        }
        	} else {
        		continue
        	}
        }
        puts ================================================
        puts "Drill length==[llength $drill_list]==$drill_list"
        puts "Slot length==[llength $slot_list]==$slot_list"
        puts "Info length==[llength $info_list]==$info_list"
        puts ================================================

        set info_list_unique [lsort -dict -decreasing -unique $info_list]

        # ������ ��� Logic ������Ʈ (10mm �̻� - 2020.06.17)
        #set info_list_unique [lsort -index 7 $info_list_unique]

        # ADM ������ Matching : 1���� : Hole Size, 2���� : Plate -> Non-plate -> Via, 3���� : Hole -> Slot
        set temp_list ""
        foreach line $info_list_unique {
                if {[lindex $line 5] == "plated" && [lindex $line 2] == 0} {
                        lappend temp_list $line
                }
        }
        foreach line $info_list_unique {
                if {[lindex $line 5] == "plated" && [lindex $line 2] != 0} {
                        lappend temp_list $line
                }
        }

        foreach line $info_list_unique {
                if {[lindex $line 5] == "non_plated" && [lindex $line 2] == 0} {
                        lappend temp_list $line
                }
        }
        foreach line $info_list_unique {
                if {[lindex $line 5] == "non_plated" && [lindex $line 2] != 0} {
                        lappend temp_list $line
                }
        }
        foreach line $info_list_unique {
                if {[lindex $line 5] == "via" && [lindex $line 2] == 0} {
                        lappend temp_list $line
                }
        }
        foreach line $info_list_unique {
                if {[lindex $line 5] == "via" && [lindex $line 2] != 0} {
                        lappend temp_list $line
                }
        }

        # ������ ��� Logic ������Ʈ (10mm �̻� - 2020.06.17)
        #set info_list_unique [lsort -index 7 $temp_list]
        set info_list_unique [lsort -real -index 7 $temp_list]

        #$info_list_unique : $apply=0 $finished_drill=1 $length=2 $plus_tol=3 $minus_tol=4 $type=5 $pth=6 $dhs=7 $drill_flag=8 $count=9 $order=10
        lappend ncFLAG
        lappend ncSIZE
        set order 1
        lappend order_list
        foreach line $info_list_unique {
                lappend ncFLAG [lindex $line 8]
                lappend ncSIZE [lindex $line 7]
                lappend order_list "$line $order"
                incr order
        }

        ################################################################################
        # set_table Order �� ���� ###########################################################

        # T-Code Order Rule ###############################################################
        # 1���� Fixed TOOL
        # 2���� Flag .out_flag ������ ���� ����
        # 3���� Hole ������ ���� ����
        ################################################################################

        # r450.09 -> r450.47 ���� - (2019.02.21 - by ������)
        # Fixed TOOL : 3��Ÿ��(r10 - 0.394), CNC Align(r450.47 - 17.735), Filp Align(r2000.02 - 78.741), DF GUIDE (OLD r1000.45 - 39.388, NEW r2500.45 - 98.443)
        #              X-Ray Mark Align (r21 - 0.827), X-Ray Hole Align (r21 - 0.866) - (2020.02.21) ������Ʈ
        #              CNC Coupon (r450.47 - 17.735), Jig Align Hole (r3175.46 - 125.018), DF_Guide (OLD r1000.45 - 39.388, NEW r2500.45 - 98.443), Flip Coupon (r2000.02 - 78.741) ������ ���� ������Ʈ - (2020.03.18)
        #set fix_tool_list "0.01000 0.45047 2.00002 1.00045 1.00046 2.50045 0.02100 0.02200"
        set fix_tool_list "0.01000 0.02100 0.02200 0.45047 3.17546 1.00045 1.00046 2.50045 2.00002"

        # 1�� : ADM ������ ncSIZE ������ ���ĵ� Index ���� Fixed TOOL�� ���ǵ� Index ����
        lappend fix_lindex_list
        foreach fix_tool $fix_tool_list {
        	set fix_lindex_list "$fix_lindex_list [lsearch -all $ncSIZE $fix_tool]"
        }

        # 2�� : ADM ������ ncSIZE ������ ���ĵ� Table�� FLAG�������� �� ����
        set e_ncFLAG [lsort -dict $ncFLAG]
        set index_1 [lsearch -regexp $e_ncFLAG {[1-9]}]
        if {$index_1 == -1} {
        	set e_ncFLAG ""
        } else {
        	set e_ncFLAG [lrange $e_ncFLAG $index_1 end]
        }
        set e_ncFLAG "[lsort -dict -uniq $e_ncFLAG] 0"

        lappend flag_index_list
        foreach flag $e_ncFLAG {
        	set flag_index_list "$flag_index_list [lsearch -all $ncFLAG $flag]"
        }

        # 2������ flag������ ���ĵ� ��ü List���� Fixed TOOL �� ���� �Ǿ� �ִ� Index ����
        foreach fix_index $fix_lindex_list {
        	set index [lsearch $flag_index_list $fix_index]
        	set flag_index_list [lreplace $flag_index_list $index $index]
        }

        # 1���� Fixed TOOL Index �� Flag ������ ���� �Ǿ� �ִ� Index ��ġ��
        set new_index_list "$fix_lindex_list $flag_index_list"

        # ���� ncFLAG List ������ ������ new_index_list�� ������ �� �Ͽ� �ٸ��� Ȯ��
        if {[llength $ncFLAG] != [llength $new_index_list]} {
        	puts "ncFLAG = $ncFLAG"
        	puts "new_index_list $new_index_list==$fix_lindex_list==$flag_index_list"
        	puts "[llength $ncFLAG] == [llength $new_index_list]"
        	puts "ERROR : set_table.tcl YK Call !!!"
        	exit 1
        }


        # Order �� ���� �� ################################################################
        ################################################################################

        #$info_list_unique : $apply=0 $finished_drill=1 $length=2 $plus_tol=3 $minus_tol=4 $type=5 $pth=6 $dhs=7 $drill_flag=8 $count=9 $order=10
        #������ Order ������� Final List ������
        lappend final_list
        foreach index $new_index_list {
                foreach line $order_list {
                        if {[expr $index +1] == [lindex $line 10]} {
                                lappend final_list [lreplace $line end end 0]
                        }
                }
        }


        #puts $final_list
        #puts $info_list

        set order 1
        foreach line $final_list {
                if {[lindex $line 0] == 0} {
                        set apply \{\}
                } else {
                        set apply [lindex $line 0]
                }
                if {[lindex $line 1] == 0} {
                        set finished_drill \{\}
                } else {
                        set finished_drill [lindex $line 1]
                }
                if {[lindex $line 2] == 0} {
                        set length \{\}
                } else {
                        set length [lindex $line 2]
                }
                if {[lindex $line 3] == 0} {
                        set plus_tol \{\}
                } else {
                        set plus_tol [lindex $line 3]
                }
                if {[lindex $line 4] == 0} {
                        set minus_tol \{\}
                } else {
                        set minus_tol [lindex $line 4]
                }
                if {[lindex $line 5] == 0} {
                        set type \{\}
                } else {
                        set type [lindex $line 5]
                }
                if {[lindex $line 6] == 0} {
                        set pth \{\}
                } else {
                        set pth [lindex $line 6]
                }
                if {[lindex $line 7] == 0} {
                        set dhs \{\}
                } else {
                        set dhs [lindex $line 7]
                }
                if {[lindex $line 8] == 0} {
                        set drill_flag \{\}
                } else {
                        set drill_flag [lindex $line 8]
                }

                #set line [lrange $line 0 end-1]
                set final "[lindex $line 5] [lindex $line 6] [lindex $line 7] [lindex $line 8]"
                set count 0

                # T-Code�� Count ��� : TYPE, PTH, DHS, .drill_flag ���� �� ��� Count +1
                foreach line2 $info_list {
                        #puts "line=$line == line2=$line2"
                        set info "[lindex $line2 5] [lindex $line2 6] [lindex $line2 7] [lindex $line2 8]"
                        if {$final == $info} {
                                incr count
                        } else {

                        }
                }

                set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count $order"
                DRILL_SPEC_INFO_TABLELIST insert end $drill_info
                incr order
        }

        # Line Background change
        set line_no $order
        for {set no 1} {$no < [expr $line_no -1]} {incr no 2} {
            DRILL_SPEC_INFO_TABLELIST rowconfigure $no -background #cccccc
        }

        #tk_messageBox -message "$::wDRILL_LAYER Info Load Success!"
        update



        puts "############ pDRILL_SPEC_INFO_NEW END !!! ############"
        puts "############ pDRILL_SPEC_INFO_NEW END !!! ############"
        puts "############ pDRILL_SPEC_INFO_NEW END !!! ############"
}




################################################################################
## Procedure    : pDRILL_SPEC_INFO_DTM_LOAD
## ����         : Drill Info Define - DTM LOAD BUTTON
## Input        :
## Return       :

proc pDRILL_SPEC_INFO_DTM_LOAD { } {

        puts "############ pDRILL_SPEC_INFO_DTM_LOAD START !!! ############"
        puts "############ pDRILL_SPEC_INFO_DTM_LOAD START !!! ############"
        puts "############ pDRILL_SPEC_INFO_DTM_LOAD START !!! ############"


        # SPEC Info Arrange
        set ::wDRILL_SPEC_INFO_ARRANGE [DRILL_SPEC_INFO_TABLELIST get 0 end]
        #no {} {} 0.076 0.076 {} {} 0.45009 {} 18 1 {} {}
        #no {} {} 0.076 0.076 plated 2 0.70000 1 123 2 {} {}
        #no {} {} 0.076 0.076 {} {} 0.70000 2 73 13 {} {}
        #no {} {} 0.076 0.076 plated 2 0.70000 2 44 14 {} {}
        #no {} 1.50000 0.076 0.076 plated 5 0.80000 2 8 15 {} {}
        #no {} {} 0.076 0.076 non_plated 1 0.90000 2 2 16 {} {}
        #no {} {} 0.076 0.076 plated 2 1.00000 2 13 17 {} {}
        #no {} {} 0.076 0.076 non_plated 1 2.05000 {} 4 32 {} {}
        #no {} {} 0.076 0.076 plated 2 3.10000 {} 1 35 {} {}
        #no {} 3.70100 0.076 0.076 plated 5 3.10100 {} 1 36 {} {}
        #no {} {} 0.076 0.076 plated 2 3.30000 {} 8 37 {} {}
        #no {} {} 0.076 0.076 plated 2 4.70000 {} 26 40 {} {}

        if {$::wDRILL_SPEC_INFO_ARRANGE == ""} {
                tk_messageBox -message "recheck the drill Info.!!"
                return
        }  else {
                STEP_ON  $::wJOB $::wPANEL no
                DRILL_SPEC_INFO_TABLELIST delete 0 end
        }

        # Guide / Back / Depth / XRAY / test / re / etc Drill  SKIP
        set bit_add 0
        # SLOT Bit Check Hole Insert define : main, cap, sub drill
        # �ĵ帱 SKIP (2020.07.09) --> �ٽ� ���� (2020.07.14)
        if {[regexp {^d01$|^d001$|^d01-np$|^d001-np$|^d[0-9]+[m|c|s]$|^d01\-[t|b|f|r]$|^d001\-[t|b|f|r]$|^d[0-9]+[m|c|s]\-[t|b]$} $::wDRILL_LAYER]} {
                set bit_add 1
        }

        # canned_text Hole Check
        # Panel DTM Slots = By Length ���� �ʿ�
        CLEAR_RESET
        WORK $::wDRILL_LAYER
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.canned_text
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                DO_INFO -t layer -e $::wJOB/$::wPANEL/$::wDRILL_LAYER -d TOOL,units=mm
                foreach drill_size $gTOOLdrill_size count $gTOOLcount shape $gTOOLshape {
                        if {$drill_size == "500.38" && $shape == "hole"} {
                                # Panel DTM = By Length ������
                                set ::wCANNED_TEXT_HOLE_COUNT [expr $count + 1]

                                # Panel DTM = no ������
                                #set ::wCANNED_TEXT_HOLE_COUNT $count
                                break
                        }
                }
        }
        COM filter_reset,filter_name=popup


        if [ catch {

                #  Tmp. Layer Check
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/${::wDRILL_LAYER}_tmp -d EXISTS
                if {$gEXISTS == "yes"} {
                        DEL_LAYER ${::wDRILL_LAYER}_tmp
                }
                # PNL Hole move to Tmp. layer (Bit Check Hole - attribute=.drill_first_last=last)
                WORK $::wDRILL_LAYER
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.drill_first_last,option=last
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_move_other,target_layer=${::wDRILL_LAYER}_tmp,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                }

                # DTM INFO LOAD START
                DO_INFO -t layer -e $::wJOB/$::wPANEL/$::wDRILL_LAYER -d TOOL -o break_sr,units=mm
                #DO_INFO -t layer -e $::wJOB/pcb/$::wDRILL_LAYER -d TOOL
                #set gTOOLnum         = ('1'        '2'        '3'        '4'        '5'          '6'        '7'        '8'        '9'        '10'         '11'       '12'       '13'       '14'       '15'       '16'       '17'       '18'         '19'       '20'         '21'       '22'       '23'        )
                #set gTOOLcount       = ('8'        '1'        '12'       '492'      '2'          '13'       '10'       '10'       '16'       '1'          '2'        '10'       '2'        '4'        '1'        '8'        '4'        '4'          '33'       '4'          '4'        '2'        '3'         )
                #set gTOOLshape       = ('slot'     'slot'     'hole'     'hole'     'hole'       'hole'     'hole'     'hole'     'hole'     'hole'       'hole'     'hole'     'hole'     'hole'     'hole'     'hole'     'hole'     'hole'       'hole'     'hole'       'hole'     'hole'     'hole'      )
                #set gTOOLtype        = ('plated'   'plated'   'plated'   'plated'   'non_plated' 'plated'   'plated'   'plated'   'plated'   'non_plated' 'plated'   'plated'   'plated'   'plated'   'plated'   'plated'   'plated'   'non_plated' 'plated'   'non_plated' 'plated'   'plated'   'non_plated')
                #set gTOOLtype2       = ('standard' 'standard' 'standard' 'standard' 'standard'   'standard' 'standard' 'standard' 'standard' 'standard'   'standard' 'standard' 'standard' 'standard' 'standard' 'standard' 'standard' 'standard'   'standard' 'standard'   'standard' 'standard' 'standard'  )
                #set gTOOLmin_tol     = ('0'        '0'        '0'        '44'        '0'          '0'        '0'        '0'        '0'        '0'          '0'        '0'        '0'        '0'        '0'        '0'        '0'        '0'          '0'        '0'          '0'        '0'        '0'         )
                #set gTOOLmax_tol     = ('0'        '0'        '0'        '77'        '0'          '0'        '0'        '0'        '0'        '0'          '0'        '0'        '0'        '0'        '0'        '0'        '0'        '0'          '0'        '0'          '0'        '0'        '0'         )
                #set gTOOLfinish_size = ('800'      '3101'     '1700'     '700'      '900'        '1000'     '1100'     '1500'     '1600'     '1700'       '2000'     '2100'     '2600'     '2800'     '3100'     '3300'     '3500'     '4700'       '4700'     '2050'       '2050'     '3650'     '3650'      )
                #set gTOOLdrill_size  = ('800'      '3101'     '1700'     '700'      '900'        '1000'     '1100'     '1500'     '1600'     '1700'       '2000'     '2100'     '2600'     '2800'     '3100'     '3300'     '3500'     '4700'       '4700'     '2050'       '2050'     '3650'     '3650'      )
                #set gTOOLbit         = ('A'        'B'        'C'        ''         ''           ''         ''         ''         ''         ''           ''         ''         ''         ''         ''         ''         ''         ''           ''         ''           ''         ''         ''          )
                #set gTOOLslot_len    = ('700'      '600'      '0'        '0'        '0'          '0'        '0'        '0'        '0'        '0'          '0'        '0'        '0'        '0'        '0'        '0'        '0'        '0'          '0'        '0'          '0'        '0'        '0'         )
                #set gTOOLuser_des    = (''         '2;3c;k;t' ''         ';hh;;dd'  ''           ''         ''         ''         ''         ''           ''         ''         ''         ''         ''         ''         ''         ''           ''         ''           ''         ''         ''          )

                foreach line $::wDRILL_SPEC_INFO_ARRANGE {
                        #$info_list_unique : $apply=0 $finished_drill=1 $length=2 $plus_tol=3 $minus_tol=4 $type=5 $pth=6 $dhs=7 $drill_flag=8 $count=9 $order=10
                        set apply [lindex $line 0]
                        if {[lindex $line 1] == ""} {
                                set finished_drill \{\}
                        } else {
                                set finished_drill [lindex $line 1]
                        }
                        if {[lindex $line 2] == ""} {
                                set length 0
                        } else {
                                set length [lindex $line 2]
                        }
                        if {[lindex $line 3] == ""} {
                                set plus_tol \{\}
                        } else {
                                set plus_tol [lindex $line 3]
                        }
                        if {[lindex $line 4] == ""} {
                                set minus_tol \{\}
                        } else {
                                set minus_tol [lindex $line 4]
                        }
                        if {[lindex $line 5] == ""} {
                                set type \{\}
                        } else {
                                set type [lindex $line 5]
                        }
                        if {[lindex $line 6] == ""} {
                                set pth \{\}
                        } else {
                                set pth [lindex $line 6]
                        }
                        if {[lindex $line 7] == ""} {
                                set dhs \{\}
                        } else {
                                set dhs [lindex $line 7]
                                # InCAM �Ҽ��� �ڸ� �ݿø� ���� ó��
                                set dhs_plus $dhs
                                set dhs_minus $dhs
                                if {$::wINCAM == 1} {
                                        set dhs_plus [format %.5f [expr $dhs +0.00001]]
                                        set dhs_minus [format %.5f [expr $dhs -0.00001]]
                                }
                        }
                        if {[lindex $line 8] == ""} {
                                set drill_flag \{\}
                        } else {
                                set drill_flag [lindex $line 8]
                        }
                        set count [lindex $line 9]
                        set order [lindex $line 10]
                        #set description \{\}
                        set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count $order"
                        #puts $drill_info

        	        # Genesis Ver.9.08(DDPI) does not running : $gTOOLuser_des
        		# foreach tcount $gTOOLcount shape $gTOOLshape finish_size $gTOOLfinish_size drill_size $gTOOLdrill_size type1 $gTOOLtype min_tol $gTOOLmin_tol max_tol $gTOOLmax_tol slot_len $gTOOLslot_len bit $gTOOLbit user_des $gTOOLuser_des
                        foreach tcount $gTOOLcount shape $gTOOLshape finish_size $gTOOLfinish_size drill_size $gTOOLdrill_size type1 $gTOOLtype min_tol $gTOOLmin_tol max_tol $gTOOLmax_tol slot_len $gTOOLslot_len bit $gTOOLbit {
                                #puts "shape $gTOOLshape finish_size $gTOOLfinish_size drill_size $gTOOLdrill_size type1 $gTOOLtype min_tol $gTOOLmin_tol max_tol $gTOOLmax_tol slot_len $gTOOLslot_len bit $gTOOLbit"

                                # HOLE
                                if {$dhs == "0.50038" || $length == 0 && $type == $type1 && ($dhs == [format %.5f [expr $drill_size / 1000.0]] || $dhs_plus == [format %.5f [expr $drill_size / 1000.0]] || $dhs_minus == [format %.5f [expr $drill_size / 1000.0]])} {
                                        ####Drill ���� Logic ##################################################################################
                                        puts "HOLE SIZE : $dhs == [format %.5f [expr $drill_size / 1000.0]] && finish_size : $finished_drill == [format %.5f [expr $finish_size / 1000.0]] && type : $type == $type1 && length : $length == $slot_len"
                                        #�̵�� Spec �� ��� DHS Size�� ����
                                        puts "HOLE DHS=$dhs=[format %.5f [expr $drill_size / 1000.0]], CNT=$count == $tcount, LENGTH=$length, TYPE=$type == $type1"
                                        puts " "
                                        #puts "DHS=$dhs, DHS_PLUS=$dhs_plus, DHS_MINUS=$dhs_minus, DRILL SIZE=$drill_size"

                                        set finished_drill [format %.5f [expr $finish_size / 1000.0]]
                                        if {$finished_drill == "0.00000"} {
                                                set finished_drill [format %.5f $dhs]
                                                if {$finished_drill > 12.7} {
                                                        tk_messageBox -message "ALARM : FHS ${finished_drill}mm = Can not apply DHS size 12.7mm over, Call to Spec !!"
                                                        break
                                                }
                                        }
                                        set length $finished_drill

                                        if {$max_tol == 0} {
                                                set plus_tol 0.000
                                        } else {
                                                set plus_tol [format %.3f [expr $max_tol / 1000.0]]
                                        }
                                        if {$min_tol == 0} {
                                                set minus_tol 0.000
                                        } else {
                                                set minus_tol [format %.3f [expr $min_tol / 1000.0]]
                                        }

                                        # 12.7mm �̻� �ʰ� �������� �Ұ� (2020.06.18)
                                        if {$dhs > 12.7} {
                                                tk_messageBox -message "ALARM : DHS ${dhs}mm Can not apply DHS size 12.7mm over, Call to Spec !!"
                                                break

                                        # DTM LOAD�� PNL Ȧ ���� ó��
                                        } elseif {$dhs > 6.35} {
                                                set dhs [format %.5f [expr $dhs / 2.0]]
                                                set description "CIRCLE_[format %.3f [expr $dhs * 2.0]]"
                                                # PTH Type ���� : ������ ����
                                                if {$pth == 1} {
                                                        set pth 7
                                                } elseif {$pth == 2} {
                                                        set pth 6
                                                }

                                        # CNC Align Coupon : r450.09 -> r450.47 ���� - (2019.02.21 - by ������)
                                        # ANA2 Coupon : r200.46 -> r500.56 ���� - (2019.09.16 - DDPI �ּ� Ȧ ������ �ݿ� : 200um �̻�)
                                        # 0.01000=TARGET_GUIDE, 0.45047=CNC_ALIGN_COUPON, 0.50038=canned_text, 0.50048=RBM_HOLE
                                        # 1.00045 or 1.00046=DF_GUIDE, 2.00002=FLIP_DRILL_COUPON, 2.50045=DF_GUIDE, 3.17546=JIG_ALIGN, 5.00047=PIN_GUIDE
                                        # 2.00045 or 2.00046=X-RAY_HOLE_ALIGN
                                        } elseif {$dhs == "0.01000"} {
                                                set description "TARGET_GUIDE"
                                        } elseif {$dhs == "0.02100"} {
                                                set description "X-RAY_MARK_ALIGN"
                                        } elseif {$dhs == "0.02200"} {
                                                set description "X-RAY_HOLE_ALIGN"
                                        } elseif {$dhs == "2.00045" || $dhs == "2.00046"} {
                                                set description "X-RAY_HOLE_ALIGN"
                                        } elseif { $dhs == "0.50056"} {
                                                set description "ANA-2_COUPON"
                                        } elseif {$dhs == "0.45047"} {
                                                set description "CNC_COUPON"
                                        } elseif {$dhs == "0.50038"} {
                                                set count $::wCANNED_TEXT_HOLE_COUNT
                                                set description "TOOL_NO_TEXT"
                                        } elseif {$dhs == "0.50043"} {
                                                set description "2ND_STACKING_TEXT"
                                        } elseif {$dhs == "0.50048"} {
                                                set description "RBM_HOLE"
                                        } elseif {$dhs == "2.00002"} {
                                                set description "FLIP_DRILL_COUPON"
                                        # OLD r1000.45, NEW r2500.45
                                        } elseif { $dhs == "1.00045" || $dhs == "2.50045"} {
                                                set description "DF_GUIDE"
                                        } elseif { $dhs == "2.50075"} {
                                                set description "X-RAY_HOLE_ALGIN_GUIDE"
                                        } elseif {$dhs == "3.15046"} {
                                                set description "2ND_CNC_GUIDE"
                                        } elseif { $dhs == "3.17546"} {
                                                set description "JIG_ALIGN"
                                        } elseif { $dhs == "5.00047"} {
                                                set description "PIN_GUIDE"
                                        } else {
                                                set description [regsub -all { } [regsub -all {;} [regsub -all {,} $bit ""] ""] "_"]
                                        }

                                        set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count $order $description"

                                        #puts "HOLE == $drill_info"
                                        break

                                # LINE
                                } elseif {$length != 0 && $type == $type1 && ($dhs == [format %.5f [expr $drill_size / 1000.0]] || $dhs_plus == [format %.5f [expr $drill_size / 1000.0]] || $dhs_minus == [format %.5f [expr $drill_size / 1000.0]])} {
                                        ####SLOT ���� Logic ##################################################################################
                                        puts "SLOT SIZE DHS=$dhs=[format %.5f [expr $drill_size / 1000.0]], CNT=$count == $tcount, FHS=$finished_drill, LENGTH=$length, TYPE=$type == $type1"
                                        puts "SLOT DHS=$dhs, DHS_PLUS=$dhs_plus, DHS_MINUS=$dhs_minus, DRILL SIZE=$drill_size"
                                        puts " "

                                        #�̵�� Spec �� ��� DHS Size�� ����
                                        set finished_drill [format %.5f [expr $finish_size / 1000.0]]
                                        if {"$finished_drill" == "0.00000"} {
                                                set finished_drill [format %.5f $dhs]
                                        }
                                        set length [format %.5f [expr $length - [format %.5f $dhs] + $finished_drill]]
                                        if {$max_tol == 0} {
                                                set plus_tol 0.000
                                        } else {
                                                set plus_tol [format %.3f [expr $max_tol / 1000.0]]
                                        }
                                        if {$min_tol == 0} {
                                                set minus_tol 0.000
                                        } else {
                                                set minus_tol [format %.3f [expr $min_tol / 1000.0]]
                                        }
                                        if {$bit == ""} {
                                                set description "PHG"
                                        } else {
                                                set description [regsub -all { } [regsub -all {;} [regsub -all {,} $bit ""] ""] "_"]
                                        }

                                        # DTM LOAD ���� SLOT�� ���� Bit Check Hole�� ���� Count+1 ����
                                        # ���� Drill Layer�� �ƴϰų�  Guide / Back / Depth Drill �� Bit Check Hole Count �߰� SKIP!
                                        if {$bit_add == 1} {
                                                set count [expr $count + 1]
                                        } else {
                                                set count [expr $count + 0]
                                        }

                                        set drill_info "$apply $finished_drill $length $plus_tol $minus_tol $type $pth $dhs $drill_flag $count $order $description"
                                        #puts "SLOT == $drill_info"
                                        break

                                # ELSE
                                } else {
                                        puts "ELSE SIZE DHS=$dhs=[format %.5f [expr $drill_size / 1000.0]], CNT=$count == $tcount, FHS=$finished_drill, LENGTH=$length, TYPE=$type == $type1"
                                        puts "ELSE DHS=$dhs, DHS_PLUS=$dhs_plus, DHS_MINUS=$dhs_minus, DRILL SIZE=$drill_size ([format %.5f [expr $drill_size / 1000.0]])"
                                        puts " "
                                        ####DRILL,SLOT �� ���� Logic #############################################################################
                                        continue
                                }
                        }
                        DRILL_SPEC_INFO_TABLELIST insert end $drill_info
                }

                #  Tmp. Layer Check
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/${::wDRILL_LAYER}_tmp -d EXISTS
                if {$gEXISTS == "yes"} {
                        WORK ${::wDRILL_LAYER}_tmp
                        COM filter_reset,filter_name=popup
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_move_other,target_layer=$::wDRILL_LAYER,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        }
                        DEL_LAYER ${::wDRILL_LAYER}_tmp
                }

                # Line Background change
                set line_no [llength $::wDRILL_SPEC_INFO_ARRANGE]
                for {set no 1} {$no < $line_no} {incr no 2} {
                    DRILL_SPEC_INFO_TABLELIST rowconfigure $no -background #cccccc
                }

                STEP_ON  $::wJOB $::wPANEL yes

        } errorMessage] {
                global errorInfo
                tk_messageBox -message $errorInfo
                return 1
        } else {
                # Command body ok, result of last command is in errorInfo.

        }

        puts "############ pDRILL_SPEC_INFO_DTM_LOAD END !!! ############"
        puts "############ pDRILL_SPEC_INFO_DTM_LOAD END !!! ############"
        puts "############ pDRILL_SPEC_INFO_DTM_LOAD END !!! ############"
}




################################################################################
## Procedure    : pDRILL_SPEC_INFO_SAVE
## ����         : Drill Info Define - DRILL INFO SAVE BUTTON
## Input        :
## Return       :

proc pDRILL_SPEC_INFO_SAVE { } {

        puts "############ pDRILL_SPEC_INFO_SAVE START !!! ############"
        puts "############ pDRILL_SPEC_INFO_SAVE START !!! ############"
        puts "############ pDRILL_SPEC_INFO_SAVE START !!! ############"

        if {$::wINCAM == 1} {
                set fpath "$::env(JOB_USER_DIR)/dde_mlb_panel_drill_spec_${::wDRILL_LAYER}.info"
        } else {
                set fpath "$::gGENESIS_JOB_DB_PATH/user/dde_mlb_panel_drill_spec_${::wDRILL_LAYER}.info"
        }

        # Old info file save
        set time [clock format [clock scan now] -format %y%m%d%H%M%S]
        if {[file exists $fpath]} {
            file copy -force $fpath ${fpath}.$time
        }


        DRILL_SPEC_INFO_TABLELIST delete 0 end

        set fileID [open $fpath w]

        foreach line $::wDRILL_SPEC_INFO {
            puts $fileID $line
            DRILL_SPEC_INFO_TABLELIST insert end $line
           #lappend order_list [lindex $line 3]
        }
        close $fileID

        update

        puts "############ pDRILL_SPEC_INFO_SAVE END !!! ############"
        puts "############ pDRILL_SPEC_INFO_SAVE END !!! ############"
        puts "############ pDRILL_SPEC_INFO_SAVE END !!! ############"
}



################################################################################
## Procedure    : pDRILL_SPEC_INFO_LOAD
## ����         : Drill Info Define - DRILL INFO LOAD BUTTON
## Input        :
## Return       :

proc pDRILL_SPEC_INFO_LOAD { } {

        puts "############ pDRILL_SPEC_INFO_LOAD START !!! ############"
        puts "############ pDRILL_SPEC_INFO_LOAD START !!! ############"
        puts "############ pDRILL_SPEC_INFO_LOAD START !!! ############"

        DRILL_SPEC_INFO_TABLELIST delete 0 end

        set ::wINFO_FILE_NAME "dde_mlb_panel_drill_spec_${::wDRILL_LAYER}.info"


        if {$::wINCAM == 1} {
            if {[file exists $::env(JOB_USER_DIR)/$::wINFO_FILE_NAME]} {
                set file_path $::env(JOB_USER_DIR)
            }
        } else {
            if {[file exists $::gGENESIS_JOB_DB_PATH/user/$::wINFO_FILE_NAME]} {
                set file_path "$::gGENESIS_JOB_DB_PATH/user"
            }
        }

        set ::wINFO_FILE_NAME_LIST ""

        if {[info exists file_path]} {
            set ::wINFO_FILE_NAME_LIST [glob -nocomplain -tails -directory $file_path ${::wINFO_FILE_NAME}*]
            if {[lsearch $::wINFO_FILE_NAME_LIST $::wINFO_FILE_NAME] != -1} {
                set ::wINFO_FILE_NAME_LIST "$::wINFO_FILE_NAME [lrange [lsort -decr $::wINFO_FILE_NAME_LIST] 0 end]"

                if {[lindex  $::wINFO_FILE_NAME_LIST end] == $::wINFO_FILE_NAME} {
                    set ::wINFO_FILE_NAME_LIST [lrange $::wINFO_FILE_NAME_LIST 0 end-1]
                }

            } else {
                PAUSE "$::wINFO_FILE_NAME not found !!!"
            }
        }


        Window show $::widget(Toplevel2)

        vwait ::wRETURN

        set line_no 1

        if {[info exists file_path]} {
            set f [open $file_path/$::wINFO_FILE_NAME r]
            set data [split [read $f] "\n"]
            close $f

            puts "pDRILL_SPEC_INFO_LOAD"

            foreach line $data {
                # delete end line
                if {[lindex $line 0] == ""} {continue}
                DRILL_SPEC_INFO_TABLELIST insert end $line

                incr line_no
            }

            # Line Background change
            for {set no 1} {$no < [expr $line_no -1]} {incr no 2} {
                DRILL_SPEC_INFO_TABLELIST rowconfigure $no -background #cccccc
            }
        }

        update

        puts "############ pDRILL_SPEC_INFO_LOAD END !!! ############"
        puts "############ pDRILL_SPEC_INFO_LOAD END !!! ############"
        puts "############ pDRILL_SPEC_INFO_LOAD END !!! ############"
}




################################################################################
## Procedure    : pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE
## ����         : Scale Change Image Production Params Setting
## Input        :
## Return       :

proc pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE { layer_info_path {mod 0} } {

        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE START !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE START !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE START !!! ########################"


        # mod = 0 AUTO PNL ����
        # mod = 1 Scake Change Mod

        STEP_ON $::wJOB $::wPANEL no

        CLEAR_RESET

        # auto step ����
        set step $::wPANEL

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        DO_INFO -t step -e $::wJOB/$step -d PROF_LIMITS,units=mm
        set auto_center_x [expr $gPROF_LIMITSxmax / 2.0]
        set auto_center_y [expr $gPROF_LIMITSymax / 2.0]


        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        #set gROWrow             = ('1'           '2'           '3'        '4'            '5'            '6'            '7'            '8'            '9'            '10'           '11'           '12'           '13'           '14'           '15'           '16'           '17'           '18'           '19'           '20'           '21'           '22'           '23'           '24'           '25'           '26'           '27'           '28'           '29'           '30'           '31'           '32'           '33'          '34'          '35'       '36'       '37'       '38'       '39'       '40'          '41'       '42'       '43'       '44'       '45'       '46'       '47'       '48'         '49'         '50'          '51'    '52'       '53'       '54'       '55'       '56'       '57'       '58'       '59'       '60'    '61'       '62'       '63'    '64'       '65'       '66'       '67'       '68'       '69'       '70'       '71'       '72'       '73'       '74'       '75'       '76'       '77'       '78'       '79'       '80'       '81'       '82'       '83'       '84'       '85'       '86'       '87'       '88'       '89'       '90'       '91'       '92'       '93'       '94'       '95'       '96'       '97'       '98'       '99'        '100'       '101'         '102'         '103'      '104'      '105'      '106'      '107'      '108'      '109'       '110'       '111'       '112'       '113'       '114'       '115'       '116'       '117'       '118'       '119'       '120'       '121'       '122'       '123'       '124'       '125'       '126'       '127'       '128'       '129'       '130'       '131'       '132'       '133'       '134'       '135'       '136'       '137'       '138'      )
        #set gROWtype            = ('layer'       'layer'       'layer'    'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'       'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'      'layer'      'layer'       'empty' 'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'empty' 'layer'    'layer'    'empty' 'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'     'layer'     'layer'       'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'    )
        #set gROWname            = ('m01'         's01'         'l01'      'l02'          'l03'          'l04'          'l05'          'l06'          'l07'          'l08'          'l09'          'l10'          'l11'          'l12'          'l13'          'l14'          'l15'          'l16'          'l17'          'l18'          'l19'          'l20'          'l21'          'l22'          'l23'          'l24'          'l25'          'l26'          'l27'          'l28'          'l29'          'l30'          's30'         'm30'         'rbm'      'c01'      'd01'      'd01-x'    'd01-np'   'd01-milling' 'd0125b'   'd0125d'   'd0130c'   'd0229m'   'd0328m'   'd0427m'   'd06g'   'd0526g-ppg' 'd0526g-ccl' 'd0526g-film' ''      'c0102c'   'c0203c'   'c0304c'   'c0405c'   'c3029c'   'c2928c'   'c2827c'   'c2726c'   ''      'c0102p'   'c3029p'   ''      'cu0102'   'cu0203'   'cu0304'   'cu0405'   'cu3029'   'cu2928'   'cu2827'   'cu2726'   'ana'      'ana01'    'ana02'    'tent01'   'tent30'   'p01'      'p30'      'cp01-5'   'cp02-4'   'cp03-3'   'cp04-2'   'cp05-1'   'cp26-1'   'cp27-2'   'cp28-3'   'cp29-4'   'cp30-5'   'l01-1'    'l30-1'    'l01-2'    'l30-2'    'etch01'   'etch30'   's-etch01' 's-etch30' 's-mask01' 's-mask30' 'sr-mask01' 'sr-mask30' 'sr-mask01-2' 'sr-mask30-2' 's-tent01' 's-tent30' 'e-mask01' 'e-mask30' 'p-mask01' 'p-mask30' 'touch_l01' 'touch_l30' 'touch_l05' 'touch_l07' 'touch_l09' 'touch_l11' 'touch_l13' 'touch_l15' 'touch_l17' 'touch_l19' 'touch_l21' 'touch_l23' 'touch_l25' 'touch_l04' 'touch_l03' 'touch_l02' 'touch_l06' 'touch_l08' 'touch_l10' 'touch_l12' 'touch_l14' 'touch_l16' 'touch_l18' 'touch_l20' 'touch_l22' 'touch_l24' 'touch_l26' 'touch_l27' 'touch_l28' 'touch_l29')
        #set gROWcontext         = ('board'       'board'       'board'    'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'       'board'       'board'    'board'    'board'    'board'    'board'    'board'       'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'      'board'      'board'       ''      'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    ''      'board'    'board'    ''      'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'     'board'     'board'       'board'       'board'    'board'    'board'    'board'    'board'    'board'    'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'     )
        #set gROWlayer_type      = ('silk_screen' 'solder_mask' 'signal'   'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'solder_mask' 'silk_screen' 'document' 'document' 'drill'    'drill'    'drill'    'drill'       'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'      'drill'      'drill'       ''      'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    ''      'drill'    'drill'    ''      'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document'  'document'  'document'    'document'    'document' 'document' 'document' 'document' 'document' 'document' 'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'   )
        #set gROWlayer_base_type = ('silk_screen' 'solder_mask' 'signal'   'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'solder_mask' 'silk_screen' 'document' 'document' 'drill'    'drill'    'drill'    'drill'       'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'      'drill'      'drill'       ''      'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    ''      'drill'    'drill'    ''      'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document'  'document'  'document'    'document'    'document' 'document' 'document' 'document' 'document' 'document' 'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'   )
        #set gROWpolarity        = ('positive'    'positive'    'positive' 'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'    'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'   'positive'   'positive'    ''      'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' ''      'positive' 'positive' ''      'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'  'positive'  'positive'    'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive' )
        #set gROWside            = ('top'         'top'         'top'      'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'bottom'       'bottom'      'bottom'      'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )
        #set gROWdrl_start       = (''            ''            ''         ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''             ''            ''            ''         ''         'l01'      'l01'      'l01'      'l01'         'l01'      'l01'      'l01'      'l02'      'l03'      'l04'      'l05'      'l01'        'l01'        'l01'         ''      'l01'      'l02'      'l03'      'l04'      'l29'      'l28'      'l27'      'l26'      ''      'l01'      'l
        #set gROWdrl_endl30'      'l30'      'l30'      'l30'         'l25'      'l25'      'l30'      'l29'      'l28'      'l27'      'l26'      'l30'        'l30'        'l30'         ''      'l02'      'l03'      'l04'      'l05'      'l30'      'l29'      'l28'      'l27'      ''      'l02'      'l
        #set gROWfoil_side       = ('none'        'none'        'top'      'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'bottom'       'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )
        #set gROWsheet_side      = ('none'        'none'        'top'      'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )

        set layer_list ""
        foreach layer $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type context $gROWcontext {
                if {$context != "board"} {continue}

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm
                #set gLPDpolarity      = 'negative'        - 1
                #set gLPDxstretch      = '100.0300'        - 2
                #set gLPDystretch      = '100.0400'        - 3
                #set gLPDxshift        = '0'               - 4
                #set gLPDyshift        = '0'               - 5
                #set gLPDxmirror       = '267'             - 6
                #set gLPDymirror       = '0'               - 7
                #set gLPDxcenter_inch  = '267'             - 8
                #set gLPDycenter_inch  = '305              - 9
                #set gLPDsmoothing     = 'smooth'          - 10
                #set gLPDswap_axes     = 'no_swap'         - 11
                #set gLPDdef_ext_lpd   = 'no'              - 12
                #set gLPDdevice_type   = 'either_type'     - 13
                #set gLPDres_value    = '0.250000'        - 14
                #set gLPDres_units    = 'mil'             - 15

                set text "$layer $gLPDpolarity $gLPDxstretch $gLPDystretch $gLPDxshift $gLPDyshift $gLPDxmirror $gLPDymirror $gLPDxcenter_inch $gLPDycenter_inch $gLPDsmoothing $gLPDswap_axes $gLPDdef_ext_lpd $gLPDdevice_type $gLPDres_value $gLPDres_units"

                set polarity [lindex $text 1]
                set scale_x [lindex $text 2]
                set scale_y [lindex $text 3]
                set xshift [lindex $text 4]
                set yshift [lindex $text 5]
                set xmirror [lindex $text 6]
                set ymirror [lindex $text 7]
                set center_x [lindex $text 8]
                set center_y [lindex $text 9]
                set smoothing [lindex $text 10]
                set swap_axes [lindex $text 11]
                set def_ext_lpd [lindex $text 12]
                set device_type [lindex $text 13]
                #set device_type "EITHER TYPE"
                set resolution_value 0.125
                set resolution_units [lindex $text 15]

                # PNL Step Center Value re-define
                if {$::wSITE == 3} {
                        if {$xmirror != 0} {
                                set xmirror 0
                                set ymirror $center_y
                        } elseif {$ymirror != 0} {
                                set xmirror 0
                                set ymirror $center_y
                        } else {
                                set xmirror 0
                                set ymirror 0
                        }
                } else {
                        if {$xmirror != 0} {
                                set xmirror $center_x
                                set ymirror 0
                        } elseif {$ymirror != 0} {
                                set xmirror $center_x
                                set ymirror 0
                        } else {
                                set xmirror 0
                                set ymirror 0
                        }
                }
                if {$center_x != 0} {
                        set center_x $auto_center_x
                }
                if {$center_y != 0} {
                        set center_x $auto_center_x
                }

                set text2 "$layer $polarity $scale_x $scale_y $xshift $yshift $xmirror $ymirror $center_x $center_y $smoothing $swap_axes $def_ext_lpd $device_type $resolution_value $resolution_units"
                lappend info_list $text2
                lappend layer_list $layer

                puts $text
                puts $text2
        }


        foreach layer $layer_list {

                foreach text $info_list {
                        if {$layer == [lindex $text 0]} {
                                set polarity [lindex $text 1]
                                set scale_x [lindex $text 2]
                                set scale_y [lindex $text 3]
                                set xshift [lindex $text 4]
                                set yshift [lindex $text 5]
                                set xmirror [lindex $text 6]
                                set ymirror [lindex $text 7]
                                set center_x [lindex $text 8]
                                set center_y [lindex $text 9]
                                set smoothing [lindex $text 10]
                                set swap_axes [lindex $text 11]
                                set def_ext_lpd [lindex $text 12]
                                #set device_type [lindex $text 13]
                                set device_type "EITHER TYPE"
                                set resolution_value [lindex $text 14]
                                set resolution_units [lindex $text 15]

                                COM "image_set_elpd2,job=$::wJOB,step=$step,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=$def_ext_lpd,resolution_value=$resolution_value,resolution_units=$resolution_units"

                                # DDPI LP-9 Scale Setting Addition
                                set device_type LP-9
                                COM "image_set_elpd2,job=$::wJOB,step=$step,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=$def_ext_lpd,resolution_value=$resolution_value,resolution_units=$resolution_units"
                        }
                }

        }

        CLEAR_RESET

        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE END !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE END !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_SCALE END !!! ########################"

}


################################################################################
## Procedure    : pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP
## ����         : auto step Image Production Params Setting
## Input        :
## Return       :

proc pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP { layer_info_path {mod 0} } {

        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP START !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP START !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP START !!! ########################"

        # mod = 0 : �Ϲ� ���� ����
        # mod = 1 : Scale Change mod, Layer Scale ���� ���� ��� Skip ó�� Ȯ��

        # auto step check
        DO_INFO -t step -e $::wJOB/auto -d EXISTS
        if {$gEXISTS == "no"} {return}

        # auto step ����
        set step auto

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        DO_INFO -t step -e $::wJOB/$step -d PROF_LIMITS,units=mm
        set auto_center_x [expr $gPROF_LIMITSxmax / 2.0]
        set auto_center_y [expr $gPROF_LIMITSymax / 2.0]


        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        #set gROWrow             = ('1'           '2'           '3'        '4'            '5'            '6'            '7'            '8'            '9'            '10'           '11'           '12'           '13'           '14'           '15'           '16'           '17'           '18'           '19'           '20'           '21'           '22'           '23'           '24'           '25'           '26'           '27'           '28'           '29'           '30'           '31'           '32'           '33'          '34'          '35'       '36'       '37'       '38'       '39'       '40'          '41'       '42'       '43'       '44'       '45'       '46'       '47'       '48'         '49'         '50'          '51'    '52'       '53'       '54'       '55'       '56'       '57'       '58'       '59'       '60'    '61'       '62'       '63'    '64'       '65'       '66'       '67'       '68'       '69'       '70'       '71'       '72'       '73'       '74'       '75'       '76'       '77'       '78'       '79'       '80'       '81'       '82'       '83'       '84'       '85'       '86'       '87'       '88'       '89'       '90'       '91'       '92'       '93'       '94'       '95'       '96'       '97'       '98'       '99'        '100'       '101'         '102'         '103'      '104'      '105'      '106'      '107'      '108'      '109'       '110'       '111'       '112'       '113'       '114'       '115'       '116'       '117'       '118'       '119'       '120'       '121'       '122'       '123'       '124'       '125'       '126'       '127'       '128'       '129'       '130'       '131'       '132'       '133'       '134'       '135'       '136'       '137'       '138'      )
        #set gROWtype            = ('layer'       'layer'       'layer'    'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'        'layer'       'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'      'layer'      'layer'       'empty' 'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'empty' 'layer'    'layer'    'empty' 'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'     'layer'     'layer'       'layer'       'layer'    'layer'    'layer'    'layer'    'layer'    'layer'    'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'     'layer'    )
        #set gROWname            = ('m01'         's01'         'l01'      'l02'          'l03'          'l04'          'l05'          'l06'          'l07'          'l08'          'l09'          'l10'          'l11'          'l12'          'l13'          'l14'          'l15'          'l16'          'l17'          'l18'          'l19'          'l20'          'l21'          'l22'          'l23'          'l24'          'l25'          'l26'          'l27'          'l28'          'l29'          'l30'          's30'         'm30'         'rbm'      'c01'      'd01'      'd01-x'    'd01-np'   'd01-milling' 'd0125b'   'd0125d'   'd0130c'   'd0229m'   'd0328m'   'd0427m'   'd06g'   'd0526g-ppg' 'd0526g-ccl' 'd0526g-film' ''      'c0102c'   'c0203c'   'c0304c'   'c0405c'   'c3029c'   'c2928c'   'c2827c'   'c2726c'   ''      'c0102p'   'c3029p'   ''      'cu0102'   'cu0203'   'cu0304'   'cu0405'   'cu3029'   'cu2928'   'cu2827'   'cu2726'   'ana'      'ana01'    'ana02'    'tent01'   'tent30'   'p01'      'p30'      'cp01-5'   'cp02-4'   'cp03-3'   'cp04-2'   'cp05-1'   'cp26-1'   'cp27-2'   'cp28-3'   'cp29-4'   'cp30-5'   'l01-1'    'l30-1'    'l01-2'    'l30-2'    'etch01'   'etch30'   's-etch01' 's-etch30' 's-mask01' 's-mask30' 'sr-mask01' 'sr-mask30' 'sr-mask01-2' 'sr-mask30-2' 's-tent01' 's-tent30' 'e-mask01' 'e-mask30' 'p-mask01' 'p-mask30' 'touch_l01' 'touch_l30' 'touch_l05' 'touch_l07' 'touch_l09' 'touch_l11' 'touch_l13' 'touch_l15' 'touch_l17' 'touch_l19' 'touch_l21' 'touch_l23' 'touch_l25' 'touch_l04' 'touch_l03' 'touch_l02' 'touch_l06' 'touch_l08' 'touch_l10' 'touch_l12' 'touch_l14' 'touch_l16' 'touch_l18' 'touch_l20' 'touch_l22' 'touch_l24' 'touch_l26' 'touch_l27' 'touch_l28' 'touch_l29')
        #set gROWcontext         = ('board'       'board'       'board'    'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'        'board'       'board'       'board'    'board'    'board'    'board'    'board'    'board'       'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'      'board'      'board'       ''      'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    ''      'board'    'board'    ''      'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'    'board'     'board'     'board'       'board'       'board'    'board'    'board'    'board'    'board'    'board'    'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'      'misc'     )
        #set gROWlayer_type      = ('silk_screen' 'solder_mask' 'signal'   'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'solder_mask' 'silk_screen' 'document' 'document' 'drill'    'drill'    'drill'    'drill'       'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'      'drill'      'drill'       ''      'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    ''      'drill'    'drill'    ''      'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document'  'document'  'document'    'document'    'document' 'document' 'document' 'document' 'document' 'document' 'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'   )
        #set gROWlayer_base_type = ('silk_screen' 'solder_mask' 'signal'   'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'power_ground' 'solder_mask' 'silk_screen' 'document' 'document' 'drill'    'drill'    'drill'    'drill'       'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'      'drill'      'drill'       ''      'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    'drill'    ''      'drill'    'drill'    ''      'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document' 'document'  'document'  'document'    'document'    'document' 'document' 'document' 'document' 'document' 'document' 'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'    'signal'   )
        #set gROWpolarity        = ('positive'    'positive'    'positive' 'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'     'positive'    'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'   'positive'   'positive'    ''      'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' ''      'positive' 'positive' ''      'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'  'positive'  'positive'    'positive'    'positive' 'positive' 'positive' 'positive' 'positive' 'positive' 'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive'  'positive' )
        #set gROWside            = ('top'         'top'         'top'      'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'inner'        'bottom'       'bottom'      'bottom'      'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )
        #set gROWdrl_startl01'      'l01'      'l01'      'l01'         'l01'      'l01'      'l01'      'l02'      'l03'      'l04'      'l05'      'l01'        'l01'        'l01'         ''      'l01'      'l02'      'l03'      'l04'      'l29'      'l28'      'l27'      'l26'      ''      'l01'      'l
        #set gROWdrl_endl30'      'l30'      'l30'      'l30'         'l25'      'l25'      'l30'      'l29'      'l28'      'l27'      'l26'      'l30'        'l30'        'l30'         ''      'l02'      'l03'      'l04'      'l05'      'l30'      'l29'      'l28'      'l27'      ''      'l02'      'l
        #set gROWfoil_side       = ('none'        'none'        'top'      'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'bottom'       'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )
        #set gROWsheet_side      = ('none'        'none'        'top'      'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'top'          'bottom'       'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'       'none'       'none'        ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     ''      'none'     'none'     ''      'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'        'none'        'none'     'none'     'none'     'none'     'none'     'none'     'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'      'none'     )

        set layer_list ""
        foreach layer $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type context $gROWcontext {
                if {$context != "board"} {continue}

                # SKIP Layer �� ���Ͽ� lpd ���� ���� Skip ��/�� Ȯ��
                if {$mod} {
                        set scale_change_skip 0
                        foreach chk_layer $::wAUTO_STEP_SCALE_CHANGE_SKIP_LAYER {
                                if {$chk_layer == ""} {continue}
                                if {$layer == $chk_layer} {
                                        set scale_change_skip 1
                                }
                        }
                        # Skip Layer �� ��� �Ѿ
                        if {$scale_change_skip == 1} {
                                continue
                        }
                }

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm
                #set gLPDpolarity      = 'negative'        - 1
                #set gLPDxstretch      = '100.0300'        - 2
                #set gLPDystretch      = '100.0400'        - 3
                #set gLPDxshift        = '0'               - 4
                #set gLPDyshift        = '0'               - 5
                #set gLPDxmirror       = '267'             - 6
                #set gLPDymirror       = '0'               - 7
                #set gLPDxcenter_inch  = '267'             - 8
                #set gLPDycenter_inch  = '305              - 9
                #set gLPDsmoothing     = 'smooth'          - 10
                #set gLPDswap_axes     = 'no_swap'         - 11
                #set gLPDdef_ext_lpd   = 'no'              - 12
                #set gLPDdevice_type   = 'either_type'     - 13
                #set gLPDres_value    = '0.250000'        - 14
                #set gLPDres_units    = 'mil'             - 15

                set text "$layer $gLPDpolarity $gLPDxstretch $gLPDystretch $gLPDxshift $gLPDyshift $gLPDxmirror $gLPDymirror $gLPDxcenter_inch $gLPDycenter_inch $gLPDsmoothing $gLPDswap_axes $gLPDdef_ext_lpd $gLPDdevice_type $gLPDres_value $gLPDres_units"

                #lappend layer_list $text

                set polarity [lindex $text 1]
                set scale_x [lindex $text 2]
                set scale_y [lindex $text 3]
                set xshift [lindex $text 4]
                set yshift [lindex $text 5]
                set xmirror [lindex $text 6]
                set ymirror [lindex $text 7]
                set center_x [lindex $text 8]
                set center_y [lindex $text 9]
                set smoothing [lindex $text 10]
                set swap_axes [lindex $text 11]
                set def_ext_lpd [lindex $text 12]
                #set device_type [lindex $text 13]
                set device_type "EITHER TYPE"
                set resolution_value [lindex $text 14]
                set resolution_units [lindex $text 15]

                # Auto Step Center Value re-define
                if {$xmirror != 0} {
                        set xmirror $auto_center_x
                }
                if {$ymirror != 0} {
                        set ymirror $auto_center_y
                }
                if {$center_x != 0} {
                        set center_x $auto_center_x
                }
                if {$center_y != 0} {
                        set center_y $auto_center_y
                }
                COM "image_set_elpd2,job=$::wJOB,step=$step,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=$def_ext_lpd,resolution_value=$resolution_value,resolution_units=$resolution_units"

                # DDPI LP-9 Scale Setting Addition
                set device_type LP-9
                COM "image_set_elpd2,job=$::wJOB,step=$step,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=$def_ext_lpd,resolution_value=$resolution_value,resolution_units=$resolution_units"
        }

        CLEAR_RESET

        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP END !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP END !!! ########################"
        puts "####### pIMAGE_PRODUCTION_PARAMS_SETTING_AUTO_STEP END !!! ########################"

}


################################################################################
## Procedure    : pDRILL_SHIFT_CHECK
## ����         : Drill Info�� ���ǵ� ��ü Drill Layer�� ���Ͽ� Drill shift �� Check : ���� to - 269mm over Ȯ��
## Input        :
## Return       :

proc pDRILL_SHIFT_CHECK { shift_value } {


        puts "####### pDRILL_SHIFT_CHECK START !!! ########################"
        puts "####### pDRILL_SHIFT_CHECK START !!! ########################"
        puts "####### pDRILL_SHIFT_CHECK START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Panel ����
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # Drill Info�� ���ǵ� ��ü Drill Layer�� ���Ͽ� �ڵ����� Drill shift �� Check : ���� to - 269mm over Ȯ��
        foreach line $drill_info {
                #d01 01 08 3 ccl none 100.000 100.000 top m 150 no
                #d0108c 01 08 3 ccl none 100.000 100.000 top cap 160 no��
                #d0104s 01 04 2 ccl none 100.000 100.000 top m 170 no
                #d0508s 05 08 2 ccl none 100.000 100.000 top m 180 no

                if {$line == "" } {continue}

                # Laser Drill SKIP
                if {[regexp {^c|^y} [lindex $line 0]]} {
                        continue
                }

                # drill layer define
                set layer [lindex $line 0]

                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES,units=mm

                regsub -all {,} $::data " " ::data
                regsub -all {;} $::data " " ::data

        	foreach line2 $::data {
        		### Layer - d0108c features data ###
        		#P 290 7.5 r500 P 0 0 N;.string=stacking_1
        		#P 7.5 121 r500 P 0 0 N;.string=d0108c,.drill=plated,.drill_first_last=last
        		if {[lindex $line2 0] == "#P"} {
        			# Symblo ����
        			if {[regexp {.string=stacking} $line2]} {
        			        set org_x_value [lindex $line2 1]
        			        break
        			}
        		}
        	}
        	foreach line3 $::data {
        		if {[lindex $line3 0] == "#P"} {

        			# Hole X ��ǥ
        			set check [lindex $line3 1]

        			# �������� X ��ǥ�� ������� : ���� ���� ������ �ִ� Hole
        			if {$check < $org_x_value} {
        			        # Work Size X �� 610 �̸��� 269mm Check
        			        if {$work_x < 610} {
                        			if {[expr $org_x_value - $check] > $shift_value} {
                                                        PAUSE "ALARM : $layer Drill Shift Check : ORG to Left Hole distance over $shift_value mm !!!!"
                        			        break
                        			}
                        		# Work Size X �� 610 ���� �̻��� 280mm Check
                        		} else {
                        		        if {[expr $org_x_value - $check] > 280} {
                                                        PAUSE "ALARM : $layer Drill Shift Check : ORG to Left Hole distance over 280 mm !!!!"
                        			        break
                        			}
                        		}
                		}
        		}
        	}
        }

        if { $::wETC_DATA_CREATE == 1 } {
                PAUSE "########## Drill Shfit Check Success! ##########"
        }

        puts "####### pDRILL_SHIFT_CHECK END !!! ########################"
        puts "####### pDRILL_SHIFT_CHECK END !!! ########################"
        puts "####### pDRILL_SHIFT_CHECK END !!! ########################"

}



################################################################################
## Procedure    : pDOUBLE_STEP_ARRAY_CHECK
## ����         : ���� �迭 STEP CHECK
## Input        :
## Return       :

proc pDOUBLE_STEP_ARRAY_CHECK { } {

        puts "####### pDOUBLE_STEP_ARRAY_CHECK START !!! ########################"
        puts "####### pDOUBLE_STEP_ARRAY_CHECK START !!! ########################"
        puts "####### pDOUBLE_STEP_ARRAY_CHECK START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        CLEAR_RESET

        set flag 0

        # �ӽ� Layer ���� Ȯ��
        STEP_ON $::wJOB $::wPANEL no
        set layer step_chk

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$layer
                COM create_layer,layer=$layer,context=misc,type=signal,polarity=positive,ins_layer=
        } else {
                COM create_layer,layer=$layer,context=misc,type=signal,polarity=positive,ins_layer=
        }

        # �迭�� Step�� Fill Profile �Ͽ� Panel Step ���� �̵�
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm
        set gSRstep [lsort -unique $gSRstep]

        foreach step $gSRstep {

                STEP_ON $::wJOB $step yes

                WORK $layer

                COM sr_fill,polarity=positive,step_margin_x=0,step_margin_y=0,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=0,sr_margin_y=0,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no

                # -100um ��� (�ϴ��� Coupon �迭 ����)
                set size -100
                COM sel_resize,size=$size,corner_ctl=no

                COM filter_reset,filter_name=popup
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                COM get_select_count
                if {$::COMANS} {
                        COM sel_move_repeat,dest_step=$::wPANEL,x_repeats=0,y_repeats=0,delete_orig=yes
                }

        }

        # PANEL STEP �� �ִ� �� Symbol �� ���Ͽ� List Ȯ��
        STEP_ON $::wJOB $::wPANEL no
        WORK $layer
        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES,units=mm
        foreach line $::data {

                if {[lindex $line 0] != "#OB"} {continue}
                set pos_x [lindex $line 1]
                set pos_y [lindex $line 2]
                COM sel_single_feat,operation=select,x=$pos_x,y=$pos_y,tol=25.4,cyclic=no

                # Touch �� symbol �� �ִ��� Ȯ��
                COM sel_ref_feat,layers=,use=select,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

                COM get_select_count
                if {$::COMANS} {
                        PAUSE "ALARM : Need to check the touch step!!!"
                        set flag 1

                        # ���� �ʱ�ȭ
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no
                }
        }

        # �ӽ� ���̾� ����
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$layer
        }

        if { $flag == 1} {
                exit 1
        }

        puts "####### pDOUBLE_STEP_ARRAY_CHECK END !!! ########################"
        puts "####### pDOUBLE_STEP_ARRAY_CHECK END !!! ########################"
        puts "####### pDOUBLE_STEP_ARRAY_CHECK END !!! ########################"

}


################################################################################
## Procedure    : pAUTO_DRILL_GUIDE_INSERT
## ����         : DDPI Auto Drill Guide Check & Insert
## Input        : ���Ե� ���� �� ������ ����
## Return       :

proc pAUTO_DRILL_GUIDE_INSERT { } {

        puts "####### pAUTO_DRILL_GUIDE_INSERT START !!! ########################"
        puts "####### pAUTO_DRILL_GUIDE_INSERT START !!! ########################"
        puts "####### pAUTO_DRILL_GUIDE_INSERT START !!! ########################"

                # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$trim_info_file_name not found!!!"
                return
        }

        # 2L Skip
        if {$::wNO_OF_LAYER == 2} {
                return
        }
        if {[regexp {534X610} $::wWORK_SIZE]} {
                 foreach line $trim_info {
                        if {$line == ""} {continue}
                        if {[lindex $line 0] == 2 && [regexp {pin} [lindex $line 5]]} {
                                PAUSE "\[$::wWORK_SIZE\] 2nd PIN Process is not support DDPI Auto Drill Guide !!"
                                        return
                        }
                }
        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        STEP_ON $::wJOB $::wPANEL no


        # Temp Layer Check
        set temp_layer ddpi_auto_drl_temp+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$temp_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$temp_layer
        }

        # layer Affect and Auto Drill Guide Check
        CLEAR_RESET
        #COM affected_filter,filter=(context=board&side=inner)
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_auto_drill_guide
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
#                PAUSE "CHECK : DDPI Auto Drill Guide already inserted. Script Stop!!!"
#                CLEAR_RESET
#                return
        }

        # Auto Drill Guide touch check
        CLEAR_RESET
        COM affected_filter,filter=(context=board&side=inner)
        COM filter_reset,filter_name=popup

        # ���� ��ü Select
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

        # Dummy Unselete
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

        # To temp layer copy : temp+++
        if {$::COMANS} {
                COM sel_copy_other,dest=layer_name,target_layer=$temp_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
        } else {
                PAUSE "CHECK : Does not exist Inner layer data. Script Stop!!!"
                return
        }

        CLEAR_RESET

        # Work Size Check
        #DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # Auto Drill Guide Layer Create
        set guide_layer auto_drill_guide_chk+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$guide_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$guide_layer
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        } else {
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        }

        # Auto Drill Guide size symbol (s4000 -> s3999] compare with temp layer
        set symbol s3999
        WORK $guide_layer
        COM add_pad,attributes=no,x=45,y=[expr $work_y - 7],symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=[expr $work_x - 45],y=[expr $work_y - 7],symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=[expr $work_x - 45],y=7,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=45,y=7,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Reference selection
        COM filter_reset,filter_name=popup
        COM sel_ref_feat,layers=$temp_layer,use=filter,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

        if {$::COMANS} {
                COM display_layer,name=$temp_layer,display=yes,number=2
                PAUSE "ALARM : Auto Drill Guide touched by other symbols. Need to check Guide position !!"
        }

        CLEAR_RESET

        # Auto Drill Guide Insert with Scale : X = 45mm, Y = 7mm
        set dis_x 45
        set dis_y 7
        set dx [expr $work_x * 1000 - ($dis_x * 1000) * 2]
        set dy [expr $work_y * 1000 - ($dis_y * 1000) * 2]

        foreach layer "$df_1_no $df_1_yes $cp_1_no $cp_1_yes" {

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm

                #set gLPDxstretch      = '100.0300'        - 2
                #set gLPDystretch      = '100.0400'        - 3

                set scale_x [lindex $gLPDxstretch 0]
                set scale_y [lindex $gLPDystretch 0]

                #PAUSE "$layer $scale_x $scale_y"

                set scale_x [expr 1.0 / ($scale_x * 0.01)]
                set scale_y [expr 1.0 / ($scale_y * 0.01)]

                set symbol "dd.pnl.mlb_ddpi_auto_drill_guide"

                #PAUSE "$layer $scale_x $scale_y $symbol"

                # Symbol Insert and Break
                WORK $layer
                COM cur_atr_set,attribute=.string,text=ddpi_auto_drill_guide
                #COM add_pad,attributes=yes,x=$dis_x,y=$dis_y,symbol=[subst $symbol],polarity=negative,angle=0,mirror=no,nx=2,ny=2,dx=$dx,dy=$dy,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$dis_x,y=$dis_y,symbol=$symbol,polarity=negative,angle=0,mirror=no,nx=2,ny=2,dx=$dx,dy=$dy,xscale=1,yscale=1
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_auto_drill_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_break
                }

                # Scale apply
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_auto_drill_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=[expr $work_x / 2.0],y_anchor=[expr $work_y / 2.0],angle=0,x_scale=$scale_x,y_scale=$scale_y,x_offset=0,y_offset=0

                }

        }

        # Temp Layer Delete.
        DEL_LAYER $temp_layer
        DEL_LAYER $guide_layer

        if {$::wAUTO_DRL_GUIDE == 1} {
                PAUSE "Auto Drill Guide Insert Success!!!"
        }

        puts "####### pAUTO_DRILL_GUIDE_INSERT END !!! ########################"
        puts "####### pAUTO_DRILL_GUIDE_INSERT END !!! ########################"
        puts "####### pAUTO_DRILL_GUIDE_INSERT END !!! ########################"

}



################################################################################
## Procedure    : pDDPI_SGA_GUIDE_INSERT
## ����         : DDPI RBM SGA Guide Check & Insert
## Input        :
## Return       :

proc pDDPI_SGA_GUIDE_INSERT { } {

        puts "####### pDDPI_SGA_GUIDE_INSERT START !!! ########################"
        puts "####### pDDPI_SGA_GUIDE_INSERT START !!! ########################"
        puts "####### pDDPI_SGA_GUIDE_INSERT START !!! ########################"

        # 2L, RBM, SITE Check
        if {$::wNO_OF_LAYER == 2 || $::wRBM_CHECK != 1} {
                return
        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        STEP_ON $::wJOB $::wPANEL no


        # Temp Layer Check
        set temp_layer sga_guide_temp+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$temp_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$temp_layer
        }

        # layer Affect and RBM Punching Guide Check
        CLEAR_RESET
        #COM affected_filter,filter=(context=board&side=inner)
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rbm_guide_align
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
#                PAUSE "CHECK : DDPI RBM Punching Guide already inserted. Script Stop!!!"
#                CLEAR_RESET
#                return
        }

        # RBM Punching Guide touch check
        CLEAR_RESET
        COM affected_filter,filter=(context=board&side=inner)
        COM filter_reset,filter_name=popup

        # ���� ��ü Select
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

        # Dummy Unselete
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=stacking*
        COM filter_atr_logic,filter_name=popup,logic=or

        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

        # To temp layer copy
        if {$::COMANS} {
                COM sel_copy_other,dest=layer_name,target_layer=$temp_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
        } else {
                PAUSE "CHECK : Does not exist Inner layer data. Script Stop!!!"
                return
        }

        CLEAR_RESET

        # Work Size Check
        #DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # Auto Drill Guide Layer Create
        set guide_layer sga_guide_chk+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$guide_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$guide_layer
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        } else {
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        }

        # RBM Punching Guide size symbol (s8000 -> s7999] compare with temp layer

        set x1 [expr $work_x / 2.0 - 5]
        set y1 [expr $work_y - 7.5]
        set x2 [expr $work_x - 7.5]
        set y2 [expr $work_y / 2.0 + 10]
        set x3 [expr $work_x / 2.0 - 5]
        set y3 7.5
        set x4 7.5
        set y4 [expr $work_y / 2.0 + 5]

        set symbol s7999
        WORK $guide_layer
        COM add_pad,attributes=no,x=$x1,y=$y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$x2,y=$y2,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$x3,y=$y3,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$x4,y=$y4,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Reference selection
        COM filter_reset,filter_name=popup
        COM sel_ref_feat,layers=$temp_layer,use=filter,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

        if {$::COMANS} {
                COM display_layer,name=$temp_layer,display=yes,number=2
                PAUSE "ALARM : SGA Guide touched by other symbols. Need to Verify by Manually!!!"
        }

        CLEAR_RESET

        # SGA Guide Insert with Scale
        foreach layer "$df_1_no $df_1_yes $cp_1_no $cp_1_yes" {

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm

                #set gLPDxstretch      = '100.0300'        - 2
                #set gLPDystretch      = '100.0400'        - 3

                set scale_x [lindex $gLPDxstretch 0]
                set scale_y [lindex $gLPDystretch 0]

                #PAUSE "$layer $scale_x $scale_y"

                set scale_x [expr 1.0 / ($scale_x * 0.01)]
                set scale_y [expr 1.0 / ($scale_y * 0.01)]

                set symbol "dd.pnl.mlb_ddpi_rbm_guide_align"

                #PAUSE "$layer $scale_x $scale_y $symbol"

                # Symbol Insert and Break
                WORK $layer
                COM cur_atr_set,attribute=.string,text=ddpi_rbm_guide_align
                COM add_pad,attributes=yes,x=$x1,y=$y1,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$x2,y=$y2,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$x3,y=$y3,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$x4,y=$y4,symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rbm_guide_align
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_break
                }

                # Scale apply
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rbm_guide_align
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=[expr $work_x / 2.0],y_anchor=[expr $work_y / 2.0],angle=0,x_scale=$scale_x,y_scale=$scale_y,x_offset=0,y_offset=0

                }

        }

        # Temp Layer Delete.
        DEL_LAYER $temp_layer
        DEL_LAYER $guide_layer

        if {$::wSGA_GUIDE == 1} {
                PAUSE "RBM SGA Guide Insert Success!!!"
        }

        puts "####### pDDPI_SGA_GUIDE_INSERT END !!! ########################"
        puts "####### pDDPI_SGA_GUIDE_INSERT END !!! ########################"
        puts "####### pDDPI_SGA_GUIDE_INSERT END !!! ########################"

}


################################################################################
## Procedure    : pDDPI_RIVET_GUIDE_INSERT
## ����         : DDPI RIVET Guide Check & Insert
## Input        :
## Return       :

proc pDDPI_RIVET_GUIDE_INSERT { } {

        puts "####### pDDPI_RIVET_GUIDE_INSERT START !!! ########################"
        puts "####### pDDPI_RIVET_GUIDE_INSERT START !!! ########################"
        puts "####### pDDPI_RIVET_GUIDE_INSERT START !!! ########################"

        # 2L Skip
        if {$::wNO_OF_LAYER == 2} {
                return
        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        STEP_ON $::wJOB $::wPANEL no


        # Temp Layer Check
        set temp_layer rivet_guide_temp+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$temp_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$temp_layer
        }

        # layer Affect and RIVET Guide Check
        CLEAR_RESET
        #COM affected_filter,filter=(context=board&side=inner)
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rivet_guide
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        # DDPI RIVET Punching Guide touch check
        CLEAR_RESET
        #COM affected_filter,filter=(context=board&side=inner)
        COM affected_filter,filter=(type=signal|power_ground|mixed|drill&context=board)
        COM filter_reset,filter_name=popup

        # ���� ��ü Select
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

        # Dummy Unselete
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
        #COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=stacking*
        COM filter_atr_logic,filter_name=popup,logic=or

        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

        # To temp layer copy
        if {$::COMANS} {
                COM sel_copy_other,dest=layer_name,target_layer=$temp_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
        } else {
                PAUSE "CHECK : Does not exist Inner layer data. Script Stop!!!"
                return
        }

        CLEAR_RESET

        # Work Size Check
        #DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # RIVET Guide Layer Create
        set guide_layer rivet_guide_chk+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$guide_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$guide_layer
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        } else {
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        }

        # DDPI RIVET Guide size symbol (R/T Size) compare with temp layer
        set symbol r13000

        COM clear_layers
        COM multi_layer_disp,mode=many,show_board=yes

        set count 1
        foreach line $layer_info {
                if {$line == ""} {continue}
                COM display_layer,name=[lindex $line 0],display=yes,number=$count
                if {$count >= 20} {
                        break
                }
                incr count
        }

        # RIVET Guide Position gain
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS, units=mm

        COM zoom_area,x1=[expr $gPROF_LIMITSxmin -5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmin +20],y2=[expr $gPROF_LIMITSymax -200]
        MOUSE "_Click RIVET position (Left Top)"
        set rivet_x(LT) [lindex $::MOUSEANS 0]
        set rivet_y(LT) [lindex $::MOUSEANS 1]

        COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmax -20],y2=[expr $gPROF_LIMITSymax -200]
        MOUSE "_Click RIVET position (Right Top)"
        set rivet_x(RT) [lindex $::MOUSEANS 0]
        set rivet_y(RT) [lindex $::MOUSEANS 1]

        COM zoom_area,x1=[expr $gPROF_LIMITSxmin -5],y1=[expr $gPROF_LIMITSymin -5],x2=[expr $gPROF_LIMITSxmin +20],y2=[expr $gPROF_LIMITSymin +200]
        MOUSE "_Click RIVET position (Left Bottom)"
        set rivet_x(LB) [lindex $::MOUSEANS 0]
        set rivet_y(LB) [lindex $::MOUSEANS 1]

        COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymin -5],x2=[expr $gPROF_LIMITSxmax -20],y2=[expr $gPROF_LIMITSymin +200]
        MOUSE "_Click RIVET position (Right Bottom)"
        set rivet_x(RB) [lindex $::MOUSEANS 0]
        set rivet_y(RB) [lindex $::MOUSEANS 1]

        COM multi_layer_disp,mode=default,show_board=no
        COM clear_layers
        COM zoom_home

        # Symbol add to Guide Layer
        WORK $guide_layer
        COM add_pad,attributes=no,x=$rivet_x(LT),y=$rivet_y(LT),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$rivet_x(RT),y=$rivet_y(RT),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$rivet_x(LB),y=$rivet_y(LB),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$rivet_x(RB),y=$rivet_y(RB),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1


        # Reference selection
        COM filter_reset,filter_name=popup
        COM sel_ref_feat,layers=$temp_layer,use=filter,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

        if {$::COMANS} {
                COM display_layer,name=$temp_layer,display=yes,number=2
                PAUSE "ALARM : DDPI RIVET Guide touched by other symbols. Need to Verify by Manually!!!"
        }

        CLEAR_RESET

        # RIVET Guide Insert to Inner layer with Scale
        foreach layer "$df_1_no $df_1_yes $cp_1_no $cp_1_yes" {

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm

                #set gLPDxstretch      = '100.0300'        - 2
                #set gLPDystretch      = '100.0400'        - 3

                set scale_x [lindex $gLPDxstretch 0]
                set scale_y [lindex $gLPDystretch 0]

                #PAUSE "$layer $scale_x $scale_y"

                set scale_x [expr 1.0 / ($scale_x * 0.01)]
                set scale_y [expr 1.0 / ($scale_y * 0.01)]

                set symbol "dd.pnl.mlb_ddpi_rivet_guide"

                #PAUSE "$layer $scale_x $scale_y $symbol"

                # Symbol Insert and Break
                WORK $layer
                COM cur_atr_set,attribute=.string,text=ddpi_rivet_guide
                COM add_pad,attributes=yes,x=$rivet_x(LT),y=$rivet_y(LT),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$rivet_x(RT),y=$rivet_y(RT),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$rivet_x(LB),y=$rivet_y(LB),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$rivet_x(RB),y=$rivet_y(RB),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rivet_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_break
                }

                # Scale apply
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rivet_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS} {
                        COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=[expr $work_x / 2.0],y_anchor=[expr $work_y / 2.0],angle=0,x_scale=$scale_x,y_scale=$scale_y,x_offset=0,y_offset=0

                }

        }

        # D/F Negative Cut data Create about RIVET Guide
        foreach layer "$in_all $out_all $out_all_1 $out_all_2 $cp_all $sr_all $sr_all_1 $sr_all_2 $screen_all" {

                # DF Nega Cut data create w/o DF Order 1
                if {[lsearch $df_1_no $layer] != -1 || [lsearch $df_1_yes $layer] != -1 || [lsearch $cp_1_no $layer] != -1 || [lsearch $cp_1_yes $layer] != -1} {
                        continue
                }

                # Layer Check
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {
                        continue
                }

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d LPD,units=mm

                #set gLPDxstretch      = '100.0300'        - 2
                #set gLPDystretch      = '100.0400'        - 3

                set scale_x [lindex $gLPDxstretch 0]
                set scale_y [lindex $gLPDystretch 0]

                #PAUSE "$layer $scale_x $scale_y"

                set scale_x [expr 1.0 / ($scale_x * 0.01)]
                set scale_y [expr 1.0 / ($scale_y * 0.01)]

                set symbol r13000

                # PSR & Jepan is positive setting
                if {[lsearch $sr_all $layer] != -1 || [lsearch $sr_all_1 $layer] != -1 || [lsearch $sr_all_2 $layer] != -1 || [lsearch $screen_all $layer] != -1} {
                        set polarity positive
                } else {
                        set polarity negative
                }

                #PAUSE "$layer $scale_x $scale_y $symbol $polarity"

                # Symbol Insert and Break
                WORK $layer
                COM cur_atr_set,attribute=.string,text=ddpi_rivet_guide
                COM add_pad,attributes=yes,x=$rivet_x(LT),y=$rivet_y(LT),symbol=$symbol,polarity=$polarity,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$rivet_x(RT),y=$rivet_y(RT),symbol=$symbol,polarity=$polarity,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$rivet_x(LB),y=$rivet_y(LB),symbol=$symbol,polarity=$polarity,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$rivet_x(RB),y=$rivet_y(RB),symbol=$symbol,polarity=$polarity,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rivet_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_break
                }

                # Scale apply
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_rivet_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS} {
                        COM sel_transform,mode=anchor,oper=scale,duplicate=no,x_anchor=[expr $work_x / 2.0],y_anchor=[expr $work_y / 2.0],angle=0,x_scale=$scale_x,y_scale=$scale_y,x_offset=0,y_offset=0

                }

        }

        # Temp Layer Delete.
        DEL_LAYER $temp_layer
        DEL_LAYER $guide_layer

        if {$::wRIVET_GUIDE == 1} {
                PAUSE "DDPI RIVET Guide Insert Success!!!"
        }

        puts "####### pDDPI_RIVET_GUIDE_INSERT END !!! ########################"
        puts "####### pDDPI_RIVET_GUIDE_INSERT END !!! ########################"
        puts "####### pDDPI_RIVET_GUIDE_INSERT END !!! ########################"

}



################################################################################
## Procedure    : pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT
## ����         : DDPI Manual Exposure Guide Check & Insert
## Input        :
## Return       :

proc pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT { } {

        puts "####### pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT START !!! ########################"
        puts "####### pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT START !!! ########################"
        puts "####### pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT START !!! ########################"

        # Probe Type Skip
        if {$::wPROBE == 1} {
                if {$::wETC_DATA_CREATE == 1} {
                        PAUSE "ALARM (pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT) : Guide Insert Skip except PROBE Type!!!"
                }
                return
        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSTRUCTURE_CONVERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        STEP_ON $::wJOB $::wPANEL no

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        # Temp Layer Check
        set temp_layer manual_guide_temp+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$temp_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$temp_layer
        }


        # layer Affect and Manual Guide Check
        CLEAR_RESET
        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_manual_expo_guide
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        # DDPI Manual Exposer Guide touch check - Outer Layer
        CLEAR_RESET
        COM affected_filter,filter=(context=board&side=top|bottom)
        COM filter_reset,filter_name=popup
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

        # Dummy & PSR SPRAY CLAMP Unselete
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=psr_spray_clamp
        COM filter_atr_logic,filter_name=popup,logic=or
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

        # To temp layer copy
        if {$::COMANS} {
                COM sel_copy_other,dest=layer_name,target_layer=$temp_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
        } else {
                COM create_layer,layer=$temp_layer,context=misc,type=signal,polarity=positive,ins_layer=
        }

        CLEAR_RESET

        # Work Size Check
        #DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS,units=mm
        set work_x [lindex [regsub {x|X} $::wWORK_SIZE " "] 0]
        set work_y [lindex [regsub {x|X} $::wWORK_SIZE " "] 1]

        # Manual Exposure Guide Layer Create
        set guide_layer manual_expo_guide_chk+++

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$guide_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$guide_layer
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        } else {
                COM create_layer,layer=$guide_layer,context=misc,type=signal,polarity=positive,ins_layer=
        }

        # DDPI Manual Exposure Guide size symbol (r5500) compare with temp layer
        set symbol r5500

        COM clear_layers
        COM multi_layer_disp,mode=many,show_board=yes

        set count 1
        foreach line $layer_info {
                if {$line == ""} {continue}
                COM display_layer,name=[lindex $line 0],display=yes,number=$count
                if {$count >= 20} {
                        break
                }
                incr count
        }

        # �߰� ������ ��� ���ɿ� ���� ��ġ Ȯ���Ͽ� ���� : 2L�� �ƴϰ� 30L���� ���� ���
        if { ($::wDDPI == 1 || $::wETC_DATA_CREATE == 1) && $::wNO_OF_LAYER != 2 && $::wNO_OF_LAYER <= 30 } {

                set symbol "dd.pnl.mlb_sr_hand_expo_out"
                set attr layer_align_coupon_add
                set layer l[format %02d [expr $::wSTART_LAYER_NO + 1]]

                WORK $layer

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {
                        tk_messageBox -message "ERROR (pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT) : $layer exist check !!!"
                        return
                }

                # SR Profile
                DO_INFO -t step -e $::wJOB/$::wPANEL -d SR,units=mm

                foreach step $gSRstep SRxmin $gSRxmin SRymin $gSRymin SRxmax $gSRxmax SRymax $gSRymax {
                        if {$step == "pcb"} {
                                set xmin $SRxmin
                                set ymin $SRymin
                                set xmax $SRxmax
                                set ymax $SRymax
                        }
                }

                # Attribute Setting
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                COM filter_set,filter_name=popup,update_popup=no,feat_types=pad
                COM filter_set,filter_name=popup,update_popup=no,polarity=negative

                # 1/4 Area position define [Upper Left]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=0,y=$work_size_y
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS == 1} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        set ::gDDPI_MANUAL_EXPO_DX(UL) [lindex $line 1]
                                        set ::gDDPI_MANUAL_EXPO_DY(UL) [lindex $line 2]
                                }

                        }
                } else {
                        tk_messageBox -message "ERROR (pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT) : $layer layer_align_coupon_add count check !!!"
                        return
                }
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                # 2/4 Area position define [Upper Right]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=$work_size_x,y=$work_size_y
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS == 1} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        set ::gDDPI_MANUAL_EXPO_DX(UR) [lindex $line 1]
                                        set ::gDDPI_MANUAL_EXPO_DY(UR) [lindex $line 2]
                                }

                        }
                } else {
                        tk_messageBox -message "ERROR (pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT) : $layer layer_align_coupon_add count check !!!"
                        return
                }
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                # 3/4 Area position define [Lower Right]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=$work_size_x,y=0
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS == 1} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        set ::gDDPI_MANUAL_EXPO_DX(LR) [lindex $line 1]
                                        set ::gDDPI_MANUAL_EXPO_DY(LR) [lindex $line 2]
                                }

                        }
                } else {
                        tk_messageBox -message "ERROR (pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT) : $layer layer_align_coupon_add count check !!!"
                        return
                }
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

                # 4/4 Area position define [Lower Left]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=0,y=0
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS == 1} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        set ::gDDPI_MANUAL_EXPO_DX(LL) [lindex $line 1]
                                        set ::gDDPI_MANUAL_EXPO_DY(LL) [lindex $line 2]
                                }

                        }
                } else {
                        tk_messageBox -message "ERROR (pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT) : $layer layer_align_coupon_add count check !!!"
                        return
                }
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

        }


        # Guide Position 2 define
        set ::gDDPI_MANUAL_EXPO_DX2(UL) [expr $::gDDPI_MANUAL_EXPO_DX(UL) + $::gDDPI_MANUAL_EXPO_ADD_X]
        set ::gDDPI_MANUAL_EXPO_DY2(UL) [expr $::gDDPI_MANUAL_EXPO_DY(UL) - $::gDDPI_MANUAL_EXPO_ADD_Y]

        set ::gDDPI_MANUAL_EXPO_DX2(UR) [expr $::gDDPI_MANUAL_EXPO_DX(UR) - $::gDDPI_MANUAL_EXPO_ADD_X]
        set ::gDDPI_MANUAL_EXPO_DY2(UR) [expr $::gDDPI_MANUAL_EXPO_DY(UR) - $::gDDPI_MANUAL_EXPO_ADD_Y]

        set ::gDDPI_MANUAL_EXPO_DX2(LR) [expr $::gDDPI_MANUAL_EXPO_DX(LR) - $::gDDPI_MANUAL_EXPO_ADD_X]
        set ::gDDPI_MANUAL_EXPO_DY2(LR) [expr $::gDDPI_MANUAL_EXPO_DY(LR) + $::gDDPI_MANUAL_EXPO_ADD_Y]

        set ::gDDPI_MANUAL_EXPO_DX2(LL) [expr $::gDDPI_MANUAL_EXPO_DX(LL) + $::gDDPI_MANUAL_EXPO_ADD_X]
        set ::gDDPI_MANUAL_EXPO_DY2(LL) [expr $::gDDPI_MANUAL_EXPO_DY(LL) + $::gDDPI_MANUAL_EXPO_ADD_Y]


        COM multi_layer_disp,mode=default,show_board=no
        COM clear_layers
        COM zoom_home

        # Symbol add to Guide Layer
        WORK $guide_layer

        # Guide 1 Insert
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX(UL),y=$::gDDPI_MANUAL_EXPO_DY(UL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX(UR),y=$::gDDPI_MANUAL_EXPO_DY(UR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX(LL),y=$::gDDPI_MANUAL_EXPO_DY(LL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX(LR),y=$::gDDPI_MANUAL_EXPO_DY(LR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

        # Guide 2 Insert
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX2(UL),y=$::gDDPI_MANUAL_EXPO_DY2(UL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX2(UR),y=$::gDDPI_MANUAL_EXPO_DY2(UR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX2(LL),y=$::gDDPI_MANUAL_EXPO_DY2(LL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
        COM add_pad,attributes=no,x=$::gDDPI_MANUAL_EXPO_DX2(LR),y=$::gDDPI_MANUAL_EXPO_DY2(LR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1


        # Reference selection
        COM filter_reset,filter_name=popup
        COM sel_ref_feat,layers=$temp_layer,use=filter,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

        if {$::COMANS} {
                COM display_layer,name=$temp_layer,display=yes,number=2
                PAUSE "ALARM : DDPI MANUAL EXPOSURE Guide touched by other symbols. Need to Verify by Manually!!!"
        }

        CLEAR_RESET

        # Guide Insert to PSR, DF, Main Drill, Screen layer
        foreach layer "$sr_all $sr_all_1 $sr_all_2 $out_all $out_all_1 $out_all_2 d01 d001 $screen_all" {

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}

                if {[regexp {^s[0-9]+} $layer]} {
                        set symbol "dd.pnl.mlb_ddpi_manual_expo_sr"
                } elseif {[regexp {^l[0-9]+} $layer]} {
                        set symbol "dd.pnl.mlb_ddpi_manual_expo_df"
                } elseif {[regexp {^d01$|^d001$} $layer]} {
                        set symbol "r3175.46"
                } elseif {[regexp {^p[0-9]+} $layer]} {
                        set symbol "r3500"
                }

                # Symbol Insert and Break
                WORK $layer
                COM cur_atr_set,attribute=.string,text=ddpi_manual_expo_guide

                # Guide 1 Insert
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX(UL),y=$::gDDPI_MANUAL_EXPO_DY(UL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX(UR),y=$::gDDPI_MANUAL_EXPO_DY(UR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX(LR),y=$::gDDPI_MANUAL_EXPO_DY(LR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX(LL),y=$::gDDPI_MANUAL_EXPO_DY(LL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                # Guide 2 Insert
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX2(UL),y=$::gDDPI_MANUAL_EXPO_DY2(UL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX2(UR),y=$::gDDPI_MANUAL_EXPO_DY2(UR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX2(LR),y=$::gDDPI_MANUAL_EXPO_DY2(LR),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                COM add_pad,attributes=yes,x=$::gDDPI_MANUAL_EXPO_DX2(LL),y=$::gDDPI_MANUAL_EXPO_DY2(LL),symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ddpi_manual_expo_guide
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        COM sel_break
                }
        }

        # PSR Jig Aling Hole ���� DF Guide ����
        foreach layer "$out_all $out_all_1 $out_all_2" {

                set symbol "dd.pnl.mlb_sr_hand_expo_out"
                set attr psr_jig_align

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}

                WORK $layer
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                #COM filter_set,filter_name=popup,update_popup=no,include_syms=r5500
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r5500\;r1200
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS == 4} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS} {
                                COM sel_delete
                        }

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        COM cur_atr_set,attribute=.string,text=$attr

                                        # Tenting
                                        if {$::wMSAP_CHECK == 0}  {
                                                COM add_pad,attributes=yes,x=[lindex $line 1],y=[lindex $line 2],symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                        # PATTERN
                                        } else {
                                                COM add_pad,attributes=yes,x=[lindex $line 1],y=[lindex $line 2],symbol=$symbol,polarity=negative,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                        }
                                }

                        }

                        # Symbol Break
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_break
                        }
                }
        }

        # T-Drill Target ���� DF Guide ����
        foreach layer "$out_all $out_all_1 $out_all_2" {

                set symbol "dd.pnl.mlb_sr_hand_expo_out"
                set attr target_4_*

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}

                WORK $layer
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r3550
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS == 4} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS} {
                                COM sel_delete
                        }

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        set attr [lindex [regsub {.string=} $line " "] end]
                                        #PAUSE $attr
                                        COM cur_atr_set,attribute=.string,text=$attr
                                        COM add_pad,attributes=yes,x=[lindex $line 1],y=[lindex $line 2],symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                }
                        }

                        # Symbol Break
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_break
                        }
                }
        }

        # Main Drill ���� Hole Size ���� : r1000.46 -> r2500.45
        foreach layer "d01 d001" {

                set symbol r2500.45
                set attr auto_expo_out_main

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}

                WORK $layer
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r1000.45\;r1000.46
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS == 4} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS} {
                                COM sel_delete
                        }

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        COM cur_atr_set,attribute=.string,text=$attr
                                        COM add_pad,attributes=yes,x=[lindex $line 1],y=[lindex $line 2],symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                }

                        }

                        # Symbol Break
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_break
                        }
                }
        }

        # Main Drill ���� DF Guide ���� (OLD -> NEW)
        foreach layer "$out_all $out_all_1 $out_all_2" {

                set symbol "dd.pnl.mlb_auto_expo_out_main_new"
                set attr auto_expo_out_main

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} {continue}

                WORK $layer
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                COM filter_set,filter_name=popup,update_popup=no,include_syms=r1900
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS == 4} {
                        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$layer -d FEATURES -o select ,units=mm
                        set info $::data

                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS} {
                                COM sel_delete
                        }

                        foreach line $info {
                                if {[lindex $line 0] == "#P"} {
                                        #PAUSE "$layer=$attr=$symbol"
                                        COM cur_atr_set,attribute=.string,text=$attr
                                        COM add_pad,attributes=yes,x=[lindex $line 1],y=[lindex $line 2],symbol=$symbol,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1
                                }
                        }

                        # Symbol Break
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_break
                        }
                }
        }



        # Temp Layer Delete.
        DEL_LAYER $temp_layer
        DEL_LAYER $guide_layer

        if {$::wDDPI_MANUAL_EXPO == 1} {
                PAUSE "DDPI Manual Exposure Guide Insert Success!!!"
        }

        puts "####### pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT END !!! ########################"
        puts "####### pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT END !!! ########################"
        puts "####### pDDPI_MANUAL_EXPOSURE_GUIDE_INSERT END !!! ########################"

}




################################################################################
## Procedure    : pDDPI_ODF_GUIDE_CHANGE
## ����         : DDPI ODF Guide Design Change
## Input        :
## Return       :

proc pDDPI_ODF_GUIDE_CHANGE { } {

        puts "####### pDDPI_ODF_GUIDE_CHANGE START !!! ########################"
        puts "####### pDDPI_ODF_GUIDE_CHANGE START !!! ########################"
        puts "####### pDDPI_ODF_GUIDE_CHANGE START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT


        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        STEP_ON $::wJOB $::wPANEL no

        CLEAR_RESET

        set attr_list "auto_expo_out_main auto_expo_out_cap"

        # ODF Guide Design Change
        foreach attr $attr_list {

                foreach layer "$out_all $out_all_1 $out_all_2" {

                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                        if {$gEXISTS == "no"} {continue}

                        WORK $layer

                        # ���� Size ���� (+3000um)
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r4000\;s4000
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS == 4} {
                                COM sel_resize,size=3000,corner_ctl=no
                        }

                        # �ܰ� Size ���� (+2800um)
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r4500\;s4500
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS == 4} {
                                COM sel_resize,size=2800,corner_ctl=no
                        }

                        # �ܰ� Size ���� (+3000um)
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r4300\;s4300
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count

                        if {$::COMANS == 4} {
                                COM sel_resize,size=3000,corner_ctl=no
                        }

                }
        }

        if {$::wODF_GUIDE_CHANGE == 1} {
                PAUSE "ODF Guide Design Change Success!!!"
        }

        puts "####### pDDPI_ODF_GUIDE_CHANGE END !!! ########################"
        puts "####### pDDPI_ODF_GUIDE_CHANGE END !!! ########################"
        puts "####### pDDPI_ODF_GUIDE_CHANGE END !!! ########################"

}




################################################################################
## Procedure    : pANA_SCALE
## ����         : Sub Drill Hole Plugging Scale Text ����& Image Production Params Setting
## Input        :
## Return       :

proc pANA_SCALE { } {

        puts "####### pANA_SCALE START !!! ########################"
        puts "####### pANA_SCALE START !!! ########################"
        puts "####### pANA_SCALE START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pANA_SCALE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pANA_SCALE) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        # Mech. Drill Order 1 �� ��� ANA Layer Scale Text �� Image Product Params �� ����
        foreach line $drill_info {
                if {$line == "" || ![regexp {^d} [lindex $line 0]] || [lindex $line 3] != 1} {continue}

                # Drill Layer Define
                set drl_layer [lindex $line 0]

                #PAUSE $drl_layer

                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$drl_layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                # ANA Layer Define
                set ana_layer ana[regsub -all {[a-z]} $drl_layer ""]

                #PAUSE $ana_layer

                set start_lay [lindex $line 1]
                set end_lay [lindex $line 2]
                if {$start_lay > $end_lay} {
                        set mirror no
                } else {
                        set mirror yes
                }

                # Scale Define
                set scale_x [lindex [lsearch -inline $drill_info *$drl_layer*] 6]
                set scale_y [lindex [lsearch -inline $drill_info *$drl_layer*] 7]

                set opposite_scale_x [expr 1.0/($scale_x*0.01)]
                set opposite_scale_y [expr 1.0/($scale_y*0.01)]

                puts "SUB Drill $ana_layer Scale : scale x=$scale_x, scale_y=$scale_y"

                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$ana_layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                AFFECT $ana_layer

                puts "CHECK : LAYER=$ana_layer SCALE_X=$scale_x  SCALE_Y=$scale_y"
                #PAUSE "CHECK : LAYER=$ana_layer SCALE_X=$scale_x  SCALE_Y=$scale_y"

                #Image Production Params Setting START #########################
                set swap_axes no_swap
                set xshift 0
                set yshift 0
                set xmirror 0
                set ymirror 0
                set polarity positive

                # Mirror Check
                if {$mirror == "no"} {
                        # Top Side

                        set device_type "EITHER TYPE"

                        # DDPI�� Mirror Center X -> Y �� ����
                        if {$::wSITE == 3} {
                                set ymirror $center_y
                                set resolution_value 0.125
                        } else {
                                set xmirror $center_x
                                set resolution_value 0.25
                        }
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$ana_layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                        # DDPI LP-9 Scale Setting Addition
                        set device_type LP-9
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$ana_layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

#                        if {$::wSITE == 3} {
#                                set device_type LP-9
#                                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"
#                        }
                } else {
                        # Bottom Side

                        set device_type "EITHER TYPE"

                        # DDPI�� Mirror Center X -> Y �� ����
                        if {$::wSITE == 3} {
                                set ymirror 0
                                set resolution_value 0.125
                        } else {
                                set xmirror 0
                                set resolution_value 0.25
                        }
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$ana_layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

                        # DDPI LP-9 Scale Setting Addition
                        set device_type LP-9
                        COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$ana_layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"

#                        if {$::wSITE == 3} {
#                                set device_type LP-9
#                                COM "image_set_elpd2,job=$::wJOB,step=$::wPANEL,layer=$layer,device_type=$device_type,polarity=$polarity,xstretch=$scale_x,ystretch=$scale_y,xshift=$xshift,yshift=$yshift,xmirror=$xmirror,ymirror=$ymirror,xcenter=$center_x,ycenter=$center_y,swap_axes=$swap_axes,define_ext_lpd=no,resolution_value=$resolution_value,resolution_units=mil"
#                        }
                }

                #Image Production Params Setting END ###########################


                # Scale TEXT ����
                # work_size_x_value work_size_y_value
                set cnt 1
                foreach att_text "work_size_x_value work_size_y_value" {
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$att_text
                        COM filter_area_end,layer=,filter_name=popup,operation=select
                        COM get_select_count
                        set sel_cnt $::COMANS
                        if {$sel_cnt} {
                                if {$sel_cnt == 1} {
                                        # Scale TEXT ����
                                        if {$att_text == "work_size_x_value"} {
                                                COM sel_change_txt,text=$scale_x
                                        }
                                        if {$att_text == "work_size_y_value"} {
                                                COM sel_change_txt,text=$scale_y
                                        }
                                } else {
                                        PAUSE "ERROR proc pANA_SCALE : $att_text Selected CNT Check! define cnt = $cnt .. sel cnt = $sel_cnt"
                                        exit
                                }
                        }
                }
        }
        CLEAR_RESET

        puts "####### pANA_SCALE END !!! ########################"
        puts "####### pANA_SCALE END !!! ########################"
        puts "####### pANA_SCALE END !!! ########################"
}




################################################################################
## Procedure    : pPROBE_OPTIMIZATION
## ����         : cnc_align_coupon_*, inkjet_marking_align, optec_coupon ��ġ �̵�
## Input        :
## Return       :

proc pPROBE_OPTIMIZATION { } {

        puts "####### pPROBE_OPTIMIZATION START !!! ########################"
        puts "####### pPROBE_OPTIMIZATION START !!! ########################"
        puts "####### pPROBE_OPTIMIZATION START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $::gLAYER_INFO_PATH

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pPROBE_OPTIMIZATION) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pPROBE_OPTIMIZATION) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        # SR Profile
        DO_INFO -t step -e $::wJOB/$::wPANEL -d SR,units=mm

        foreach step $gSRstep SRxmin $gSRxmin SRymin $gSRymin SRxmax $gSRxmax SRymax $gSRymax {
                # $step == "pcb"
                if {$step == $::wSR_STEP} {
#                        set xmin $SRxmin
#                        set ymin $SRymin
#                        set xmax $SRxmax
#                        set ymax $SRymax

                        set xmin [expr round ($SRxmin)]
                        set ymin [expr round ($SRymin)]
                        set xmax [expr round ($SRxmax)]
                        set ymax [expr round ($SRymax)]
                }
        }


        COM affected_layer,mode=board,affected=yes

        set attr_list "cnc_align_coupon_* inkjet_marking_align optec_coupon"

        foreach attr $attr_list {

                if {[regexp {optec_coupon} $attr]} {
                        set dist_x 0
                        # Optec Coupon �̵� ������ ���� (2020.03.02)
                        #set dist_y [expr $work_size_y - $::wTRIM_TO_ACTIVE_X - $ymax - 15]
                        set dist_y [expr round ($work_size_y - $::wTRIM_TO_ACTIVE_X - $ymax - 15)]
                } else {
                        set dist_x [expr $work_size_x - $::wTRIM_TO_ACTIVE_X - $xmax + $::wPROBE_OPT_SHIFT + 10]
                        set dist_y [expr $work_size_y - $::wTRIM_TO_ACTIVE_X - $ymax + $::wPROBE_OPT_SHIFT + 10]
                }
                if {$work_size_y > 660} {
                        if {![regexp {optec_coupon} $attr]} {
                                continue
                        }
                }

                # Attribute Setting
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=$attr

                # 1/4 Area Move [Upper Left]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=0,y=$work_size_y
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        if {[regexp {optec_coupon} $attr]} {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$dist_x,y_offset=-$dist_y
                        } else {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$dist_x,y_offset=-$dist_y
                        }
                }

                # 2/4 Area Move [Upper Right]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=$work_size_x,y=$work_size_y
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        if {[regexp {optec_coupon} $attr]} {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=-$dist_x,y_offset=-$dist_y
                        } else {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=-$dist_x,y_offset=-$dist_y
                        }
                }

                # 3/4 Area Move [Lower Right]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=$work_size_x,y=0
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        if {[regexp {optec_coupon} $attr]} {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=-$dist_x,y_offset=$dist_y
                        } else {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=-$dist_x,y_offset=$dist_y
                        }
                }

                # 4/4 Area Move [Lower Left]
                COM filter_area_strt
                COM filter_area_xy,x=$center_x,y=$center_y
                COM filter_area_xy,x=0,y=0
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
                COM get_select_count
                if {$::COMANS} {
                        if {[regexp {optec_coupon} $attr]} {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$dist_x,y_offset=$dist_y
                        } else {
                                COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$dist_x,y_offset=$dist_y
                        }
                }
        }

        CLEAR_RESET

        puts "####### pPROBE_OPTIMIZATION END !!! ########################"
        puts "####### pPROBE_OPTIMIZATION END !!! ########################"
        puts "####### pPROBE_OPTIMIZATION END !!! ########################"
}



################################################################################
## Procedure    : pPINLESS_GUIDE_MOVE
## ����         : PINLESS 2ȸ ������ ��� Guide ��ġ �̵� (W/S - 407X510, 407X534 only)
## Input        :
## Return       :

proc pPINLESS_2ND_GUIDE_MOVE { layer_info_path } {
        puts "########### pPINLESS_2ND_GUIDE_MOVE START ########################"
        puts "########### pPINLESS_2ND_GUIDE_MOVE START ########################"
        puts "########### pPINLESS_2ND_GUIDE_MOVE START ########################"


        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSUB_DRILL_COUPON_MOVE) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSUB_DRILL_COUPON_MOVE) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        # Upper Left -  X: 10mm, Y: 0mm �̵�
        set ul_x 10
        set ul_y 0
        # Upper Right - X: -10mm, Y: 0mm �̵�
        set ur_x -10
        set ur_y 0
        # Lower Right - X: -10mm, Y: 0mm �̵�
        set lr_x -10
        set lr_y 0
        # Lower Left - X: 10mm, Y: 0mm �̵�
        set ll_x 10
        set ll_y 0

        COM affected_layer,mode=board,affected=yes
        COM filter_reset,filter_name=popup
        COM filter_atr_logic,filter_name=popup,logic=or

        # W/S - 407X510, 407X534 �� ��츸 Guide �̵� ����
        if {[regexp {407X510|407X534} $::wWORK_SIZE]} {
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_*
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=inkjet_marking_align
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=sr_auto_expo_out_2
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ana_2step_coupon
        } elseif {[regexp {510X518} $::wWORK_SIZE]} {
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=cnc_align_coupon_*
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=inkjet_marking_align
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=ana_2step_coupon
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=xray_drill_hole
        } else {
                puts "pPINLESS_2ND_GUIDE_MOVE need not to apply for $::wWORK_SIZE!!!"
                return
        }


        # ������� �̵� X+4mm, Y-15mm �̵�
        COM filter_area_strt
        COM filter_area_xy,x=$center_x,y=$center_y
        COM filter_area_xy,x=0,y=$work_size_y
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
        COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$ul_x,y_offset=$ul_y

        # ������� �̵� X-4mm, Y-15mm �̵�
        COM filter_area_strt
        COM filter_area_xy,x=$center_x,y=$center_y
        COM filter_area_xy,x=$work_size_x,y=$work_size_y
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
        COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$ur_x,y_offset=$ur_y

        # �����ϴ� �̵� X-4mm, Y+15mm �̵�
        COM filter_area_strt
        COM filter_area_xy,x=$center_x,y=$center_y
        COM filter_area_xy,x=$work_size_x,y=0
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
        COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$lr_x,y_offset=$lr_y

        # �����ϴ� �̵� X+4mm, Y+15mm �̵�
        COM filter_area_strt
        COM filter_area_xy,x=$center_x,y=$center_y
        COM filter_area_xy,x=0,y=0
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=rectangle,inside_area=yes,intersect_area=no
        COM sel_transform,mode=anchor,oper=,duplicate=no,x_anchor=0,y_anchor=0,angle=0,x_scale=1,y_scale=1,x_offset=$ll_x,y_offset=$ll_y



        puts "########### pPINLESS_2ND_GUIDE_MOVE END ########################"
        puts "########### pPINLESS_2ND_GUIDE_MOVE END ########################"
        puts "########### pPINLESS_2ND_GUIDE_MOVE END ########################"
}



################################################################################
## Procedure    : pDRILL_INFO_CHECK
## ����         : Back / Depth Drill Remark miss check - Locking System (�ӿ��� ����)
## Input        :
## Return       : 0(correct) or  1(error)
proc pDRILL_INFO_CHECK {  } {

        puts "########### pDRILL_INFO_CHECK START ########################"
        puts "########### pDRILL_INFO_CHECK START ########################"
        puts "########### pDRILL_INFO_CHECK START ########################"


        #read
        set drill_data [DRILL_SPEC_INFO_TABLELIST get 0 end]

        puts ==$drill_data==

        #back depth check
        if { [regexp {^d[0-9]+b$} $::wDRILL_LAYER] || [regexp {^d[0-9]+d$} $::wDRILL_LAYER] } {
                puts "OK"
        } else {
                return 0
        }

        #init Drill with coupon and without coupon
        set diff_c_data ""
        set diff_none_data ""

        #get DRILL_SPEC_INFO_TABLELIST's coupon row and normal row ( ex 24/22c 24/22)
        foreach line $drill_data {
                set description [lindex $line 11]
                #ex) 24/22c -> 24/22
                if { [regexp {^[0-9]+/[0-9]+c$} $description] || [regexp {^[0-9]+/[0-9]+c$} $description]   } {
                        set replace_des [regsub -all {c} [lindex $line 11]  ""]
                        set line [lreplace $line 11 11 $replace_des]
                        lappend diff_c_data $line
                #ex) 24/22 -> 24/22
                } elseif {[regexp {^[0-9]+/[0-9]+$} $description] || [regexp {^[0-9]+/[0-9]+$} $description] } {
                         lappend diff_none_data $line
                }
        }

        #length match check
        if { [ llength $diff_c_data ] != [ llength $diff_none_data ] } {
                PAUSE " descriptions are not matched : coupon_count [ llength $diff_c_data ] != nonecoupon_count [ llength $diff_none_data ] "
                return 1
        }

        foreach with_c $diff_c_data without_c $diff_none_data {
                set description_wc [lindex $with_c 11]
                set description_nc [lindex $without_c 11]
                #Check lists
                #1 : Finished Drill
                #2 : Length
                #3 : +TOL
                #4 : -TOL
                #5 : TYPE
                #7 : DHS
                set column_list "Finished_Drill Length +TOL -TOL TYPE"
                set check_index "1 2 3 4 5"
                foreach index $check_index {
                        puts  "CHECK difference  $description_wc $description_nc [ lindex $with_c $index ] <-> [ lindex $without_c $index ] "
                        if {  $description_wc != $description_nc } {
                                PAUSE "CHECK Description is different -> Order-[ lindex $with_c 10 ]: $description_wc !=  Order-[ lindex $without_c 10 ]: $description_nc "
                                return 1
                        }
                        if { [ lindex $with_c $index ] != [ lindex $without_c $index ]  } {
                                PAUSE "CHECK [ lindex $column_list [ expr $index -1 ] ]   Order-[ lindex $with_c 10 ]: [ lindex $with_c $index ] != Order-[ lindex $without_c 10 ]: [ lindex $without_c $index ] "
                                return 1
                        }
                        #TRUNC
                        #set with_c_dhs [ expr round([expr 1000 * [ lindex $with_c 7 ]]) / 1000.0 ]
                        #set without_c_dhs [ expr round([expr 1000 * [ lindex $without_c 7]]) / 1000.0 ]

                        set with_c_dhs [expr ( floor ( 1000 * [ lindex $with_c 7 ])) / 1000.0]
                        set without_c_dhs [expr ( floor ( 1000 * [ lindex $without_c 7])) / 1000.0]

                        if { $with_c_dhs != $without_c_dhs } {
                                PAUSE "CHECK difference Order-[ lindex $with_c 10 ]: $with_c_dhs != Order-[ lindex $without_c 10 ]: $without_c_dhs"
                                return 1
                        }

                }

                if {$::wNO_OF_LAYER <= 99} {
                        set drill_real_start [scan [string range [regsub -all {[a-z]} $::wDRILL_LAYER ""] 0 1] %d]
                        set drill_real_last [scan [string range [regsub -all {[a-z]} $::wDRILL_LAYER ""] 2 3] %d]
                } else {
                        #set drill_real_start [string range [regsub -all {[a-z]} $::wDRILL_LAYER ""] 0 2]
                        #set drill_real_last [string range [regsub -all {[a-z]} $::wDRILL_LAYER ""] 3 5]
                        set drill_real_start [scan [string range [regsub -all {[a-z]} $::wDRILL_LAYER ""] 0 2] %d]
                        set drill_real_last [scan [string range [regsub -all {[a-z]} $::wDRILL_LAYER ""] 3 5] %d]
                }
                if {$::wNO_OF_LAYER <= 99} {
                        set drill_des_start [scan [lindex [regsub -all {\/} $description_nc " "] 0] %d]
                        set drill_des_last [scan [lindex [regsub -all {\/} $description_nc " "] 1] %d]
                } else {
                        set drill_des_start [scan [lindex [regsub -all {\/} $description_nc " "] 0] %d]
                        set drill_des_last [scan [lindex [regsub -all {\/} $description_nc " "] 1] %d]
                }


                #Check drill matching  ( ex 24/22c 24/22 O   24/26c 24/00 X )
                #start layer direction

                # $drill_real_start : Selected Drill Layer�� ������
                # $drill_real_last : Selected Drill Layer�� ������
                # $drill_des_start : Remark ���� ������
                # $drill_des_last : Remark ���� ������
                # �������� ���������� Ŭ��
                if { $drill_real_start > $drill_real_last } {
                        if { $drill_real_start != $drill_des_start } {
                                PAUSE " CHECK Drill description data ( suppose to be $drill_real_start/$drill_des_last ) ->  ${drill_des_start}/${drill_des_last} ( reference layer: $::wDRILL_LAYER ) "
                                return 1
                        } elseif { $drill_real_last > $drill_des_last } {
                                PAUSE " CHECK Drill description data ( ERROR : End Layer Miss : $drill_des_last ) ->  ${drill_des_start}/${drill_des_last} ( reference layer: $::wDRILL_LAYER ) "
                                return 1
                        } elseif { $drill_des_last > $drill_des_start } {
                                PAUSE " CHECK Drill description data ( ERROR : End Layer > Star Layer ) ->  ${drill_des_start}/${drill_des_last} ( reference layer: $::wDRILL_LAYER ) "
                                return 1
                        }
                # �������� ���������� ������
                } else {
                        if { $drill_real_start != $drill_des_start } {
                                PAUSE " CHECK Drill description data ( suppose to be $drill_des_start/$drill_real_last ) ->  ${drill_des_start}/${drill_des_last} ( reference layer: $::wDRILL_LAYER ) "
                                return 1
                        } elseif { $drill_real_last < $drill_des_last  } {
                                PAUSE " CHECK Drill description data ( $drill_real_last < $drill_des_last ) ->  ${drill_des_start}/${drill_des_last} ( reference layer: $::wDRILL_LAYER ) "
                                return 1
                        } elseif {$drill_des_last < $drill_des_start } {
                                PAUSE " CHECK Drill description data ( $drill_des_last < $drill_des_start ) ->  ${drill_des_start}/${drill_des_last} ( reference layer: $::wDRILL_LAYER ) "
                                return 1
                        }
                }
        }

        puts "########### pDRILL_INFO_CHECK END ########################"
        puts "########### pDRILL_INFO_CHECK END ########################"
        puts "########### pDRILL_INFO_CHECK END ########################"


}



################################################################################
## Procedure    : pDDPI_SCREEN_MODIFY
## ����         : M2 �̰� �� SPRAY -> SCREEN ���濡 ���� ���� �� ���� ����Ÿ ����
## Input        :
## Return       :

proc pDDPI_SCREEN_MODIFY { layer_info_path } {

        if {$::wPSR == "SCREEN" || $::wPSR == ""} {
                tk_messageBox -message "This is not SPRAY Type. Retrun !!!"
                return
        }

        puts "########### pDDPI_SCREEN_MODIFY START ########################"
        puts "########### pDDPI_SCREEN_MODIFY START ########################"
        puts "########### pDDPI_SCREEN_MODIFY START ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT


        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pDDPI_SCREEN_MODIFY) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pDDPI_SCREEN_MODIFY) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pDDPI_SCREEN_MODIFY) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {

        }

        if {$::wNO_OF_LAYER > 2} {
                foreach line $trim_info {
                        if {$line == ""} {continue}
                        set trim_99_x [lindex $line 1]
                        set trim_99_y [lindex $line 2]
                }
        } else {
                set trim_99_x 0
                set trim_99_y 0
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        # Panel Step On
        STEP_ON $::wJOB $::wPANEL no

        CLEAR_RESET

        set layer_list ""


        # ���� ���̾� ���� START #######################################################################################
        # �ӽ� ���̾� ����
        set temp_layer temp
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$temp_layer -d EXISTS,units=mm
        if {$gEXISTS == "yes"} {
                DEL_LAYER $temp_layer
        }

        # Step & Repeat Fill patter Default value setting
        # PNL �ܰ�����
        set step_margin_x 0
        set step_margin_y 0
        # Trim Edge ���� ���� 10mm Cut
        set step_max_dist_x 0
        set step_max_dist_y [expr $trim_99_x / 2.0 + 10]
        # ��ǰ ħ�� ���� 0.75mm �̰�
        set sr_margin_x 0.75
        set sr_margin_y 0.75

        foreach layer "$out_all $out_all_1 $out_all_2" {

                DO_INFO -t layer -e $::wJOB/$::wPANEL/$layer -d EXISTS,units=mm
                if {$gEXISTS == "no"} { continue }

                WORK $layer
                lappend layer_list $layer

                # ���� Dummy �� �����Ͽ� �ӽ� ���̾�� ī��
                COM filter_reset,filter_name=popup
                COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                COM get_select_count

                if {$::COMANS} {
                        COM sel_move_other,target_layer=$temp_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        WORK $temp_layer

                        # DDPI ���� Trim Edge to ���� 10mm cut ����
                        COM sr_fill,polarity=negative,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no

                        # Data Merge
                        COM filter_reset,filter_name=popup
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_contourize,accuracy=0,break_to_islands=yes,clean_hole_size=0,clean_hole_mode=x_and_y
                        }

                        # Layer Data Move to Temp Layer
                        WORK $layer
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_move_other,target_layer=$temp_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        }

                        # Temp Layer Data Move to Layer
                        WORK $temp_layer
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_move_other,target_layer=$layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
                        }

                        # �ӽ� ���̾� ����
                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$temp_layer -d EXISTS,units=mm
                        if {$gEXISTS == "yes"} {
                                DEL_LAYER $temp_layer
                        }

                }
        }
        # ODF ���̾� ���� END #########################################################################################

        # PSR ���̾� ���� START #######################################################################################
        # Step & Repeat Fill patter Default value setting
        # PNL �ܰ����� ���� : X
        set step_margin_x 0
        set step_margin_y 0
        # Trim Edge ���� ���� 10mm Open / �¿� Open X
        set step_max_dist_x 0
        set step_max_dist_y [expr $trim_99_x / 2.0 + 10]
        # ��ǰ ħ�� ���� 0.75mm �̰�
        set sr_margin_x 0.75
        set sr_margin_y 0.75

        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        foreach layer $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                if {$context == "board" && [regexp {^s[0-9]+$|^s[0-9]+\-1$|^s[0-9]+\-2$} $layer] && [regexp {solder_mask} $layer_type]} {
                        WORK $layer
                        lappend layer_list $layer

                        # MLB Spray Type ���� Pattern_fill data �� ��Ÿ �Ӽ� dummy ����
                        COM filter_reset,filter_name=popup
                        COM filter_atr_logic,filter_name=popup,logic=or
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.pattern_fill
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=1_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=2_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=3_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=4_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=5_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=6_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=7_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=8_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=9_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=10_trim
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_delete
                        }
                        # DDPI ���� Trim Edge to ���� 10mm cut ����
                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no

                        # ���� Dummy �� ���� ���̵� Overlap ���� ����
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.pattern_fill
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_reverse
                                COM sel_buffer_cut,x_datum=0,y_datum=0
                                COM sel_buffer_paste,x=0,y=0
                        }
                }
        }
        # PSR ���̾� ���� END #######################################################################################


        # ���� ���̾� ���� START #######################################################################################
        # Step & Repeat Fill patter Default value setting
        # PNL �ܰ����� 10mm ����
        set step_margin_x -10
        set step_margin_y -10
        # Trim Edge ���� ���� 10mm Open / �¿� 1mm Open
        set step_max_dist_x [expr $trim_99_x / 2.0 + 1]
        set step_max_dist_y [expr $trim_99_x / 2.0 + 10]
        # ��ǰ ħ�� ���� 0.75mm �̰�
        set sr_margin_x 0.75
        set sr_margin_y 0.75

        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        foreach layer $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                if {$context == "board" && [regexp {^p[0-9]+$|^p[0-9]+\-auto|^p[0-9]+_auto|^p[0-9]+\-manual|^p[0-9]+_manual} $layer]} {
                        WORK $layer
                        lappend layer_list $layer

                        # MLB Spray Type ���� Pattern_fill data �� ��Ÿ �Ӽ� dummy ����
                        COM filter_reset,filter_name=popup
                        COM filter_atr_logic,filter_name=popup,logic=or
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.pattern_fill
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=1_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=2_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=3_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=4_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=5_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=6_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=7_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=8_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=9_trim
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=10_trim
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_delete
                        }
                        # DDPI ���� Trim Edge to ���� 10mm cut ����
                        COM sr_fill,polarity=positive,step_margin_x=$step_margin_x,step_margin_y=$step_margin_y,step_max_dist_x=$step_max_dist_x,step_max_dist_y=$step_max_dist_y,sr_margin_x=$sr_margin_x,sr_margin_y=$sr_margin_y,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no

                        # ���� Dummy �� ���� ���̵� Overlap ���� ����
                        COM filter_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.pattern_fill
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
                        COM get_select_count
                        if {$::COMANS} {
                                COM sel_reverse
                                COM sel_buffer_cut,x_datum=0,y_datum=0
                                COM sel_buffer_paste,x=0,y=0
                        }
                }
        }
        # ���� ���̾� ���� END #######################################################################################


        if {[llength $layer_list] != 0} {
                PAUSE "pDDPI_SCREEN_MODIFY : $layer_list data modify complete !!!"
        } else {
                PAUSE "pDDPI_SCREEN_MODIFY : Layer Data No Change !!!"
        }

        puts "########### pDDPI_SCREEN_MODIFY END ########################"
        puts "########### pDDPI_SCREEN_MODIFY END ########################"
        puts "########### pDDPI_SCREEN_MODIFY END ########################"
}




################################################################################
## Procedure    : pBACK_DEPTH_COUPON_RT_CHECK
## ����         : d01 �������� Back / Depth Coupon �Ÿ��� üũ : ���� to +/- 258mm �̻� ALARM üũ
## ����         : STEP �̸� = pcb"n"-secback, pcb"n"-secdep
## Input        : $::wBACK_DEPTH_COUPON_RT_SHIFT VALUE
## Return       :

proc pBACK_DEPTH_COUPON_RT_CHECK { } {


        puts "####### pBACK_DEPTH_COUPON_RT_CHECK START !!! ########################"
        puts "####### pBACK_DEPTH_COUPON_RT_CHECK START !!! ########################"
        puts "####### pBACK_DEPTH_COUPON_RT_CHECK START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pBIT_CHECK_HOLE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Layer ����
        if {$::wNO_OF_LAYER >= 100} {
                set drl_layer d001
        } else {
                set drl_layer d01
        }

        # Layer Check
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$drl_layer -d EXISTS
        if {$gEXISTS == "no"} {
                PAUSE "ALARM : \[$drl_layer\] drill layer is not exist, Back/Depth Coupon R/T distant check SKIP!!!"
                return
        }

        # ���� ��ǥ Ȯ��
        DO_INFO1 -t layer -e $::wJOB/$::wPANEL/$drl_layer -d FEATURES,units=mm
        regsub -all {,} $::data " " ::data
        regsub -all {;} $::data " " ::data

	foreach line $::data {
		### Layer - d0108c features data ###
		#P 290 7.5 r500 P 0 0 N;.string=stacking_1
		#P 7.5 121 r500 P 0 0 N;.string=d0108c,.drill=plated,.drill_first_last=last
		if {[lindex $line 0] == "#P"} {
			# Symblo ����
			if {[regexp {.string=stacking} $line]} {
			        set org_x_value [lindex $line 1]
			        break
			}
		}
	}

	# Coupon SR Min/Max �Ÿ��� Check
	set flag 0
	DO_INFO -t step -e $::wJOB/$::wPANEL -d SR,\units=mm
	foreach step $gSRstep xmin $gSRxmin ymin $gSRymin xmax $gSRxmax ymax $gSRymax {
		if {[regexp {secback|secdep} $step]} {
		        set flag 1
		        puts "$step, xmin = $xmin, xmax = $xmax"

			# ���� - xmin ���� 258 �̻��� ���
			if {[expr $org_x_value - $xmin] >= 258} {
			        set value [expr $org_x_value - $xmin]
			        PAUSE "ALARM : \[$step\] ORG to Left R/T distance 258mm over = \[$value mm\] !!!"
			        exit 1
			}

			# xmax - ���� ���� 258 �̻��� ���
			if {[expr $xmax - $org_x_value] >= 258} {
			        set value [expr $xmax - $org_x_value]
                                PAUSE "ALARM : \[$step\] ORG to Right R/T distance 258mm over = \[$value mm\] !!!"
                                exit 1
			}
		}
	}

        if { $flag == 1 } {
                puts "########## Back/Depth Coupon Org to RT Shift Check Success! ##########"
        }

        puts "####### pBACK_DEPTH_COUPON_RT_CHECK END !!! ########################"
        puts "####### pBACK_DEPTH_COUPON_RT_CHECK END !!! ########################"
        puts "####### pBACK_DEPTH_COUPON_RT_CHECK END !!! ########################"

}


################################################################################
## Procedure    : pSUB_DRILL_LAYER_CHECK_HOLE_INSERT
## ����         : ȥ�� ����Ȧ ����
## Input        :
## Return       :

proc pSUB_DRILL_LAYER_CHECK_HOLE_INSERT { layer_info_path } {
        puts "########### pSUB_DRILL_LAYER_CHECK_HOLE_INSERT START ########################"
        puts "########### pSUB_DRILL_LAYER_CHECK_HOLE_INSERT START ########################"
        puts "########### pSUB_DRILL_LAYER_CHECK_HOLE_INSERT START ########################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Drill Info Load ######################################################
        set drl_info_file_name "dde_mlb_panel_drill.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drl_info_file_name]} {
                        set drl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drl_info_file_name]} {
                        set drl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists drl_file_path]} {
                set f [open $drl_file_path/$drl_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSUB_DRILL_LAYER_CHECK_HOLE_INSERT) : $drl_file_path/$drl_info_file_name not found!!!"
                return
        }

        # Layer Info Load ######################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pSUB_DRILL_LAYER_CHECK_HOLE_INSERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }

        set center_x [expr $work_size_x / 2.0]
        set center_y [expr $work_size_y / 2.0]

        ## ����� Drill Info
        #d01    01 08 3 ccl none 100.000 100.000 top m   200 no
        #d0108c 01 08 3 ccl none 100.000 100.000 top cap 200 no
        #d0104s 01 04 2 ccl none 100.000 100.000 top m   200 no
        #c0508s 05 08 2 ccl none 100.000 100.000 top m   200 no

        # Profile Limit Check
        DO_INFO -t step -e $::wJOB/$::wPANEL -d PROF_LIMITS, units=mm

        set flag 0
        set t_symbol1 {$$JOB}
        set t_symbol2 {$$LAYER}
        set t_symbol "$t_symbol1 - $t_symbol2"
        set mouse_check 0
        set pos_x 0
        set pos_y 0

        CLEAR_RESET

        # 2L ��� - Cap Drill ������ Cap Drill �� ����
        if {$::wNO_OF_LAYER == 2} {
                if {$cap_1_top != "" && $cap_1_btm == ""} {
                        set drl_layer $cap_1_top
                } elseif {$cap_1_top == "" && $cap_1_btm != ""} {
                        set drl_layer $cap_1_btm
                } elseif {$cap_1_top == "" && $cap_1_btm == ""} {
                        set drl_layer $m_1_top
                } else {
                        PAUSE "ALARM (pSUB_DRILL_LAYER_CHECK_HOLE_INSERT) : DRILL LAYER Check !!!"
                        return
                }

                # Mouse ��ǥ�� �Է�
                DO_INFO -t layer -e $::wJOB/$::wPANEL/$drl_layer -d EXISTS
                if {$gEXISTS == "yes"} {
                        WORK $drl_layer
                        COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmax -200],y2=[expr $gPROF_LIMITSymax -200]

                        # Mouse ��ǥ �Է� ���� �� �״�� ����
                        if {$mouse_check == 1} {

                        # Mouse ��ǥ ó�� �Է� ������
                        } else {
                                MOUSE "_Click TOOL_NO_LAYER TEXT DRILL insert position (Right Top)"
                                set pos_x [lindex $::MOUSEANS 0]
                                set pos_y [lindex $::MOUSEANS 1]
                                set mouse_check 1
                        }

                        COM add_text,attributes=no,type=canned_text,x=$pos_x,y=$pos_y,text=$t_symbol,x_size=3.0226,y_size=4.2164,w_factor=1.6416666508,polarity=positive,angle=0,mirror=no,fontname=canned_57,ver=1
                        set flag 1
                }

        # BVH Type - Sub Drill �� 2�� �̻��� ��� Counpon ��ġ ����
        } elseif {[regexp {BVH} $::wTYPE]} {
                foreach line $drill_info {
                        CLEAR_RESET
                        if {[lindex $line 0] == ""} {continue}
                        if {[regexp {^d[0-9]+s$} [lindex $line 0]]} {
                                set drl_layer [lindex $line 0]
                                WORK $drl_layer
                                COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmax -200],y2=[expr $gPROF_LIMITSymax -200]

                                # Mouse ��ǥ �Է� ���� �� �״�� ����
                                if {$mouse_check == 1} {

                                # Mouse ��ǥ ó�� �Է� ������
                                } else {
                                        MOUSE "_Click TOOL_NO_LAYER TEXT DRILL insert position (Right Top)"
                                        set pos_x [lindex $::MOUSEANS 0]
                                        set pos_y [lindex $::MOUSEANS 1]
                                        set mouse_check 1
                                }

                                COM add_text,attributes=no,type=canned_text,x=$pos_x,y=$pos_y,text=$t_symbol,x_size=3.0226,y_size=4.2164,w_factor=1.6416666508,polarity=positive,angle=0,mirror=no,fontname=canned_57,ver=1
                                set flag 1
                        }
                }
        # 1�� Drill �� CNC �� ���۵Ǵ� Type
        } elseif {[regexp {3N3|4N4|BUM_B|BUM_C|BUM_D} $::wTYPE]} {
                foreach line $drill_info {
                        CLEAR_RESET
                        if {[lindex $line 0] == ""} {continue}
                        if {([regexp {^d[0-9]+s$} [lindex $line 0]] || [regexp {^d[0-9]+m$} [lindex $line 0]]) && [lindex $line 3] == 1} {
                                set drl_layer [lindex $line 0]
                                WORK $drl_layer
                                COM zoom_area,x1=[expr $gPROF_LIMITSxmax +5],y1=[expr $gPROF_LIMITSymax +5],x2=[expr $gPROF_LIMITSxmax -200],y2=[expr $gPROF_LIMITSymax -200]

                                # Mouse ��ǥ �Է� ���� �� �״�� ����
                                if {$mouse_check == 1} {

                                # Mouse ��ǥ ó�� �Է� ������
                                } else {
                                        MOUSE "_Click TOOL_NO_LAYER TEXT DRILL insert position (Right Top)"
                                        set pos_x [lindex $::MOUSEANS 0]
                                        set pos_y [lindex $::MOUSEANS 1]
                                        set mouse_check 1
                                }

                                COM add_text,attributes=no,type=canned_text,x=$pos_x,y=$pos_y,text=$t_symbol,x_size=3.0226,y_size=4.2164,w_factor=1.6416666508,polarity=positive,angle=0,mirror=no,fontname=canned_57,ver=1
                                set flag 1
                        }
                }
        }

        # ...
        if {$flag == 1} {
                puts "SUB Drill Layer Check Hole Insert Complete!"
                puts "SUB Drill Layer Check Hole Insert Complete!"
                puts "SUB Drill Layer Check Hole Insert Complete!"
        }

        puts "########### pSUB_DRILL_LAYER_CHECK_HOLE_INSERT END ########################"
        puts "########### pSUB_DRILL_LAYER_CHECK_HOLE_INSERT END ########################"
        puts "########### pSUB_DRILL_LAYER_CHECK_HOLE_INSERT END ########################"
}

################################################################################
## Procedure    : pUNIT_COUNT_CHECK
## ����         : SAP �� CAM Data �� Unit Count ��ġ üũ (2020.04.01 - LYB)
## Input        : $::wUNIT_COUNT_CHK
## Return       :

proc pUNIT_COUNT_CHECK {} {

        puts "################ pUNIT_COUNT_CHECK START ########################"
        puts "################ pUNIT_COUNT_CHECK START ########################"
        puts "################ pUNIT_COUNT_CHECK START ########################"

        if {$::wUNIT_COUNT_CHK != 1} {
                return
        }

        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB] } {
                        puts "It is not Regular Tool!!"
                        return
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}p$} $::wJOB] } {
                        puts "It is not Regular Tool!!"
                        return
                }
                set ::iJOB [string range $::wJOB 0 10]
        # DDPI
        } elseif {$::wSITE == 3} {
                puts "DDPI need not check !!!"
                return
        }


        #array ��� step

        #set SRstep $::wSR_STEP
        DO_INFO -t step -e $::wJOB/$::wPANEL/ -d SR,units=mm
        set pnl_gSRstep $gSRstep
        set pnl_coupon_step ""
        set pnl_pcb_step ""
        set pnl_gSRstep [regsub -all {\"} $pnl_gSRstep "" ]
        foreach cur_sr_step $pnl_gSRstep {

                #check 'fix-xxx' step
                if { [regexp {^fix-[a-z]+} $cur_sr_step ] == 1} {
                        PAUSE "WARNING: fix step exists in set:$cur_sr_step "
                        exit 1
                }
                DO_INFO -t step -e $::wJOB/$cur_sr_step -d SR,units=mm
                foreach cur_step $gSRstep {

                        if { [regexp {^fix-[a-z]+} $cur_step ] == 1 } {
                                PAUSE "WARNING: fix step exists in step:$cur_sr_step "
                                exit 1
                        }
                }
                #coupon step check
                if { [regexp {^pcb[0-9]+\-} $cur_sr_step ] == 1 } {
                        lappend pnl_coupon_step $cur_sr_step
                #unit or pcb array step check
                } elseif { [regexp {^pcb} $cur_sr_step ] == 1 } {
                        lappend pnl_pcb_step $cur_sr_step
                }
        }
        #check sap_array_num vs panel_array_num
        DO_INFO -t step -e $::wJOB/$::wPANEL -d REPEAT,units=mm
        set total_array 0
        set pnl_repeat_step $gREPEATstep

        foreach cur_step $pnl_repeat_step {
                #check unit_array_step
                if { [ lsearch $pnl_pcb_step $cur_step] == -1 } { continue }

                #unit check
                DO_INFO -t step -e $::wJOB/$cur_step/ -d REPEAT,units=mm
                set cur_pcb_array [llength $gREPEATstep]

                ##if no pcb SR
                if { $cur_pcb_array == 0 } {
                        set cur_pcb_array 1
                }
                set total_array [ expr $total_array + $cur_pcb_array ]
                puts " total_array : $total_array "
        }

        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                pSAP_DATA_DOWN $::wJOB /genesis/share/sap_info_down TABLE_INFO 1100
        # IPGEN : mse00123-01p
        } elseif { $::wSITE == 2} {
                pSAP_DATA_DOWN $::iJOB /genesis/share/sap_info_down TABLE_INFO 1100
        # DDPI
        } else {
                return
        }

        set sPCPPANEL [regsub -all {\"} $sPCPPANEL ""]
        puts "sPCPPANEL: $sPCPPANEL"
        if { $sPCPPANEL != $total_array } {
                PAUSE "WARNING: SAP_unit_count ${sPCPPANEL}ea !=  CAM_data_unit_count ${total_array}ea need to check!!"
                exit 1
        }
        #check coupon step which is not arrayed on panel
        DO_INFO -t job -e $::wJOB -d STEPS_LIST, units=mm
        set rest_of_coupon $pnl_coupon_step
        set tool_coupon_step ""
        foreach cur_step $gSTEPS_LIST {
                if { [regexp {^pcb[0-9]+[\-]} $cur_step ] == 1 } {
                        if { [ lsearch $pnl_coupon_step $cur_step ] == -1 } {
                                PAUSE "ALARM: coupon_step($cur_step) is/are not arrayed on panel "
                                exit 1
                        }
                }
        }
        puts "################ pUNIT_COUNT_CHECK END ########################"
        puts "################ pUNIT_COUNT_CHECK END ########################"
        puts "################ pUNIT_COUNT_CHECK END ########################"
}



################################################################################
## Procedure    : pDRILL_SPEC_INFO_HOLE_SIZE_CHECK
## ����         : Drill Hole Size Check (FHS & DHS) - DRILL INFO SAVE
## Input        :
## Return       :

proc pDRILL_SPEC_INFO_HOLE_SIZE_CHECK { } {

        puts "############ pDRILL_SPEC_INFO_HOLE_SIZE_CHECK START !!! ############"
        puts "############ pDRILL_SPEC_INFO_HOLE_SIZE_CHECK START !!! ############"
        puts "############ pDRILL_SPEC_INFO_HOLE_SIZE_CHECK START !!! ############"


        # SPEC Info Arrange
        set ::wDRILL_SPEC_INFO_ARRANGE [DRILL_SPEC_INFO_TABLELIST get 0 end]
        #no 0.45047 0.45047 0.076 0.076 plated     2 0.45009 {} 18 1 CNC_COUPON {}
        #no 0.70000 0.70000 0.076 0.076 plated     2 0.70000 1 123 2 tent {}
        #no 0.70000 0.70000 0.076 0.076 plated     1 0.70000 2 73 13 {} {}
        #no 0.70000 0.70000 0.076 0.076 plated     2 0.70000 2 44 14 {} {}
        #no 0.80000 1.50000 0.076 0.076 plated     5 0.80000 2 8 15 {} {}
        #no 0.90000 0.90000 0.076 0.076 non_plated 1 0.90000 2 2 16 {} {}
        #no 1.00000 1.00000 0.076 0.076 plated     2 1.00000 2 13 17 {} {}
        #no 2.05000 2.05000 0.076 0.076 non_plated 1 2.05000 {} 4 32 {} {}
        #no 3.10000 3.10000 0.076 0.076 plated     2 3.10000 {} 1 35 {} {}
        #no 3.10100 3.70100 0.076 0.076 plated     5 3.10100 {} 1 36 {} {}
        #no 3.30000 3.30000 0.076 0.076 plated     2 3.30000 {} 8 37 {} {}
        #no 4.70000 4.70000 0.076 0.076 plated     2 4.70000 {} 26 40 {} {}

        if {$::wDRILL_SPEC_INFO_ARRANGE == ""} {
                # tk_messageBox -message "recheck the drill Info.!!"
                return "fail Drill Info Spec Table is empty. Recheck the drill Info.!!"
        }  else {
                #STEP_ON  $::wJOB $::wPANEL no
                #DRILL_SPEC_INFO_TABLELIST delete 0 end
        }

        COM filter_reset,filter_name=popup

        set check_flag 0

        foreach line $::wDRILL_SPEC_INFO_ARRANGE {
                #$info_list_unique : $apply=0 $finished_drill=1 $length=2 $plus_tol=3 $minus_tol=4 $type=5 $pth=6 $dhs=7 $drill_flag=8 $count=9 $order=10
                set apply          [lindex $line 0]
                set finished_drill [lindex $line 1]
                set length         [lindex $line 2]
                set plus_tol       [lindex $line 3]
                set minus_tol      [lindex $line 4]
                set type           [lindex $line 5]
                set pth            [lindex $line 6]
                set dhs            [lindex $line 7]
                set drill_flag     [lindex $line 8]
                set count          [lindex $line 9]
                set order          [lindex $line 10]
                set description    [lindex $line 11]

                # Check Logic (2020.04.10)
                # Guide Hole      : ������ 0.000 �� ���               = FSH
                # PTH (TENT)      : PTH 2 & description "tent" �� ��� = FSH                                 (���� +/-0.1mm)
                # PTH (�������)  : PTH 2 or 5                         = FSH+(((+����)-(-����)))/2)+0.1      (���� +/-0.025mm)
                # NPTH (�������) : PTH 1 or 4                         = FSH+(((+����)-(-����)))/2)          (���� +/-0.025mm)
                # PTH (������)    : PTH 6                              = (FSH+(((+����)-(-����)))/2)+0.1)/2  (���� +/-0.025mm)
                # NPTH (������)   : PTH 7                              = (FSH+(((+����)-(-����)))/2))/2      (���� +/-0.025mm)

                # Guide Hole      : ������ 0.000 �� ��� = FSH
                if {$plus_tol == "0.000" && $minus_tol == "0.000"} {
                        if {$dhs != $finished_drill} {
                                PAUSE "ALARM : ORDER=$order FSH=$finished_drill, DHS=$dhs have to same with $finished_drill"
                                set msg "ALARM : ORDER=$order FSH=$finished_drill, DHS=$dhs have to same with $finished_drill"
                                #return "fail $msg"
                                set check_flag 1
                        }

                # PTH (TENT)      : PTH 2 & description "tent" �� ��� = FSH (���� +/-0.1mm)
                } elseif {$pth == 2 && [regexp {tent|TENT} $description]} {
                        if {$dhs > [expr $finished_drill + 0.1] || $dhs < [expr $finished_drill - 0.1]} {
                                PAUSE "ALARM : ORDER=$order FSH=$finished_drill, DHS have to [expr $finished_drill +0.1] > DHS=$dhs > [expr $finished_drill +0.1]"
                                set msg "ALARM : ORDER=$order FSH=$finished_drill, DHS have to [expr $finished_drill +0.1] > DHS=$dhs > [expr $finished_drill +0.1]"
                                #return "fail $msg"
                                set check_flag 1
                        }

                # PTH (�������)  : PTH 2 or 5 = FSH+(((+����)-(-����)))/2)+0.1 (���� +/-0.025mm)
                } elseif {($pth == 2 || $pth == 5) && ![regexp {tent|TENT} $description]} {
                        set upper_value [format %.5f [expr $finished_drill + (($plus_tol - $minus_tol)/2.0)+0.1 +0.025]]
                        set lower_value [format %.5f [expr $finished_drill + (($plus_tol - $minus_tol)/2.0)+0.1 -0.025]]
                        if {$dhs > $upper_value || $dhs < $lower_value} {
                                PAUSE "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                set msg "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                #return "fail $msg"
                                set check_flag 1
                        }

                # NPTH (�������) : PTH 1 or 4 = FSH+(((+����)-(-����)))/2) (���� +/-0.025mm)
                } elseif {$pth == 1 || $pth == 4} {
                        set upper_value [format %.5f [expr $finished_drill + (($plus_tol - $minus_tol)/2.0) +0.025]]
                        set lower_value [format %.5f [expr $finished_drill + (($plus_tol - $minus_tol)/2.0) -0.025]]
                        if {$dhs > $upper_value || $dhs < $lower_value} {
                                PAUSE "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                set msg "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                #return "fail $msg"
                                set check_flag 1
                        }

                # PTH (������)    : PTH 6 = (FSH+(((+����)-(-����)))/2)+0.1)/2 (���� +/-0.025mm)
                } elseif {$pth == 6} {
                        set upper_value [format %.5f [expr ($finished_drill + (($plus_tol - $minus_tol)/2.0)+0.1)/2.0 +0.025]]
                        set lower_value [format %.5f [expr ($finished_drill + (($plus_tol - $minus_tol)/2.0)+0.1)/2.0 -0.025]]
                        if {$dhs > $upper_value || $dhs < $lower_value} {
                                PAUSE "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                set msg "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                #return "fail $msg"
                                set check_flag 1
                        }

                # NPTH (������)   : PTH 7 = (FSH+(((+����)-(-����)))/2))/2 (���� +/-0.025mm)
                } elseif {$pth == 7} {
                        set upper_value [format %.5f [expr ($finished_drill + ($plus_tol - $minus_tol)/2.0)/2.0 +0.025]]
                        set lower_value [format %.5f [expr ($finished_drill + ($plus_tol - $minus_tol)/2.0)/2.0 -0.025]]
                        if {$dhs > $upper_value || $dhs < $lower_value} {
                                PAUSE "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                set msg "ALARM : ORDER=$order FSH=$finished_drill, DHS have to $upper_value >= DHS=$dhs >= $lower_value"
                                #return "fail $msg"
                                set check_flag 1
                        }
                }
        }

        if {$check_flag == 1} {
                return "fail $msg"
        }


        puts "############ pDRILL_SPEC_INFO_HOLE_SIZE_CHECK END !!! ############"
        puts "############ pDRILL_SPEC_INFO_HOLE_SIZE_CHECK END !!! ############"
        puts "############ pDRILL_SPEC_INFO_HOLE_SIZE_CHECK END !!! ############"

        return "ok Success !!!"
}




################################################################################
## Procedure    : pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK
## ����         : Guide, Coin Drill �� ������ 1�� Drill �� ���� ��� 1�� �̹����� Scale �� üũ
## Input        :
## Return       :

proc pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK { } {

        puts "############ pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK START !!! ############"
        puts "############ pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK START !!! ############"
        puts "############ pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK START !!! ############"

        if {$::wNO_OF_LAYER == 2} {
                return ok
        }

        set ::wDRILL_INFO [DRILL_TABLELIST get 0 end]
        set drill_info ""

        # Drill Info Order=1 Check
        foreach line $::wDRILL_INFO {
                # d01    01 08 4 cf  both 100.000 100.000 top m 200 no
                # d0304s 03 04 1 ccl none 100.105 100.080 top m 200 no

                if {[regexp {^d} [lindex $line 0]] && ![regexp {g} [lindex $line 0]] && [lindex $line 3] == 1 && [lindex $line 9] == "m"} {
                        puts "[lindex $line 0] = drl_layer, [lindex $line 3] = order, [lindex $line 9] = type"
                        lappend drill_info "[lindex $line 0] [lindex $line 1] [lindex $line 2] [lindex $line 3] [lindex $line 6] [lindex $line 7] [lindex $line 9]"

                        # Drill Scale �� 100x100 �̸� ALARM
                        if {[lindex $line 6] == "100.000" && [lindex $line 7] == "100.000"} {
                                PAUSE "[lindex $line 0] Scale X/Y = 100x100, Need to Scale Check !!!"
                                return fail
                        }
                }
        }
        puts $drill_info

        # 1�� Drill ���� ��� Return
        if {[llength $drill_info] == 0} {
                return
        }

        # Layer Info Order=1 Scale Compare Check
        foreach line $::wLAYER_INFO {
                # l03 nega no  2 0.05over ccl 100.000 100.000
                # l04 nega yes 1 0.05over ccl 100.105 100.080
                # l05 nega no  1 0.05over ccl 100.105 100.080
                # l06 nega yes 2 0.05over ccl 100.000 100.000

                set layer    [lindex $line 0]
                set layer_no [regsub {^l} $layer ""]
                set order    [lindex $line 3]
                set scale_x  [lindex $line 6]
                set scale_y  [lindex $line 7]

                # Image Order=1 �� ���
                if {$order == 1} {
                        # Drill Info ���� Layer �� ���� ���� Drill Scale ���� ��
                        foreach line2 $drill_info {
                                puts $line2
                                set dr_layer    [lindex $line2 0]
                                set dr_start_ly [lindex $line2 1]
                                set dr_end_ly   [lindex $line2 2]
                                set dr_order    [lindex $line2 3]
                                set dr_scale_x  [lindex $line2 4]
                                set dr_scale_y  [lindex $line2 5]
                                set dr_d_type   [lindex $line2 6]

                                puts "$layer_no >= $dr_start_ly && $layer_no <= $dr_end_ly == $scale_x != $dr_scale_x || $scale_y != $dr_scale_y"

                                if {$layer_no >= $dr_start_ly && $layer_no <= $dr_end_ly} {
                                        if {$scale_x != $dr_scale_x || $scale_y != $dr_scale_y} {
                                                PAUSE "SCALE ALARM : $dr_layer=${dr_scale_x}x${dr_scale_y} != $layer=${scale_x}x${scale_y}"
                                                return fail
                                        }
                                }

                                if {$layer_no >= $dr_start_ly && $layer_no <= $dr_end_ly} {
                                        if {$scale_x != $dr_scale_x || $scale_y != $dr_scale_y} {
                                                PAUSE "SCALE ALARM : $dr_layer=${dr_scale_x}x${dr_scale_y} != $layer=${scale_x}x${scale_y}"
                                                return fail
                                        }
                                }
                        }
                }
        }

        puts "############ pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK END !!! ############"
        puts "############ pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK END !!! ############"
        puts "############ pSUB_DRILL_AND_IMAGE_ORDER_ONE_SCALE_CHECK END !!! ############"

        return ok
}




################################################################################
## Procedure    : pAOI_SIMPLY_DATA_CREATE_TRIVIS
## ����         : AOI CAM Master ����ȭ (TRIVIS Ʈ���̺�)
## Input        :
## Return       :

proc pAOI_SIMPLY_DATA_CREATE_TRIVIS { layer_info_path } {

        puts "####### pAOI_SIMPLY_DATA_CREATE_TRIVIS START #################################"
        puts "####### pAOI_SIMPLY_DATA_CREATE_TRIVIS START #################################"
        puts "####### pAOI_SIMPLY_DATA_CREATE_TRIVIS START #################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
                source $pnl_file_path/$pnl_info_file_name
        } else {
                tk_messageBox -message "ERROR (pAOI_SIMPLY_DATA_CREATE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pAOI_SIMPLY_DATA_CREATE) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        ## ����� Drill Info
        #d01   01 08 3 cf both 100.000 100.000 top m 200 yes
        #d0207 02 07 2 cf btm  100.000 100.000 top m 190 yes
        #c0102 01 02 3 cf top  100.000 100.000 top c     no
        #c0807 08 07 3 cf btm  100.000 100.000 btm c     no


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pAOI_SIMPLY_DATA_CREATE) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                # 2L
        }
        ## ����� Trim Info
        #1 5 5 402 505 bonding+pin
        #2 5 5 397 500 bonding+pin


        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                        puts "It is not Regular Tool! Don't create $::wJOB.trivis_aoi File!"
                        return
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}$} $::wJOB] } {
                        puts "It is not Regular Tool! Don't create $::wJOB.trivis_aoi File!"
                        return
                }
                set ::iJOB [string range $::wJOB 0 10]
        # DDPI
        } elseif {$::wSITE == 3} {
                puts "DDPI need not pAOI_SIMPLY_DATA_CREATE Process!"
                return
        }

        set time [clock format [clock scan now] -format %y%m%d%H%M%S]
        set date [clock format [clock scan now] -format %Y%m%d.%H%M%S]

        if { $::wSITE == 1} {
                if {$::wINCAM == 1} {
                        set aoi_fpath "$::env(JOB_USER_DIR)/$::wJOB.trivis_aoi"
                        set file_path $::env(JOB_USER_DIR)
                        set aoi_list [glob -nocomplain -tail -directory $::env(JOB_USER_DIR) *.trivis_aoi*]
                } else {
                        set aoi_fpath "$::gGENESIS_JOB_DB_PATH/user/$::wJOB.trivis_aoi"
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                        set aoi_list [glob -nocomplain -tail -directory $::gGENESIS_JOB_DB_PATH/user *.trivis_aoi*]
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if {$::wINCAM == 1} {
                        set aoi_fpath "$::env(JOB_USER_DIR)/$::iJOB.trivis_aoi"
                        set file_path $::env(JOB_USER_DIR)
                        set aoi_list [glob -nocomplain -tail -directory $::env(JOB_USER_DIR) *.trivis_aoi*]
                } else {
                        set aoi_fpath "$::gGENESIS_JOB_DB_PATH/user/$::iJOB.trivis_aoi"
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                        set aoi_list [glob -nocomplain -tail -directory $::gGENESIS_JOB_DB_PATH/user *.trivis_aoi*]
                }
        }

        # workarea file delete - ���� Rev. ���� ����
        foreach line $aoi_list {
                if {$line == ""} {continue}
                if {$line == "$::wJOB.trivis_aoi"} {continue}
                if {$::wSITE == 2} {
                        if {$line == "$::iJOB.trivis_aoi"} {continue}
                }
                #PAUSE ${file_path}/$line
                file delete -force ${file_path}/$line
        }

        # File Back-Up
        if {[file exists $aoi_fpath]} {
                file copy -force $aoi_fpath ${aoi_fpath}.$time
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000

        STEP_ON $::wJOB $::wPANEL no

        # START
        CLEAR_RESET
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm

        # PNL Center ��ǥ�� ����
        set center_x [expr $gPROF_LIMITSxmax / 2.0]
        set center_y [expr $gPROF_LIMITSymax / 2.0]

        # [Common] Info Verify
        set ::gAOI_TRIVIS_AOI ""

        if { $::wSITE == 1} {
                set job $::wJOB
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                set job $::iJOB
        }

        # JOB ETC ���� ����
#        set ::gAOI_TRIVIS_AOI [regsub -all {\} \{} $::gAOI_TRIVIS_AOI ""]
#        set ::gAOI_TRIVIS_AOI [regsub -all {\{|\}} $::gAOI_TRIVIS_AOI ""]

        # File Create : ToolNo.workarea
        set aoi_fileID [open $aoi_fpath w]

        # Head File
        puts $aoi_fileID "#\[Job Info\]"
        puts $aoi_fileID "#JobName=$job"
        puts $aoi_fileID "#DATE=$date"
        puts $aoi_fileID "#NumOfLayer=$::wNO_OF_LAYER"
        puts $aoi_fileID "#Unit=mm"
        puts $aoi_fileID " "

        # MAIN
        puts $aoi_fileID "set tvGroupName \"[string range $::wJOB 0 2]\""
        puts $aoi_fileID "set tvToolNo \"[string range $::wJOB 0 10]\""
        puts $aoi_fileID "set tvStepName \"$::wPANEL\""
        puts $aoi_fileID " "

        # [Common] Info Verify
        puts $aoi_fileID "#\[Common]"
        puts $aoi_fileID "set tvTHDrillLayer \"\""
        puts $aoi_fileID "set tvLaserDrillLayer \"\""
        puts $aoi_fileID "set tvPluggingDrillLayer \"\""
        puts $aoi_fileID "set tvEtchingViaDrillLayer \"\""
        puts $aoi_fileID "set tvMaskingDrillLayer \"\""
        puts $aoi_fileID "set tvCUOpenLayer \"\""
        puts $aoi_fileID "set tvCoinLayer \"\""
        puts $aoi_fileID "set tvCriticalAreaLayer \"\""
        # �˻� ���� ����
        puts $aoi_fileID "set tvScanRegion \"Step{'pcb*'}\""
        if {$work_size_y < 620} {
                puts $aoi_fileID "set tvRotationAngle \"0\""
        } else {
                puts $aoi_fileID "set tvRotationAngle \"90\""
        }
        puts $aoi_fileID "set tvMirror \"\""
        puts $aoi_fileID "set tvPolarity \"Pos\""
        puts $aoi_fileID "set tvPanelAlign \"AttrDef{'.string=target_4*'}\""
        puts $aoi_fileID "set tvDensePatternArea \"\""
        # �˻� Step ����
        DO_INFO -t step -e $::wJOB/$::wPANEL -d SR, units=mm
        set gSRstep [lsort -uniq $gSRstep]
        foreach step $gSRstep {
                if {[regexp {^pcb[0-9]*$} $step] || ([regexp {^pcb[0-9]*} $step] && [regexp {\-top|\-bot} $step])} {
                        lappend inspectionstep '${step}'
                }
        }
        set inspectionstep [regsub -all {' '} $inspectionstep ',']
        puts $aoi_fileID "set tvInspectionRegion \"Step{$inspectionstep}\""
        puts $aoi_fileID "set tvMaskingRegion \"Layer{'aoi-mask'}\""
        puts $aoi_fileID "set tvPanelThickness \"\""
        puts $aoi_fileID "set tvCRMSettings \"XPS:'Inner'\""
        puts $aoi_fileID "set tvInspectionRecipe \"Inner\""
        puts $aoi_fileID "set tvWorkSize \"${::wWORK_SIZE}\""
        puts $aoi_fileID "set tvTrimSize \"${::wWORK_SIZE}\""
        puts $aoi_fileID "set tvMinLineWidth \"\""
        puts $aoi_fileID "set tvEtchingToFix \"\""
        puts $aoi_fileID "set tvMinSpaceWidth \"\""
        puts $aoi_fileID ""

        if {[regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_LIST
        }
        # ȸ���� Check
        if {[lsearch $sTABLE_LIST 1180] != -1} {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1180
                # sLAYERPROC = ������ ����  - Layer Matching�� ��� [2 3 4 5 6 7 8 9 1 10]
                # sLINEWID   = LINE WIDTH   - SpecMinLineWidth [0.000 0.076 0.076 0.000]
                # sWIDMN     = WIDTH MIN    - None
                # sWIDMX     = WIDTH MAX    - None
                # sLINESPACE = LINE SPACE   - MinLineSpace [0.000 0.076 0.076 0.000]
        }
        # �β� Check - BOM ���� Ȯ��
        if {[lsearch $sTABLE_LIST 1120] != -1} {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1120
                # sBOMNR      = BOM����[1 2 3 4 5 6 7 8 9 10 11]
                # sLAYER      = LAYER  [000 000 001 000 002 000 004 000 006 000 000]
                # sLAYER2     = LAYER2 [000 000 000 000 003 000 005 000 000 000 000]
                # sMATNRTIK   = ����β� [0.000 0.000. 0.012 0.200 0.300 0.200 0.300 0.200 0.012 0.000 0.000]
                # sCOPPERTIK  = ���ڵβ� [0.000 0.000 12.000 0.000 .....]
                # sCOPPERTIK2 = ���ڵβ�2 [0.000 0.000 12.000 0.000 .....]
                # sMATNRTIKT = �����̷еβ� [10.000 20.000 0.000 210.000 300.000 210.000 300.000 210.000 0.000 20.000 10.000]
        }
        # Total Thickness
#        if {[lsearch $sTABLE_LIST 1100] != -1} {
#                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1100
#                # sTIK       = ���� �β� [0.260]
#        }
        # �����β� Check - SAP ���� �ʵ� ����
        if {$::wNO_OF_LAYER > 2} {
                if {[lsearch $sTABLE_LIST 1130] != -1} {
                        pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1130
                        # sSSEQNR    = Scale ���� [1 2 3 4]
                        # sLAYERFR   = ������     [4 3 2 1]
                        # sLAYERTO   = ������     [15 16 17 18]
                        # sTIKAL     = �����ĵβ� [0.000 1.904 2.064 2.494]
                        foreach SSEQNR $sSSEQNR LAYERFR $sLAYERFR LAYERTO $sLAYERTO TIKAL $sTIKAL {
                                lappend layer_thickness "$LAYERFR $TIKAL"
                                lappend layer_thickness "$LAYERTO $TIKAL"
                        }
                }
                #PAUSE $layer_thickness
        }

        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm


        # Drill Check
        set main_drl_chk 0
        set cap_drl_chk 0
        set coin_drl_chk 0

        foreach drill $drill_info {
                ## ����� Drill Info
                #d01   01 08 3 cf both 100.000 100.000 top m 200 yes

                # Main Drill ����
                if {[regexp {^d01$|^d001$} [lindex $drill 0]] && [lindex $drill 3] == $::wEND_ORDER && [regexp {^m$} [lindex $drill 9]]} {
                        set main_drl_chk 1
                        set main_drl [lindex $drill 0]
                }
                # Cap Drill ����
                if {[regexp {^cap$} [lindex $drill 9]]} {
                        set cap_drl_chk 1
                        set cap_drl [lindex $drill 0]
                }
                # Coin Guide Drill ����
                if {[regexp {^gc$} [lindex $drill 9]]} {
                        set coin_drl_chk 1
                        set coin_drl [lindex $drill 0]
                }
        }

        # Layer �� Info ����
        set info_cnt 0
        foreach layer $layer_info {

                ## ����� Layer Info
                #l01 nega no 3 0.05over cf 100.000 100.000

                if {$layer == ""} {continue}
                incr info_cnt
                set layer_no [scan [regsub "l" [lindex $layer 0] ""] %d]
                set layer_order [lindex $layer 3]
                set mask_layer ""

                # Layer
                puts $aoi_fileID "#[lindex $layer 0]"
                puts $aoi_fileID "set tv${info_cnt}PatternLayer \"[lindex $layer 0]\""

                # Pair Layer
                puts $aoi_fileID "set tv${info_cnt}PairPatternLayer \"\""

                # Mask Layer ����
                # Masking Area ���� : aoi-mask, l0x-nits, Coin Guide Drill
                DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
                foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                        #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                        if {[regexp {^l[0-9]+\-nits$} $name]} {
                                if {[lindex $layer 0] == [lindex [regsub -all {\-} $name " "] 0]} {
                                        lappend mask_layer '${name}'
                                }
                        } elseif {[regexp {^aoi-mask$} $name]} {
                                lappend mask_layer '${name}'

                        # 1�� �̹����� �̴� ��� Coin Guide �帱���� Mask ó��
                        } elseif {[regexp {^d[0-9]+g\-c$} $name] && $layer_order != 1} {
                                lappend mask_layer '${name}'
                        }
                }
                set mask_layer [regsub -all {' '} $mask_layer ',']
                puts $aoi_fileID "set tv${info_cnt}MaskingRegion \"Layer{$mask_layer}\""


                # ���� Align ����
                # THDrillLayer : aoi-d01 Check

                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
                        puts $aoi_fileID "set tv${info_cnt}PanelAlign \"AttrDef{'.string=sr_auto_expo_out_1'}\""
                        puts $aoi_fileID "set tv${info_cnt}CRMSettings \"XPS:'Outer'\""
                        puts $aoi_fileID "set tv${info_cnt}InspectionRecipe \"Outer\""

                        # aoi-d01 or aoi-d001 Layer �� ���� ��� d01 ��� ����
                        DO_INFO -t layer -e $::wJOB/$::wPANEL/aoi-$main_drl -d EXISTS
                        if {$gEXISTS == "yes"} {
                                puts $aoi_fileID "set tv${info_cnt}THDrillLayer \"aoi-$main_drl\""
                        } else {
                                DO_INFO -t layer -e $::wJOB/$::wPANEL/$main_drl -d EXISTS
                                if {$gEXISTS == "yes"} {
                                        puts $aoi_fileID "set tv${info_cnt}THDrillLayer \"$main_drl\""
                                }
                        }
                # ���� Align ����
                } else {
                        puts $aoi_fileID "set tv${info_cnt}PanelAlign \"AttrDef{'.string=target_4_${layer_order}'}\""
                }

                # Trim Size ����
                if {$::wNO_OF_LAYER == 2} {
                        puts $aoi_fileID "set tv${info_cnt}TrimSize \"$::wWORK_SIZE\""
                        lappend layer_trimsize "$layer_no $::wWORK_SIZE"
                } else {
                        foreach trim $trim_info {
                                set trim_order [expr [lindex $trim 0] + 1]
                                set trim_x [lindex $trim 3]
                                set trim_y [lindex $trim 4]

                                if {$layer_order == 1} {
                                        puts $aoi_fileID "set tv${info_cnt}TrimSize \"$::wWORK_SIZE\""
                                        lappend layer_trimsize "$layer_no $::wWORK_SIZE"
                                        break
                                } elseif {$layer_order == $trim_order} {
                                        puts $aoi_fileID "set tv${info_cnt}TrimSize \"${trim_x}X${trim_y}\""
                                        lappend layer_trimsize "$layer_no ${trim_x}X${trim_y}"
                                        break
                                }
                        }
                }

                # Drill Layer Check
                foreach drill $drill_info {
                        ## ����� Drill Info
                        #d01   01 08 3 cf both 100.000 100.000 top m 200 yes

                        # Drill ����/������ ����
                        set start_no [scan [lindex $drill 1] %d]
                        set end_no [scan [lindex $drill 2] %d]

                        # Layer Order �� Drill Order �� ���� ��� Drill Type �� ����
                        # �Ϲ� Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^m$|^g$} [lindex $drill 9]] && ![regexp {d01$|d001$} [lindex $drill 0]]} {

                                # Layer ������ Drill ���������� ũ�ų� ����, ������ ���� �۰ų� ���� ���
                                if {$layer_no >= $start_no && $layer_no <= $end_no} {
                                        puts $aoi_fileID "set tv${info_cnt}THDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # Cap Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^cap$} [lindex $drill 9]]} {

                                # Layer ����/���� ������ ������ ���
                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
                                        puts $aoi_fileID "set tv${info_cnt}CapDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # AM Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^am$} [lindex $drill 9]]} {

                                # Layer ����/���� ������ ������ ���
                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
                                        puts $aoi_fileID "set tv${info_cnt}AMDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # X-Ray Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^xray$} [lindex $drill 9]]} {

                                # Layer ����/���� ������ ������ ���
                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
                                        puts $aoi_fileID "set tv${info_cnt}XrayDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # Coin Guide Drill ����
                        # ���� Order�� ���
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^gc$} [lindex $drill 9]]} {

                                # Layer ������ Drill ���������� ũ�ų� ����, ������ ���� �۰ų� ���� ���
                                if {$layer_no >= $start_no && $layer_no <= $end_no} {
                                        puts $aoi_fileID "set tv${info_cnt}CoinDrillLayer \"[lindex $drill 0]\""
                                }
                        # ���� Order�� �ƴ� ��� Mask ó��
                        } elseif {[lindex $layer 3] != [lindex $drill 3] && [regexp {^gc$} [lindex $drill 9]]} {
                                puts $aoi_fileID "set tv${info_cnt}CoinDrillLayer \"[lindex $drill 0]\""
                        }

                        # Back Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^back$} [lindex $drill 9]]} {

                                # Layer ������ Drill �������� ��ġ �� ���
                                if {$layer_no == $start_no} {
                                        puts $aoi_fileID "set tv${info_cnt}BackDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # Depth Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^depth$} [lindex $drill 9]]} {

                                # Layer ������ Drill �������� ��ġ �� ���
                                if {$layer_no == $start_no} {
                                        puts $aoi_fileID "set tv${info_cnt}DepthDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # Step Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^step$} [lindex $drill 9]]} {

                                # Layer ������ Drill �������� ��ġ �� ���
                                if {$layer_no == $start_no} {
                                        puts $aoi_fileID "set tv${info_cnt}StepDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # Pet Laser Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^mp$} [lindex $drill 9]]} {

                                # Layer ������ Drill �������� ��ġ �� ���
                                if {$layer_no == $start_no} {
                                        puts $aoi_fileID "set tv${info_cnt}PetLaserDrillLayer \"[lindex $drill 0]\""
                                }
                        }

                        # �Ϲ� Laser Drill ����
                        if {[lindex $layer 3] == [lindex $drill 3] && [regexp {^c$|^y$} [lindex $drill 9]]} {

                                # Layer ������ Drill �������� ��ġ �� ���
                                if {$layer_no == $start_no} {

                                        if {[expr (abs ($start_no - $end_no))] == 1} {
                                                puts $aoi_fileID "set tv${info_cnt}LaserDrillLayer \"[lindex $drill 0]\""
                                        } elseif {[expr (abs ($start_no - $end_no))] > 1 } {
                                                puts $aoi_fileID "set tv${info_cnt}SkipLaserDrillLayer \"[lindex $drill 0]\""
                                        }
                                }
                        }
                }

                # PluggingDrillLayer Check
                #DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
                foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                        #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]

                        # Without layer info
                        # Outer
                        if {$context == "board" && [regexp {^ana$} $name]} {
                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
                                        puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                }

                        # Hole Plugging 2nd
                        } elseif {$context == "board" && [regexp {^ana2$} $name]} {
                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
                                        puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'ana1','ana2'}\""
                                }

                        # With Layer Info
                        # 99L below
                        } elseif {$context == "board" && [regexp {^ana[0-9]{4}$} $name]} {
                                # Outer Hole Plugging : Top View
                                if {[scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 0 1] %d] && [scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 2 3] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 0 1] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 2 3] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                        }
                                # Outer Hole Plugging : Btm View
                                } elseif {[scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 0 1] %d] && [scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 2 3] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 0 1] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 2 3] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                        }

                                # Inner Hole Plugging
                                } elseif {$layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 0 1] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 2 3] %d]} {
                                        if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {continue}
                                        puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                }

                        # 100L over
                        } elseif {$context == "board" && [regexp {^ana[0-9]{6}$} $name]} {
                                # Outer Hole Plugging : Top View
                                if {[scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 0 2] %d] && [scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 3 5] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 0 2] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 3 5] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                        }
                                # Outer Hole Plugging : Btm View
                                } elseif {[scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 0 2] %d] && [scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} $name ""] 3 5] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 0 2] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 3 5] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                        }

                                # Inner Hole Plugging
                                } elseif {$layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 0 2] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} $name ""] 3 5] %d]} {
                                        if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {continue}
                                        puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"$name\""
                                }

                        # Hole Plugging 2nd
                        # 99L below
                        } elseif {$context == "board" && [regexp {^ana[0-9]{4}\-2$} $name]} {
                                # Outer Hole Plugging : Top View
                                if {[scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 1] %d] && [scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 2 3] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 1] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 2 3] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'[lindex [regsub {\-} $name " "] 0]\-1','[lindex [regsub {\-} $name " "] 0]\-2'}\""
                                        }
                                # Outer Hole Plugging : Btm View
                                } elseif {[scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 1] %d] && [scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 2 3] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 1] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 2 3] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'[lindex [regsub {\-} $name " "] 0]\-1','[lindex [regsub {\-} $name " "] 0]\-2'}\""
                                        }

                                # Inner Hole Plugging
                                } elseif {$layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 1] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 2 3] %d]} {
                                        if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {continue}
                                        puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'[lindex [regsub {\-} $name " "] 0]\-1','[lindex [regsub {\-} $name " "] 0]\-2'}\""
                                }

                        # Hole Plugging 2nd
                        # 100L over
                        } elseif {$context == "board" && [regexp {^ana[0-9]{6}\-2$} $name]} {
                                # Outer Hole Plugging : Top View
                                if {[scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 2] %d] && [scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 3 5] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 2] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 3 5] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'[lindex [regsub {\-} $name " "] 0]\-1','[lindex [regsub {\-} $name " "] 0]\-2'}\""
                                        }
                                # Outer Hole Plugging : Btm View
                                } elseif {[scan $::wEND_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 2] %d] && [scan $::wSTART_LAYER_NO %d] == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 3 5] %d]} {
                                        if {$layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 2] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 3 5] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'[lindex [regsub {\-} $name " "] 0]\-1','[lindex [regsub {\-} $name " "] 0]\-2'}\""
                                        }

                                # Inner Hole Plugging
                                } elseif {$layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 0 2] %d] || $layer_no == [scan [string range [regsub -all {[a-z]} [lindex [regsub {\-} $name " "] 0] ""] 3 5] %d]} {
                                        if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {continue}
                                        puts $aoi_fileID "set tv${info_cnt}PluggingDrillLayer \"{'[lindex [regsub {\-} $name " "] 0]\-1','[lindex [regsub {\-} $name " "] 0]\-2'}\""
                                }
                        }
                }

                # Mirror Check
                if {[lindex $layer 2] == "no"} {
                        puts $aoi_fileID "set tv${info_cnt}Mirror \"\""
                } else {
                        puts $aoi_fileID "set tv${info_cnt}Mirror \"X\""
                }

                # ȸ���� Check
                # sLAYERPROC = ������ ����  - Layer Matching�� ��� [2 3 4 5 6 7 8 9 1 10]
                # sLINEWID   = LINE WIDTH   - SpecMinLineWidth [0.000 0.076 0.076 0.000]
                # sWIDMN     = WIDTH MIN    - None
                # sWIDMX     = WIDTH MAX    - None
                # sLINESPACE = LINE SPACE   - MinLineSpace [0.000 0.076 0.076 0.000]
                # l,0 �� �����ϰ� ������ ������ ���� - SAP ������ �������� �� ����
                set layer_cnt [scan [regsub {l} $layer ""] %d]
                foreach LAYERPROC $sLAYERPROC LINEWID $sLINEWID LINESPACE $sLINESPACE {
                        if {$layer_cnt == $LAYERPROC} {
                                # Line Spec ���� um ����
                                if {$LINEWID != 0 && $LINEWID != ""} {
                                        puts $aoi_fileID "set tv${info_cnt}MinLineWidth \"[expr $LINEWID * 1000]\""
                                }
                                if {$LINESPACE != 0 && $LINESPACE != ""} {
                                        puts $aoi_fileID "set tv${info_cnt}MinSpaceWidth \"[expr $LINESPACE * 1000]\""
                                }
                        }
                }

                # �β� Check - BOM ���� Ȯ��
                # sBOMNR      = BOM����[1 2 3 4 5 6 7 8 9 10 11]
                # sLAYER      = LAYER  [000 000 001 000 002 000 004 000 006 000 000]
                # sLAYER2     = LAYER2 [000 000 000 000 003 000 005 000 000 000 000]
                # sMATNRTIK   = ����β� [0.000 0.000. 0.012 0.200 0.300 0.200 0.300 0.200 0.012 0.000 0.000]
                # sCOPPERTIK  = ���ڵβ� [0.000 0.000 12.000 0.000 .....]
                # sCOPPERTIK2 = ���ڵβ�2 [0.000 0.000 12.000 0.000 .....]
                # sMATNRTIKT = �����̷еβ� [10.000 20.000 0.000 210.000 300.000 210.000 300.000 210.000 0.000 20.000 10.000]
                foreach BOMNR $sBOMNR LAYER $sLAYER LAYER2 $sLAYER2 MATNRTIK $sMATNRTIK COPPERTIK $sCOPPERTIK COPPERTIK2 $sCOPPERTIK2 MATNRTIKT $sMATNRTIKT {
                        set thick [expr ($COPPERTIK + $COPPERTIK2 + ($MATNRTIK * 1000))]

                        if {$layer_no == [scan $LAYER %d] || $layer_no == [scan $LAYER2 %d]} {

                                # 1�� �̹��� �� ��� (CCL �β�)
                                if {$layer_order == 1} {
                                        puts $aoi_fileID "set tv${info_cnt}PanelThickness \"$thick\""

                                # �߰� ���� �� ���� �� ���
                                } else {
                                        # �����β� Check - SAP ���� �ʵ� ����
                                        foreach line $layer_thickness {
                                                if {$layer_no == [lindex $line 0]} {
                                                        puts $aoi_fileID "set tv${info_cnt}PanelThickness \"[expr [lindex $line 1] * 1000]\""
                                                }
                                        }
                                }
                        }
                }

                puts $aoi_fileID ""
        }

        # Cu Open Layer Info ����
        #DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                if {$context == "board" && [regexp {^cu[0-9]{4}$|^cu[0-9]{6}$} $name]} {

                        incr info_cnt
                        # Layer
                        puts $aoi_fileID "#$name"
                        puts $aoi_fileID "set tv${info_cnt}CUOpenLayer \"$name\""

                        set layer_no [regsub -all {[a-z]} $name ""]

                        # 99L ������ ���
                        if {[string length $layer_no] == 4} {
                                set start_no [scan [string range $layer_no 0 1] %d]
                                set end_no [scan [string range $layer_no 2 3] %d]
                        # 100L �̻��� ���
                        } elseif {[string length $layer_no] == 6} {
                                set start_no [scan [string range $layer_no 0 2] %d]
                                set end_no [scan [string range $layer_no 3 5] %d]
                        }

                        # Layer Order ����
                        foreach layer $layer_info {
                                ## ����� Layer Info
                                #l01 nega no 3 0.05over cf 100.000 100.000

                                if {$layer == ""} {continue}
                                set layer_no [scan [regsub "l" [lindex $layer 0] ""] %d]
                                set layer_order [lindex $layer 3]

                                if {$start_no == $layer_no} {
                                        set layer_order [expr [lindex $layer 3] - 1]
                                        break
                                }
                        }

                        set mask_layer ""

                        # Mask Layer ����
                        # Masking Area ���� : aoi-mask, l0x-nits, Coin Guide Drill
                        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
                        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                                if {[regexp {^aoi-mask$} $name]} {
                                        lappend mask_layer '${name}'
                                } elseif {[regexp {^d[0-9]+g\-c$} $name]} {
                                        lappend mask_layer '${name}'
                                }
                        }
                        set mask_layer [regsub -all {' '} $mask_layer ',']
                        puts $aoi_fileID "set tv${info_cnt}MaskingRegion \"Layer{$mask_layer}\""

                        # Align ����
                        puts $aoi_fileID "set tv${info_cnt}PanelAlign \"AttrDef{'.string=target_4_${layer_order}'}\""


                        # ������ ���
                        if {$start_no == [scan $::wSTART_LAYER_NO %d] || $start_no == [scan $::wEND_LAYER_NO %d]} {
                                #puts $aoi_fileID "set tv${info_cnt}PanelAlign \"AttrDef{'.string=auto_expo_out_*'}\""
                                puts $aoi_fileID "set tv${info_cnt}CRMSettings \"XPS:'Outer'\""
                                puts $aoi_fileID "set tv${info_cnt}InspectionRecipe \"Outer\""

                                # Cap Drill �߰�
                                if {$cap_drl_chk == 1} {
                                        puts $aoi_fileID "set tv${info_cnt}CapDrillLayer \"$cap_drl\""

                                # Main Drill �߰�
                                } else {
                                        DO_INFO -t layer -e $::wJOB/$::wPANEL/$main_drl -d EXISTS
                                        if {$gEXISTS == "yes"} {
                                                puts $aoi_fileID "set tv${info_cnt}THDrillLayer \"d01\""
                                        }
                                }

                        # ������ ���
                        } else {

                                #puts $aoi_fileID "set tv${info_cnt}CRMSettings \"XPS:'Inner'\""
                                #puts $aoi_fileID "set tv${info_cnt}InspectionRecipe \"Inner'\""
                        }

                        # Mirror Check
                        if {$start_no <= $end_no} {
                                puts $aoi_fileID "set tv${info_cnt}Mirror \"\""
                        } else {
                                puts $aoi_fileID "set tv${info_cnt}Mirror \"X\""
                        }

                        # Trim Size  ����
                        if {$::wNO_OF_LAYER == 2} {
                                puts $aoi_fileID "set tv${info_cnt}TrimSize \"$::wWORK_SIZE\""
                        } else {
                                foreach trim $layer_trimsize {
                                        if {$start_no == [scan [lindex $trim 0] %d]} {
                                                puts $aoi_fileID "set tv${info_cnt}TrimSize \"[lindex $trim 1]\""
                                        }
                                }
                        }

                        # �����β� Check - SAP ���� �ʵ� ����
                        foreach line $layer_thickness {
                                if {$start_no == [lindex $line 0]} {
                                        puts $aoi_fileID "set tv${info_cnt}PanelThickness \"[expr [lindex $line 1] * 1000]\""
                                }
                        }

                        puts $aoi_fileID ""

                }
        }

        # CP Layer Info ����
#        foreach layer "$cp_all" {
#                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
#                if {$gEXISTS == "no"} {continue}
#
#                # CP Layer�� Matching �Ǵ� ���� Layer �̸� ����
#                set _layer [lindex [regsub {\-} [regsub {cp} $layer "l"] " "] 0]
#                # CP Layer Order ����
#                set cp_order [lindex [regsub {\-} [regsub {cp} $layer "l"] " "] 1]
#                set app_layer ""
#                foreach line $layer_info {
#                        # CP Layer �� ���� ���� Layer List ����
#                        if {$cp_order == [lindex $line 3]} {
#                                lappend app_layer [lindex $line 0]
#                        }
#                }
#                puts "cp_order=$cp_order $app_layer"
#                #cp_order=3 l13 l14
#
#                # CP Layer�� ���� Layer Name Mirror ���� Ȯ��
#                if {[lindex [lsearch -inline $layer_info *$_layer*] 2] == "no"} {
#                        # Mirror=no �� ��� �������� ����, CP Layer ���� ū ���� ���� Layer Scale ����
#                        set mirror no
#                        set polarity negative
#                        set app_layer [lsort -dict -increasing $app_layer]
#                        puts "$layer INCR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
#                        # cp02-3 INCR=no l13 l14
#                } else {
#                        # Mirror=yes �� ��� �������� ����, CP Layer ���� ���� ���� ū Layer Scale ����
#                        set mirror yes
#                        set polarity negative
#                        set app_layer [lsort -dict -decreasing $app_layer]
#                        puts "$layer DECR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
#                        # cp25-3 DECR=yes l14 l13
#                }
#
#                incr info_cnt
#                set layer_no [scan [regsub "l" $_layer ""] %d]
#
#                # Layer
#                puts $aoi_fileID "#$layer"
#                puts $aoi_fileID "set tv${info_cnt}PatternLayer \"$layer\""
#                # Pair Layer
#                puts $aoi_fileID "set tv${info_cnt}PairPatternLayer \"\""
#                # THDrillLayer Check
#                foreach drill $drill_info {
#
#                        # Drill ����/������ ����
#                        set start_no [scan [lindex $drill 1] %d]
#                        set end_no [scan [lindex $drill 2] %d]
#
#                        puts "$layer=$cp_order=[lindex $drill 3]"
#
#
#                        # Layer Order �� Drill Order �� ���� ��� Drill Type �� ����
#                        # �Ϲ� Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^m$|^g$} [lindex $drill 9]] && ![regexp {d01$|d001$} [lindex $drill 0]]} {
#
#                                # Layer ������ Drill ���������� ũ�ų� ����, ������ ���� �۰ų� ���� ���
#                                if {$layer_no >= $start_no && $layer_no <= $end_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}THDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # Cap Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^cap$} [lindex $drill 9]]} {
#
#                                # Layer ����/���� ������ ������ ���
#                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
#                                        puts $aoi_fileID "set tv${info_cnt}CapDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # AM Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^am$} [lindex $drill 9]]} {
#
#                                # Layer ����/���� ������ ������ ���
#                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
#                                        puts $aoi_fileID "set tv${info_cnt}AMDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # X-Ray Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^xray$} [lindex $drill 9]]} {
#
#                                # Layer ����/���� ������ ������ ���
#                                if {$layer_no == [scan $::wSTART_LAYER_NO %d] || $layer_no == [scan $::wEND_LAYER_NO %d]} {
#                                        puts $aoi_fileID "set tv${info_cnt}XrayDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # Coin Guide Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^gc$} [lindex $drill 9]]} {
#
#                                # Layer ������ Drill ���������� ũ�ų� ����, ������ ���� �۰ų� ���� ���
#                                if {$layer_no >= $start_no && $layer_no <= $end_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}CoinDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#
#                        # Back Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^back$} [lindex $drill 9]]} {
#
#                                # Layer ������ Drill �������� ��ġ �� ���
#                                if {$layer_no == $start_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}BackDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # Depth Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^depth$} [lindex $drill 9]]} {
#
#                                # Layer ������ Drill �������� ��ġ �� ���
#                                if {$layer_no == $start_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}DepthDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # Step Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^step$} [lindex $drill 9]]} {
#
#                                # Layer ������ Drill �������� ��ġ �� ���
#                                if {$layer_no == $start_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}StepDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # Pet Laser Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^mp$} [lindex $drill 9]]} {
#
#                                # Layer ������ Drill �������� ��ġ �� ���
#                                if {$layer_no == $start_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}PetLaserDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#
#                        # �Ϲ� Laser Drill ����
#                        if {$cp_order == [lindex $drill 3] && [regexp {^c$|^y$} [lindex $drill 9]]} {
#
#                                # Layer ������ Drill �������� ��ġ �� ���
#                                if {$layer_no == $start_no} {
#                                        puts $aoi_fileID "set tv${info_cnt}LaserDrillLayer \"[lindex $drill 0]\""
#                                }
#                        }
#                }
#
#                # Mirror Check
#                if {$mirror == "no"} {
#                        puts $aoi_fileID "set tv${info_cnt}Mirror \"\""
#                } else {
#                        puts $aoi_fileID "set tv${info_cnt}Mirror \"X\""
#                }
#
#
#                # �β� Check - BOM ���� Ȯ��
#                # sBOMNR      = BOM����[1 2 3 4 5 6 7 8 9 10 11]
#                # sLAYER      = LAYER  [000 000 001 000 002 000 004 000 006 000 000]
#                # sLAYER2     = LAYER2 [000 000 000 000 003 000 005 000 000 000 000]
#                # sMATNRTIK   = ����β� [0.000 0.000. 0.012 0.200 0.300 0.200 0.300 0.200 0.012 0.000 0.000]
#                # sCOPPERTIK  = ���ڵβ� [0.000 0.000 12.000 0.000 .....]
#                # sCOPPERTIK2 = ���ڵβ�2 [0.000 0.000 12.000 0.000 .....]
#                # sMATNRTIKT = �����̷еβ� [10.000 20.000 0.000 210.000 300.000 210.000 300.000 210.000 0.000 20.000 10.000]
#                foreach BOMNR $sBOMNR LAYER $sLAYER LAYER2 $sLAYER2 MATNRTIK $sMATNRTIK COPPERTIK $sCOPPERTIK COPPERTIK2 $sCOPPERTIK2 MATNRTIKT $sMATNRTIKT {
#                        set thick [expr ($COPPERTIK + $COPPERTIK2 + ($MATNRTIK * 1000))]
#
#                        if {$layer_no == [scan $LAYER %d] || $layer_no == [scan $LAYER2 %d]} {
#
#                                # 1�� �̹��� �� ��� (CCL �β�)
#                                if {$cp_order == 1} {
#                                        puts $aoi_fileID "set tv${info_cnt}PanelThickness \"$thick\""
#
#                                # ���� �� ��� (���� �β�)
#                                } elseif {$cp_order == $::wEND_ORDER} {
#                                        puts $aoi_fileID "set tv${info_cnt}PanelThickness \"[expr [lindex $sTIK 0] * 1000]\""
#                                }
#                        }
#                }
#
#                puts $aoi_fileID ""
#        }





        puts $aoi_fileID $::gAOI_TRIVIS_AOI

        close $aoi_fileID

        puts "########## CREATE $::wJOB.trivis_aoi File Success! ##########"
        puts "########## CREATE $::wJOB.trivis_aoi File Success! ##########"
        puts "########## CREATE $::wJOB.trivis_aoi File Success! ##########"
        puts "########## CREATE $::wJOB.trivis_aoi File Success! ##########"

        if { $::wETC_DATA_CREATE == 1 } {
                PAUSE "########## CREATE $job.trivis_aoi File Success! ##########"
        }

        # END

        puts "####### pAOI_SIMPLY_DATA_CREATE_TRIVIS END #################################"
        puts "####### pAOI_SIMPLY_DATA_CREATE_TRIVIS END #################################"
        puts "####### pAOI_SIMPLY_DATA_CREATE_TRIVIS END #################################"


}




################################################################################
## Procedure    : pMARKING_REGISTRATION_COUPON_SIZE_CHANGE
## ����         : M/K �� ���� ������ ���� : N/W(50um), Automotive(100um), M2(63um) ����
## Input        :
## Return       :

proc pMARKING_REGISTRATION_COUPON_SIZE_CHANGE { layer_info_path } {

        puts "####### pMARKING_REGISTRATION_COUPON_SIZE_CHANGE START #################################"
        puts "####### pMARKING_REGISTRATION_COUPON_SIZE_CHANGE START #################################"
        puts "####### pMARKING_REGISTRATION_COUPON_SIZE_CHANGE START #################################"

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT


        # ���� Tool No Check
        # $::wSITE 1=KOREA, 2=IPGEN, 3=DDPI
        # KOREA : mse00123-01
        if { $::wSITE == 1} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                        puts "It is not Regular Tool! Coupon Size Change SKIP !!"
                        return
                }
        # IPGEN : mse00123-01p
        } elseif {$::wSITE == 2} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                        puts "It is not Regular Tool! Coupon Size Change SKIP !!"
                        return
                }
        # DDPI
        } elseif {$::wSITE == 3} {
                if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                        puts "It is not Regular Tool! Coupon Size Change SKIP !!"
                        return
                }
        }

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
                source $pnl_file_path/$pnl_info_file_name
        } else {
                tk_messageBox -message "ERROR (pMARKING_REGISTRATION_COUPON_SIZE_CHANGE) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        STEP_ON $::wJOB $::wPANEL no

        # START
        CLEAR_RESET
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm

        if {[regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_LIST
        }

        # ��ǰ�� Name Check
        if {[lsearch $sTABLE_LIST 1100] != -1} {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1100
                # sPRDHA_TXT = "MLB-Network ; Datacom"
                # sPRDHA_TXT = "MLB-Automotive ; Telematics"
        }

        # M/K �� ���� ������ ���� : N/W(50um), Automotive(100um), M2(63um) ����
        DO_INFO -t matrix -e $::wJOB/matrix ,units=mm
        foreach name $gROWname context $gROWcontext side $gROWside layer_type $gROWlayer_type {
                #[regexp {components|silk_screen|solder_mask|document|drill|solder_paste|rout} $layer_type]
                if {$context == "board" && [regexp {silk_screen} $layer_type] } {
                        WORK $name

                        # r0 �� ������ Positive Pad Select
                        COM filter_reset,filter_name=popup
                        COM filter_atr_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=inkjet_marking_align
                        COM filter_set,filter_name=popup,update_popup=no,exclude_syms=r0
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r*
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=pad
                        COM filter_set,filter_name=popup,update_popup=no,polarity=positive
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        if {$::COMANS} {

                                # Automotive �϶�
                                if {[regexp {Automotive} $sPRDHA_TXT] && $::wSITE != 3} {
                                        COM sel_change_sym,symbol=r4100,reset_angle=no
                                } elseif {![regexp {Automotive} $sPRDHA_TXT] && $::wSITE != 3} {
                                        COM sel_change_sym,symbol=r4000,reset_angle=no
                                } elseif {$::wSITE == 3} {
                                        COM sel_change_sym,symbol=r4026,reset_angle=no
                                }
                        }

                        # r0 �� ������ Negative Pad Select
                        COM filter_reset,filter_name=popup
                        COM filter_atr_reset,filter_name=popup
                        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=inkjet_marking_align
                        COM filter_set,filter_name=popup,update_popup=no,exclude_syms=r0
                        COM filter_set,filter_name=popup,update_popup=no,include_syms=r*
                        COM filter_set,filter_name=popup,update_popup=no,feat_types=pad
                        COM filter_set,filter_name=popup,update_popup=no,polarity=negative
                        COM filter_area_strt
                        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                        COM get_select_count
                        if {$::COMANS} {

                                # Automotive �϶�
                                if {[regexp {Automotive} $sPRDHA_TXT] && $::wSITE != 3} {
                                        COM sel_change_sym,symbol=r3700,reset_angle=no
                                } elseif {![regexp {Automotive} $sPRDHA_TXT] && $::wSITE != 3} {
                                        COM sel_change_sym,symbol=r3600,reset_angle=no
                                } elseif {$::wSITE == 3} {
                                        COM sel_change_sym,symbol=r3626,reset_angle=no
                                }
                        }


                }
        }

        # END

        puts "####### pMARKING_REGISTRATION_COUPON_SIZE_CHANGE END #################################"
        puts "####### pMARKING_REGISTRATION_COUPON_SIZE_CHANGE END #################################"
        puts "####### pMARKING_REGISTRATION_COUPON_SIZE_CHANGE END #################################"
}


################################################################################
## Procedure    : pPANEL_GUIDE_INTRUSION_CHECK
## ����         : PNL Guide �� �迭�� Step �� Touch �Ǵ��� Check
## Input        :
## Return       :

proc pPANEL_GUIDE_INTRUSION_CHECK { } {

        puts "####### pPANEL_GUIDE_INTRUSION_CHECK START !!! ########################"
        puts "####### pPANEL_GUIDE_INTRUSION_CHECK START !!! ########################"
        puts "####### pPANEL_GUIDE_INTRUSION_CHECK START !!! ########################"

        # Layer ���� proc pLAYER_INFO Call
        #pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        #pSTRUCTURE_CONVERT

        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        # �ӽ� Layer ���� Ȯ��
        set chk_layer guide_intrusion_chk
        set guide_layer all_guide_tmp
        set flag 0

        # �ӽ� ���̾� ����
        DO_INFO -t layer -e $::wJOB/$::wPANEL/$chk_layer -d EXISTS
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$chk_layer
        }
        COM create_layer,layer=$chk_layer,context=misc,type=signal,polarity=positive,ins_layer=

        DO_INFO -t layer -e $::wJOB/$::wPANEL/$guide_layer -d EXISTS
        if {$gEXISTS == "yes"} {
                COM delete_layer,layer=$guide_layer
        }

        # �迭�� Step�� Fill Profile �Ͽ� Panel Step ���� �̵�
        DO_INFO -t step -e $::wJOB/$::wPANEL,units=mm
        set gSRstep [lsort -unique $gSRstep]

        foreach step $gSRstep {

                STEP_ON $::wJOB $step yes

                WORK $chk_layer
                COM sr_fill,polarity=positive,step_margin_x=0,step_margin_y=0,step_max_dist_x=2540,step_max_dist_y=2540,sr_margin_x=0,sr_margin_y=0,sr_max_dist_x=0,sr_max_dist_y=0,nest_sr=yes,stop_at_steps=,consider_feat=no,consider_drill=no,consider_rout=no,dest=affected_layers,attributes=no

                # 0um ��� (Outline �� 1��1 üũ)
                set size 0
                COM sel_resize,size=$size,corner_ctl=no

                COM filter_reset,filter_name=popup
                COM filter_area_strt
                COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

                COM get_select_count
                if {$::COMANS} {
                        COM sel_move_repeat,dest_step=$::wPANEL,x_repeats=0,y_repeats=0,delete_orig=yes
                }

        }

        # PANEL STEP �� �ִ� �� Symbol �� ���Ͽ� List Ȯ��
        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        # Board �Ӽ� Image / SR / MK / Drill Layer �� Select
        COM affected_filter,filter=(type=signal|power_ground|mixed|solder_mask|silk_screen|solder_paste|drill&context=board)

        # Text, Dummy ���� ��� Guide�� $guide_layer �� Copy
        COM filter_reset,filter_name=popup
        COM filter_set,filter_name=popup,update_popup=no,feat_types=line\;pad\;surface\;arc
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no

        COM filter_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=dummy
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=unselect,area_type=none,inside_area=no,intersect_area=no

        COM get_select_count
        if {$::COMANS} {
                COM sel_copy_other,dest=layer_name,target_layer=$guide_layer,invert=no,dx=0,dy=0,size=0,x_anchor=0,y_anchor=0,rotation=0,mirror=none
        }


        COM filter_reset,filter_name=popup
        CLEAR_RESET

        # Reference Selection : Touch �� Guide Ȯ��
        WORK $guide_layer
        COM sel_ref_feat,layers=$chk_layer,use=filter,mode=touch,pads_as=shape,f_types=line\;pad\;surface\;arc\;text,polarity=positive\;negative,include_syms=,exclude_syms=

        COM get_select_count
        if {$::COMANS} {
                PAUSE "Need to Check Guide Symbol intrustion of product !!!"
        }

        # �ӽ� ���̾� ����
        DEL_LAYER $chk_layer
        DEL_LAYER $guide_layer


        puts "####### pPANEL_GUIDE_INTRUSION_CHECK END !!! ########################"
        puts "####### pPANEL_GUIDE_INTRUSION_CHECK END !!! ########################"
        puts "####### pPANEL_GUIDE_INTRUSION_CHECK END !!! ########################"

}




################################################################################
## Procedure    : pLAYER_COPPER_THCIKNESS_INSERT
## ����         : Layer �� Copper Thickness & Pair Layer ���� ���� - SAP Interface
## Date         : 2020.10.16
## Input        :
## Return       :

proc pLAYER_COPPER_THCIKNESS_INSERT { layer_info_path } {

        puts "####### pLAYER_COPPER_THCIKNESS_INSERT START #####################"
        puts "####### pLAYER_COPPER_THCIKNESS_INSERT START #####################"
        puts "####### pLAYER_COPPER_THCIKNESS_INSERT START #####################"

        # ���� Tool No Check
        if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                puts "It is not Regular Tool! Copper Thickness Insert SKIP.!!"
                return
        }

        # M1 & M2 ��� ����
#        if {$::wSITE != 3} {
#                puts "Site is not M2, pLAYER_COPPER_THCIKNESS_INSERT SKIP !!"
#                return
#        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
                source $pnl_file_path/$pnl_info_file_name
        } else {
                tk_messageBox -message "ERROR (pLAYER_COPPER_THCIKNESS_INSERT) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_COPPER_THCIKNESS_INSERT) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        ## ����� Drill Info
        #d01   01 08 3 cf both 100.000 100.000 top m 200 yes
        #d0207 02 07 2 cf btm  100.000 100.000 top m 190 yes
        #c0102 01 02 3 cf top  100.000 100.000 top c     no
        #c0807 08 07 3 cf btm  100.000 100.000 btm c     no


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_COPPER_THCIKNESS_INSERT) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                # 2L
        }
        ## ����� Trim Info
        #1 5 5 402 505 bonding+pin
        #2 5 5 397 500 bonding+pin


        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000

        # START
        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        COM affected_layer,mode=board,affected=yes
        COM filter_atr_reset,filter_name=popup
        COM filter_atr_set,filter_name=popup,condition=yes,attribute=.string,text=Cu_Thickness_and_Pair_layer_info
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                COM sel_delete
        }

        CLEAR_RESET
        WORK l$::wSTART_LAYER_NO

        # ������ Text Layer ��ǥ ����
        COM filter_atr_reset,filter_name=popup
        COM filter_set,filter_name=popup,update_popup=no,text=l$::wSTART_LAYER_NO
        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/l$::wSTART_LAYER_NO -d FEATURES -o select, units=mm
                # L01 ���ڷ� ���� �̰� �Ÿ� ����
                foreach line $::data {
                        if {[lindex $line 0] == "#T" && [regexp {\$\$LAYER} $line]} {
                                set pos_x1 [lindex $line 1]
                                set pos_y1 [lindex $line 2]
                                break
                        }
                }
                #PAUSE ==X1=$pos_x1==Y1=$pos_y1==
        } else {
                PAUSE "Need to Check l{$::wSTART_LAYER_NO} Name.!!!"
                exit 1
        }
        WORK l$::wEND_LAYER_NO
        # ������ Text Layer ��ǥ ����
        COM filter_set,filter_name=popup,update_popup=no,text=l$::wEND_LAYER_NO
        COM filter_set,filter_name=popup,update_popup=no,feat_types=text
        COM filter_area_strt
        COM filter_area_end,layer=,filter_name=popup,operation=select,area_type=none,inside_area=no,intersect_area=no
        COM get_select_count
        if {$::COMANS} {
                DO_INFO1 -t layer -e $::wJOB/$::wPANEL/l$::wEND_LAYER_NO -d FEATURES -o select, units=mm
                # LXX ���ڷ� ���� �̰� �Ÿ� ����
                foreach line $::data {
                        if {[lindex $line 0] == "#T" && [regexp {\$\$LAYER} $line]} {
                                set pos_x2 [lindex $line 1]
                                set pos_y2 [lindex $line 2]
                                break
                        }
                }
                #PAUSE ==X2=$pos_x2==Y2=$pos_y2==
        } else {
                PAUSE "Need to Check l{$::wEND_LAYER_NO} Name.!!!"
                exit 1
        }


        # SAP Interface - Copper �β� ���� ����
        if {[regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_LIST
        }
        # �β� Check - BOM ���� Ȯ��
        if {[lsearch $sTABLE_LIST 1120] != -1} {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1120
                # sBOMNR      = BOM����[1 2 3 4 5 6 7 8 9 10 11]
                # sRAWGR      = �������� [SILK PSR C/F PPG CCL PPG PPG CCL PPG C/F PSR SILK]
                # sLAYER      = LAYER  [000 000 001 000 002 000 004 000 006 000 000]
                # sLAYER2     = LAYER2 [000 000 000 000 003 000 005 000 000 000 000]
                # sMATNRTIK   = ����β� [0.000 0.000. 0.012 0.200 0.300 0.200 0.300 0.200 0.012 0.000 0.000]
                # sCOPPERTIK  = ���ڵβ� [0.000 0.000 12.000 0.000 .....]
                # sCOPPERTIK2 = ���ڵβ�2 [0.000 0.000 12.000 0.000 .....]
                # sMATNRTIKT = �����̷еβ� [10.000 20.000 0.000 210.000 300.000 210.000 300.000 210.000 0.000 20.000 10.000]
        }

        # �� ������ Pair Layer Check
        set pair_layer_list [pLAYER_PAIR_CHECK $layer_info_path]

        # Text Box Copper ���� ��ǥ
        set add_x1 29
        set add_y1 6.75

        # Text ���� ��ǥ
        set add_x2 16.5
        set add_y2 5.5

        # Pair Layer ���� ��ǥ
        set add_pair_layer_x 24.5
        set add_pair_layer_y 5.5

        set layer_cu_thickness ""

        # �� ���� Copper �β� ���� �� Pair Layer ���� ����
        foreach layer $layer_info {
                if {$layer == ""} {continue}
                WORK [lindex $layer 0]
                set slayer [scan [regsub {l} [lindex $layer 0] ""] %d]
                set mirror [lindex $layer 2]
                set text_box_size rect28000x3000
                # Text Width = 300um
                set font_width 0.9842519685
                COM cur_atr_set,attribute=.string,text=Cu_Thickness_and_Pair_layer_info

                # Copper Thickness �� Ȯ��
                foreach LAYER $sLAYER LAYER2 $sLAYER2 COPPERTIK $sCOPPERTIK COPPERTIK2 $sCOPPERTIK2 {
                        # No Mirror
                        if {$slayer == [scan $LAYER %d]} {
                                set copper_thickness [format %.f $COPPERTIK]um
                                break
                        # Mirror
                        } elseif {$slayer == [scan $LAYER2 %d]} {
                                set copper_thickness [format %.f $COPPERTIK2]um
                                break
                        }
                }

                if {$mirror == "no"} {
                        # Text Box Copper ���� ��ǥ
                        set pos_x_box [expr $pos_x1 + $add_x1]
                        set pos_y_box [expr $pos_y1 + $add_y1]

                        # Text ���� ��ǥ
                        set pos_x_text [expr $pos_x1 + $add_x2]
                        set pos_y_text [expr $pos_y1 + $add_y2]

                        # Pair Layer Text ���� ��ǥ
                        set pos_x_pair [expr $pos_x1 + $add_pair_layer_x]
                        set pos_y_pair [expr $pos_y1 + $add_pair_layer_y]
                } else {
                        # Text Box Copper ���� ��ǥ
                        set pos_x_box [expr $pos_x2 - $add_x1]
                        set pos_y_box [expr $pos_y2 + $add_y1]

                        # Text ���� ��ǥ
                        set pos_x_text [expr $pos_x2 - $add_x2]
                        set pos_y_text [expr $pos_y2 + $add_y2]

                        # Pair Layer Text ���� ��ǥ
                        set pos_x_pair [expr $pos_x2 - $add_pair_layer_x]
                        set pos_y_pair [expr $pos_y2 + $add_pair_layer_y]
                }

                # Pair Layer ���� Check
                set check_layer [lsearch -inline $pair_layer_list *[lindex $layer 0]*]
                set check_layer [string toupper $check_layer]
                puts "check_layer=$check_layer"

                # Copper ����
                COM add_pad,attributes=yes,x=$pos_x_box,y=$pos_y_box,symbol=$text_box_size,polarity=positive,angle=0,mirror=no,nx=1,ny=1,dx=0,dy=0,xscale=1,yscale=1

                # �β� ���� Text ����
                COM add_text,attributes=yes,type=string,x=$pos_x_text,y=$pos_y_text,text=$copper_thickness,x_size=1.5,y_size=2.5,w_factor=$font_width,polarity=negative,angle=0,mirror=$mirror,fontname=standard,ver=1

                # Pair Layer ���� ����
                COM add_text,attributes=yes,type=string,x=$pos_x_pair,y=$pos_y_pair,text=$check_layer,x_size=1.5,y_size=2.5,w_factor=$font_width,polarity=negative,angle=0,mirror=$mirror,fontname=standard,ver=1

                lappend layer_cu_thickness "[lindex $layer 0] $copper_thickness"
        }

        # CP Layer ���� Pair Layer ���� ����
        foreach layer $cp_all {
                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$layer -d EXISTS
                if {$gEXISTS == "no"} {continue}

                WORK $layer
                COM cur_atr_set,attribute=.string,text=Cu_Thickness_and_Pair_layer_info

                # CP-Layer Mirror Check
                # CP Layer�� Matching �Ǵ� ���� Layer �̸� ����
                set _layer [lindex [regsub {\-} [regsub {cp} $layer "l"] " "] 0]

                # ���� Layer ���� Cu Thickness Ȯ��
                foreach chk_layer $layer_cu_thickness {
                        if {$_layer == [lindex $chk_layer 0]} {
                                set copper_thickness [lindex $chk_layer 1]
                                break
                        }
                }

                # CP Layer�� ���� Layer Name Mirror ���� Ȯ��
                if {[lindex [lsearch -inline $layer_info *$_layer*] 2] == "no"} {
                        # Mirror=no �� ��� �������� ����, CP Layer ���� ū ���� ���� Layer Scale ����
                        set mirror no
                } else {
                        set mirror yes
                }


                if {$mirror == "no"} {
                         # Text ���� ��ǥ
                        set pos_x_text [expr $pos_x1 + $add_x2]
                        set pos_y_text [expr $pos_y1 + $add_y2 + 3]

                        # Pair Layer Text ���� ��ǥ
                        set pos_x_pair [expr $pos_x1 + $add_pair_layer_x]
                        set pos_y_pair [expr $pos_y1 + $add_pair_layer_y + 3]
                } else {
                        # Text ���� ��ǥ
                        set pos_x_text [expr $pos_x2 - $add_x2]
                        set pos_y_text [expr $pos_y2 + $add_y2 + 3]

                        # Pair Layer Text ���� ��ǥ
                        set pos_x_pair [expr $pos_x2 - $add_pair_layer_x]
                        set pos_y_pair [expr $pos_y2 + $add_pair_layer_y + 3]
                }

                # Pair Layer ���� Check
                set check_layer [lsearch -inline $pair_layer_list *$layer*]
                set check_layer [string toupper $check_layer]
                puts "check_layer=$check_layer"

                # �β� ���� Text ����
                COM add_text,attributes=yes,type=string,x=$pos_x_text,y=$pos_y_text,text=$copper_thickness,x_size=1.5,y_size=2.5,w_factor=$font_width,polarity=negative,angle=0,mirror=$mirror,fontname=standard,ver=1

                # Pair Layer ���� ����
                COM add_text,attributes=yes,type=string,x=$pos_x_pair,y=$pos_y_pair,text=$check_layer,x_size=1.5,y_size=2.5,w_factor=$font_width,polarity=negative,angle=0,mirror=$mirror,fontname=standard,ver=1

        }

        COM cur_atr_reset
        COM filter_reset,filter_name=popup

        if {$::wCU_THICK_AND_PAIR_LAYER == 1} {
                PAUSE "Cu Thickness And Pair Layer Information Insert Success !!!"
        }

        puts "####### pLAYER_COPPER_THCIKNESS_INSERT END #######################"
        puts "####### pLAYER_COPPER_THCIKNESS_INSERT END #######################"
        puts "####### pLAYER_COPPER_THCIKNESS_INSERT END #######################"

        # END


}




################################################################################
## Procedure    : pLAYER_PAIR_CHECK
## ����         : �� ������ Pair Layer Check
## Date         : 2020.10.16
## Input        :
## Return       :

proc pLAYER_PAIR_CHECK { layer_info_path } {

        puts "####### pLAYER_PAIR_CHECK START #####################"
        puts "####### pLAYER_PAIR_CHECK START #####################"
        puts "####### pLAYER_PAIR_CHECK START #####################"


#        if {$::wSITE != 3} {
#                puts "Site is not M2, pLAYER_PAIR_CHECK SKIP !!"
#                return
#        }

        # Layer ���� proc pLAYER_INFO Call
        pLAYER_INFO $layer_info_path

        # Panel ������ �ʿ��� ���� ���� ����
        pSTRUCTURE_CONVERT

        # Panel Info Load ######################################################
        set pnl_info_file_name "dde_mlb_panel.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$pnl_info_file_name]} {
                        set pnl_file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$pnl_info_file_name]} {
                        set pnl_file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists pnl_file_path]} {
                set f [open $pnl_file_path/$pnl_info_file_name r]
                set pnl_info [split [read $f] "\n"]
                close $f
                source $pnl_file_path/$pnl_info_file_name
        } else {
                tk_messageBox -message "ERROR (pLAYER_PAIR_CHECK) : $pnl_file_path/$pnl_info_file_name not found!!!"
                return
        }


        # Drill Info Load ######################################################################################
        set drill_info_file_name "dde_mlb_panel_drill.info"


        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$drill_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$drill_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$drill_info_file_name r]
                set drill_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_PAIR_CHECK) : $file_path/$drill_info_file_name not found!!!"
                return
        }

        ## ����� Drill Info
        #d01   01 08 3 cf both 100.000 100.000 top m 200 yes
        #d0207 02 07 2 cf btm  100.000 100.000 top m 190 yes
        #c0102 01 02 3 cf top  100.000 100.000 top c     no
        #c0807 08 07 3 cf btm  100.000 100.000 btm c     no


        # Layer Info Load ######################################################################################
        set layer_info_file_name "dde_mlb_panel_layer.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$layer_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$layer_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$layer_info_file_name r]
                set layer_info [split [read $f] "\n"]
                close $f
        } else {
                tk_messageBox -message "ERROR (pLAYER_PAIR_CHECK) : $file_path/$layer_info_file_name not found!!!"
                return
        }


        # Trim Info Load ######################################################################################
        set trim_info_file_name "dde_mlb_panel_trim.info"

        if {$::wINCAM == 1} {
                if {[file exists $::env(JOB_USER_DIR)/$trim_info_file_name]} {
                        set file_path $::env(JOB_USER_DIR)
                }
        } else {
                if {[file exists $::gGENESIS_JOB_DB_PATH/user/$trim_info_file_name]} {
                        set file_path "$::gGENESIS_JOB_DB_PATH/user"
                }
        }

        if {[info exists file_path]} {
                set f [open $file_path/$trim_info_file_name r]
                set trim_info [split [read $f] "\n"]
                close $f
        } else {
                # 2L
        }
        ## ����� Trim Info
        #1 5 5 402 505 bonding+pin
        #2 5 5 397 500 bonding+pin


        # ���� Tool No Check
        if { ! [regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                puts "It is not Regular Tool! pLAYER_PAIR_CHECK SKIP.!!"
                return
        }

        ## ����� Layer Info
        #l01 nega no 3 0.05over cf 100.000 100.000
        #l02 nega no 2 0.05below ccl 100.000 100.000
        #l03 nega yes 1 0.05below ccl 100.000 100.000
        #l04 nega no 1 0.05over ccl 100.000 100.000

        # START
        STEP_ON $::wJOB $::wPANEL no
        CLEAR_RESET

        # SAP Interface - Copper �β� ���� ����
        if {[regexp {^[a-z]{3}[0-9]{5}\-[0-9]{2}} $::wJOB] } {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_LIST
        }
        # �β� Check - BOM ���� Ȯ��
        if {[lsearch $sTABLE_LIST 1120] != -1} {
                pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1120
                # sBOMNR      = BOM����[1 2 3 4 5 6 7 8 9 10 11]
                # sLAYER      = LAYER  [000 000 001 000 002 000 004 000 006 000 000]
                # sLAYER2     = LAYER2 [000 000 000 000 003 000 005 000 000 000 000]
                # sMATNRTIK   = ����β� [0.000 0.000. 0.012 0.200 0.300 0.200 0.300 0.200 0.012 0.000 0.000]
                # sCOPPERTIK  = ���ڵβ� [0.000 0.000 12.000 0.000 .....]
                # sCOPPERTIK2 = ���ڵβ�2 [0.000 0.000 12.000 0.000 .....]
                # sMATNRTIKT = �����̷еβ� [10.000 20.000 0.000 210.000 300.000 210.000 300.000 210.000 0.000 20.000 10.000]
        }

        set layer_cnt 0
        set pair_layer_list ""
        foreach BOMNR $sBOMNR LAYER $sLAYER LAYER2 $sLAYER2 MATNRTIK $sMATNRTIK COPPERTIK $sCOPPERTIK COPPERTIK2 $sCOPPERTIK2 MATNRTIKT $sMATNRTIKT {

                # CCL �� ��� - ���� 1�� Order Define
                if {$LAYER != "0" && $LAYER2 != "0"} {

                        #PAUSE "$BOMNR $LAYER $LAYER2 $MATNRTIK $COPPERTIK $COPPERTIK2 $MATNRTIKT"

                        if {$LAYER > $::wNO_OF_LAYER || $LAYER2 > $::wNO_OF_LAYER} {
                                PAUSE "Need to Check SAP BOM Layer Information. Call to Spec !!!"
                        }

                        foreach layer $layer_info {
                                #l01 nega no 3 0.05over cf 100.000 100.000
                                #l02 nega no 2 0.05below ccl 100.000 100.000
                                if {$layer == ""} {continue}

                                # Top Layer
                                if {[format %03d [scan [regsub {^l} [lindex $layer 0] ""] %d]] == [format %03d $LAYER]} {
                                        set layer_top [lindex $layer 0]
                                        set layer_top_order [lindex $layer 3]
                                }

                                # Btm Layer
                                if {[format %03d [scan [regsub {^l} [lindex $layer 0] ""] %d]] == [format %03d $LAYER2]} {
                                        set layer_btm [lindex $layer 0]
                                        set layer_btm_order [lindex $layer 3]
                                }
                        }

                        # CP Layer Define = pOPPOSITE_SCALE �Լ��� Logic ����
                        foreach cplayer $cp_all {
                                DO_INFO -t layer -e $::wJOB/$::wSR_STEP/$cplayer -d EXISTS
                                if {$gEXISTS == "no"} {continue}

                                # CP Layer�� Matching �Ǵ� ���� Layer �̸� ����
                                set _layer [lindex [regsub {\-} [regsub {cp} $cplayer "l"] " "] 0]
                                # CP Layer Order ����
                                set cp_order [lindex [regsub {\-} [regsub {cp} $cplayer "l"] " "] 1]
                                set app_layer ""
                                foreach line $layer_info {
                                        # CP Layer �� ���� ���� Layer List ����
                                        if {$cp_order == [lindex $line 3]} {
                                                lappend app_layer [lindex $line 0]
                                        }
                                }
                                puts "cp_order=$cp_order $app_layer"
                                #cp_order=3 l13 l14

                                # CP Layer�� ���� Layer Name Mirror ���� Ȯ��
                                if {[lindex [lsearch -inline $layer_info *$_layer*] 2] == "no"} {
                                        # Mirror=no �� ��� �������� ����, CP Layer ���� ū ���� ���� Layer Scale ����
                                        set mirror no
                                        set polarity negative
                                        set app_layer [lsort -dict -increasing $app_layer]
                                        puts "$layer INCR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
                                        # cp02-3 INCR=no l13 l14
                                        foreach line2 $app_layer {
                                                if {[regsub {l} $line2 ""] > [regsub {l} $_layer ""]} {
                                                        set s_layer $line2
                                                        puts $s_layer
                                                        puts "CP=$s_layer"
                                                        # CP=l13
                                                        break
                                                } else {
                                                        continue
                                                }
                                        }

                                } else {
                                        # Mirror=yes �� ��� �������� ����, CP Layer ���� ���� ���� ū Layer Scale ����
                                        set mirror yes
                                        set polarity negative
                                        set app_layer [lsort -dict -decreasing $app_layer]
                                        puts "$layer DECR=[lindex [lsearch -inline $layer_info *$_layer*] 2] $app_layer"
                                        # cp25-3 DECR=yes l14 l13
                                        foreach line2 $app_layer {
                                                if {[regsub {l} $line2 ""] < [regsub {l} $_layer ""]} {
                                                        set s_layer $line2
                                                        puts $s_layer
                                                        puts "CP=$s_layer"
                                                        # CP=l13
                                                        break
                                                } else {
                                                        continue
                                                }
                                        }

                                }
                                puts "CP $cplayer == Matching $s_layer"

                                if {$s_layer == $layer_btm} {
                                        set layer_top $cplayer

                                } elseif {$s_layer == $layer_top} {
                                        set layer_btm $cplayer
                                }

                                set pair_layer "$cplayer / $s_layer"
                                lappend pair_layer_list $pair_layer
                        }
                        puts "$layer_top = order $layer_top_order == $layer_btm = order $layer_btm_order"

                        # Info Define
                        set pair_layer "$layer_top / $layer_btm"

                        lappend pair_layer_list $pair_layer
                }
        }
        set pair_layer_list [lsort -uniq $pair_layer_list]
        #puts $pair_layer_list

        # �߰� �� �� ���� ����
        if {$::wNO_OF_LAYER > 2} {
                if {[lsearch $sTABLE_LIST 1130] != -1} {
                        pSAP_DATA_DOWN [string range $::wJOB 0 10] /genesis/share/sap_info_down TABLE_INFO 1130
                        # sSSEQNR    = Scale ���� [1 2 3 4]
                        # sLAYERFR   = ������     [4 3 2 1]
                        # sLAYERTO   = ������     [15 16 17 18]
                        # sTIKAL     = �����ĵβ� [0.000 1.904 2.064 2.494]
                        foreach SSEQNR $sSSEQNR LAYERFR $sLAYERFR LAYERTO $sLAYERTO TIKAL $sTIKAL {
                                #puts "TIKAL==$TIKAL"
                                # ���� �β��� "0.000" �̸� Continue (1�� �̹���)
                                if {$TIKAL == 0} {continue}
                                if {$::wNO_OF_LAYER < 100} {
                                        set layer_top l[format %02d $LAYERFR]
                                        set layer_btm l[format %02d $LAYERTO]
                                } else {
                                        set layer_top l[format %03d $LAYERFR]
                                        set layer_btm l[format %03d $LAYERTO]
                                }
                                # Top Layer & Btm Layer ����
                                #puts "layer_top=$layer_top && layer_btm=$layer_btm"

                                # BVH Type Check - Top Layer �� Btm Layer ��� CP Layer �� Pair �� Layer Check �� �ȰḮ�� �߰� (Build-up Type)
                                set check_top [lsearch -inline $pair_layer_list *$layer_top*]
                                set check_btm [lsearch -inline $pair_layer_list *$layer_btm*]
                                puts "check_top=$check_top && check_btm=$check_btm"
                                if {$check_top == "" && $check_btm == ""} {
                                        set pair_layer "$layer_top / $layer_btm"
                                        lappend pair_layer_list $pair_layer
                                }
                        }
                }
                #PAUSE $layer_thickness
        }
        set pair_layer_list [lsort -uniq $pair_layer_list]
        puts "pair_layer_list==$pair_layer_list"

        return $pair_layer_list


        puts "####### pLAYER_PAIR_CHECK END #######################"
        puts "####### pLAYER_PAIR_CHECK END #######################"
        puts "####### pLAYER_PAIR_CHECK END #######################"

        # END


}
